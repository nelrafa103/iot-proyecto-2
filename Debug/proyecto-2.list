
proyecto-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c98  08008c98  0000a1ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008c98  08008c98  00009c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca0  08008ca0  0000a1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca0  08008ca0  00009ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ca4  08008ca4  00009ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008ca8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  08008d14  0000a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  08008db4  0000a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008e6c  200001ac  08008e54  0000a1ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009018  08008e54  0000b018  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c11c  00000000  00000000  0000a1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bf2  00000000  00000000  000262f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001580  00000000  00000000  00029ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000108b  00000000  00000000  0002b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005164  00000000  00000000  0002c4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019a27  00000000  00000000  00031657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010579c  00000000  00000000  0004b07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015081a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000061f8  00000000  00000000  00150860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00156a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	08008a9c 	.word	0x08008a9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	08008a9c 	.word	0x08008a9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <inicializarMatrices>:
} InfoParcial;

TimerHandle_t timer;

// Inicializar matrices
void inicializarMatrices() {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
    for (int i = 0; i < SIZE; i++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e025      	b.n	8000628 <inicializarMatrices+0x58>
        for (int j = 0; j < SIZE; j++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	e01c      	b.n	800061c <inicializarMatrices+0x4c>
            matriz_a[i][j] = i + j;
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	18d1      	adds	r1, r2, r3
 80005e8:	4814      	ldr	r0, [pc, #80]	@ (800063c <inicializarMatrices+0x6c>)
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	4613      	mov	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	4413      	add	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
            matriz_b[i][j] = i - j;
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1ad1      	subs	r1, r2, r3
 8000602:	480f      	ldr	r0, [pc, #60]	@ (8000640 <inicializarMatrices+0x70>)
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4613      	mov	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	4413      	add	r3, r2
 8000612:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (int j = 0; j < SIZE; j++) {
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b23      	cmp	r3, #35	@ 0x23
 8000620:	dddf      	ble.n	80005e2 <inicializarMatrices+0x12>
    for (int i = 0; i < SIZE; i++) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b23      	cmp	r3, #35	@ 0x23
 800062c:	ddd6      	ble.n	80005dc <inicializarMatrices+0xc>
        }
    }
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	200008a4 	.word	0x200008a4
 8000640:	20001ce4 	.word	0x20001ce4

08000644 <imprimirMatriz>:

// Imprimir matrices
void imprimirMatriz(int matriz[SIZE][SIZE]) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < SIZE; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e01d      	b.n	800068e <imprimirMatriz+0x4a>
        for (int j = 0; j < SIZE; j++) {
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	e011      	b.n	800067c <imprimirMatriz+0x38>
            printf("%d ", matriz[i][j]);
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4613      	mov	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	4413      	add	r3, r2
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <imprimirMatriz+0x5c>)
 8000672:	f007 fafd 	bl	8007c70 <iprintf>
        for (int j = 0; j < SIZE; j++) {
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	3301      	adds	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b23      	cmp	r3, #35	@ 0x23
 8000680:	ddea      	ble.n	8000658 <imprimirMatriz+0x14>
        }
        printf("\n");
 8000682:	200a      	movs	r0, #10
 8000684:	f007 fb06 	bl	8007c94 <putchar>
    for (int i = 0; i < SIZE; i++) {
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b23      	cmp	r3, #35	@ 0x23
 8000692:	ddde      	ble.n	8000652 <imprimirMatriz+0xe>
    }
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08008ac0 	.word	0x08008ac0

080006a4 <tareaMultiplicacion>:

// Tarea de cálculo de matrices
void tareaMultiplicacion(void *pvParameters) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b090      	sub	sp, #64	@ 0x40
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    int id = (int)pvParameters;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
    int filasPorTarea = SIZE / TASKS;
 80006b0:	2309      	movs	r3, #9
 80006b2:	623b      	str	r3, [r7, #32]
    int inicio = id * filasPorTarea;
 80006b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b6:	6a3a      	ldr	r2, [r7, #32]
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	61fb      	str	r3, [r7, #28]
    int fin = inicio + filasPorTarea;
 80006be:	69fa      	ldr	r2, [r7, #28]
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	4413      	add	r3, r2
 80006c4:	61bb      	str	r3, [r7, #24]

    int contadorCalculos = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TickType_t inicioTiempo = xTaskGetTickCount();
 80006ca:	f005 fcef 	bl	80060ac <xTaskGetTickCount>
 80006ce:	63b8      	str	r0, [r7, #56]	@ 0x38

    for (int i = inicio; i < fin; i++) {
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80006d4:	e068      	b.n	80007a8 <tareaMultiplicacion+0x104>
        for (int j = 0; j < SIZE; j++) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80006da:	e05f      	b.n	800079c <tareaMultiplicacion+0xf8>
            int suma = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            for (int k = 0; k < SIZE; k++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006e4:	e01b      	b.n	800071e <tareaMultiplicacion+0x7a>
                suma += matriz_a[i][k] * matriz_b[k][j];
 80006e6:	4939      	ldr	r1, [pc, #228]	@ (80007cc <tareaMultiplicacion+0x128>)
 80006e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006ea:	4613      	mov	r3, r2
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80006fa:	4835      	ldr	r0, [pc, #212]	@ (80007d0 <tareaMultiplicacion+0x12c>)
 80006fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006fe:	4613      	mov	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000708:	4413      	add	r3, r2
 800070a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000714:	4413      	add	r3, r2
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
            for (int k = 0; k < SIZE; k++) {
 8000718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800071a:	3301      	adds	r3, #1
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800071e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000720:	2b23      	cmp	r3, #35	@ 0x23
 8000722:	dde0      	ble.n	80006e6 <tareaMultiplicacion+0x42>
            }

            xSemaphoreTake(mutex, portMAX_DELAY);
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <tareaMultiplicacion+0x130>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	4618      	mov	r0, r3
 800072e:	f004 fe87 	bl	8005440 <xQueueSemaphoreTake>
            resultado[i][j] = suma;
 8000732:	4929      	ldr	r1, [pc, #164]	@ (80007d8 <tareaMultiplicacion+0x134>)
 8000734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000740:	4413      	add	r3, r2
 8000742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            xSemaphoreGive(mutex);
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <tareaMultiplicacion+0x130>)
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	2300      	movs	r3, #0
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	f004 fbdf 	bl	8004f14 <xQueueGenericSend>

            contadorCalculos++;
 8000756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000758:	3301      	adds	r3, #1
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c

            // Enviar resultados parciales cada 1000 cálculos
            if (contadorCalculos >= CALCULOS_PARCIALES) {
 800075c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800075e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000762:	db18      	blt.n	8000796 <tareaMultiplicacion+0xf2>
                TickType_t tiempoActual = xTaskGetTickCount();
 8000764:	f005 fca2 	bl	80060ac <xTaskGetTickCount>
 8000768:	6178      	str	r0, [r7, #20]
                TickType_t tiempoTranscurrido = tiempoActual - inicioTiempo;
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	613b      	str	r3, [r7, #16]

                InfoParcial info = {
 8000772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	60fb      	str	r3, [r7, #12]
                    .calculosRealizados = contadorCalculos,
                    .tiempoTranscurrido = tiempoTranscurrido
                };

                xQueueSend(queue, &info, portMAX_DELAY);
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <tareaMultiplicacion+0x138>)
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	f107 0108 	add.w	r1, r7, #8
 8000782:	2300      	movs	r3, #0
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	f004 fbc4 	bl	8004f14 <xQueueGenericSend>

                contadorCalculos = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                inicioTiempo = xTaskGetTickCount();
 8000790:	f005 fc8c 	bl	80060ac <xTaskGetTickCount>
 8000794:	63b8      	str	r0, [r7, #56]	@ 0x38
        for (int j = 0; j < SIZE; j++) {
 8000796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000798:	3301      	adds	r3, #1
 800079a:	633b      	str	r3, [r7, #48]	@ 0x30
 800079c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800079e:	2b23      	cmp	r3, #35	@ 0x23
 80007a0:	dd9c      	ble.n	80006dc <tareaMultiplicacion+0x38>
    for (int i = inicio; i < fin; i++) {
 80007a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007a4:	3301      	adds	r3, #1
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80007a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	db92      	blt.n	80006d6 <tareaMultiplicacion+0x32>
            }
        }
    }

    xSemaphoreGive(semaforo);
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <tareaMultiplicacion+0x13c>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	f004 fbab 	bl	8004f14 <xQueueGenericSend>
    vTaskDelete(NULL);
 80007be:	2000      	movs	r0, #0
 80007c0:	f005 faac 	bl	8005d1c <vTaskDelete>
}
 80007c4:	bf00      	nop
 80007c6:	3740      	adds	r7, #64	@ 0x40
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200008a4 	.word	0x200008a4
 80007d0:	20001ce4 	.word	0x20001ce4
 80007d4:	20004564 	.word	0x20004564
 80007d8:	20003124 	.word	0x20003124
 80007dc:	2000456c 	.word	0x2000456c
 80007e0:	20004568 	.word	0x20004568

080007e4 <temporizadorCallback>:

// Temporizador para medir el tiempo
void temporizadorCallback(TimerHandle_t xTimer) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    printf("El temporizador periódico está activo.\n");
 80007ec:	4803      	ldr	r0, [pc, #12]	@ (80007fc <temporizadorCallback+0x18>)
 80007ee:	f007 faaf 	bl	8007d50 <puts>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08008ac4 	.word	0x08008ac4

08000800 <tareaMonitoreo>:

// Tarea de monitoreo
void tareaMonitoreo(void *pvParameters) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    InfoParcial info;

    while (1) {
        if (xQueueReceive(queue, &info, portMAX_DELAY)) {
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <tareaMonitoreo+0x58>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f107 0108 	add.w	r1, r7, #8
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fd2b 	bl	8005270 <xQueueReceive>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d005      	beq.n	800082c <tareaMonitoreo+0x2c>
            printf("Cálculos realizados: %d, Tiempo transcurrido: %d ticks\n",
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <tareaMonitoreo+0x5c>)
 8000828:	f007 fa22 	bl	8007c70 <iprintf>
                   info.calculosRealizados, info.tiempoTranscurrido);
        }

        if (uxSemaphoreGetCount(semaforo) == 0) {
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <tareaMonitoreo+0x60>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f004 ff1d 	bl	8005670 <uxQueueMessagesWaiting>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d108      	bne.n	800084e <tareaMonitoreo+0x4e>
            printf("Cálculo completado. Resultado final:\n");
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <tareaMonitoreo+0x64>)
 800083e:	f007 fa87 	bl	8007d50 <puts>
            imprimirMatriz(resultado);
 8000842:	4809      	ldr	r0, [pc, #36]	@ (8000868 <tareaMonitoreo+0x68>)
 8000844:	f7ff fefe 	bl	8000644 <imprimirMatriz>
            vTaskDelete(NULL);
 8000848:	2000      	movs	r0, #0
 800084a:	f005 fa67 	bl	8005d1c <vTaskDelete>
        }

        vTaskDelay(pdMS_TO_TICKS(100));
 800084e:	2064      	movs	r0, #100	@ 0x64
 8000850:	f005 fada 	bl	8005e08 <vTaskDelay>
        if (xQueueReceive(queue, &info, portMAX_DELAY)) {
 8000854:	e7d8      	b.n	8000808 <tareaMonitoreo+0x8>
 8000856:	bf00      	nop
 8000858:	2000456c 	.word	0x2000456c
 800085c:	08008af0 	.word	0x08008af0
 8000860:	20004568 	.word	0x20004568
 8000864:	08008b2c 	.word	0x08008b2c
 8000868:	20003124 	.word	0x20003124

0800086c <__io_putchar>:
    }
}

PUTCHAR_PROTOTYPE
	  {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800087a:	2201      	movs	r2, #1
 800087c:	4803      	ldr	r0, [pc, #12]	@ (800088c <__io_putchar+0x20>)
 800087e:	f002 ff5f 	bl	8003740 <HAL_UART_Transmit>

	    return ch;
 8000882:	687b      	ldr	r3, [r7, #4]
	  }
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000338 	.word	0x20000338

08000890 <main>:

int main(void)
{
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fdf4 	bl	8001482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f8cd 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 fa19 	bl	8000cd4 <MX_GPIO_Init>
  MX_ETH_Init();
 80008a2:	f000 f93b 	bl	8000b1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008a6:	f000 f9b7 	bl	8000c18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008aa:	f000 f9e5 	bl	8000c78 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80008ae:	f000 f983 	bl	8000bb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008b2:	f003 ff45 	bl	8004740 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008b6:	4a4c      	ldr	r2, [pc, #304]	@ (80009e8 <main+0x158>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	484c      	ldr	r0, [pc, #304]	@ (80009ec <main+0x15c>)
 80008bc:	f003 ffaa 	bl	8004814 <osThreadNew>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a4b      	ldr	r2, [pc, #300]	@ (80009f0 <main+0x160>)
 80008c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008c6:	f003 ff6f 	bl	80047a8 <osKernelStart>

  inicializarMatrices();
 80008ca:	f7ff fe81 	bl	80005d0 <inicializarMatrices>

      mutex = xSemaphoreCreateMutex();
 80008ce:	2001      	movs	r0, #1
 80008d0:	f004 facf 	bl	8004e72 <xQueueCreateMutex>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a47      	ldr	r2, [pc, #284]	@ (80009f4 <main+0x164>)
 80008d8:	6013      	str	r3, [r2, #0]
      if (mutex == NULL) {
 80008da:	4b46      	ldr	r3, [pc, #280]	@ (80009f4 <main+0x164>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d104      	bne.n	80008ec <main+0x5c>
          printf("No se pudo crear el mutex.\n");
 80008e2:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <main+0x168>)
 80008e4:	f007 fa34 	bl	8007d50 <puts>
          while (1);
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <main+0x58>
      }

      semaforo = xSemaphoreCreateCounting(TASKS, TASKS);
 80008ec:	2104      	movs	r1, #4
 80008ee:	2004      	movs	r0, #4
 80008f0:	f004 fad7 	bl	8004ea2 <xQueueCreateCountingSemaphore>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a41      	ldr	r2, [pc, #260]	@ (80009fc <main+0x16c>)
 80008f8:	6013      	str	r3, [r2, #0]
      if (semaforo == NULL) {
 80008fa:	4b40      	ldr	r3, [pc, #256]	@ (80009fc <main+0x16c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <main+0x7c>
          printf("No se pudo crear el semáforo.\n");
 8000902:	483f      	ldr	r0, [pc, #252]	@ (8000a00 <main+0x170>)
 8000904:	f007 fa24 	bl	8007d50 <puts>
          while (1);
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <main+0x78>
      }

      queue = xQueueCreate(10, sizeof(InfoParcial));
 800090c:	2200      	movs	r2, #0
 800090e:	2108      	movs	r1, #8
 8000910:	200a      	movs	r0, #10
 8000912:	f004 fa2e 	bl	8004d72 <xQueueGenericCreate>
 8000916:	4603      	mov	r3, r0
 8000918:	4a3a      	ldr	r2, [pc, #232]	@ (8000a04 <main+0x174>)
 800091a:	6013      	str	r3, [r2, #0]
      if (queue == NULL) {
 800091c:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <main+0x174>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d104      	bne.n	800092e <main+0x9e>
          printf("No se pudo crear la cola.\n");
 8000924:	4838      	ldr	r0, [pc, #224]	@ (8000a08 <main+0x178>)
 8000926:	f007 fa13 	bl	8007d50 <puts>
          while (1);
 800092a:	bf00      	nop
 800092c:	e7fd      	b.n	800092a <main+0x9a>
      }

      timer = xTimerCreate("Timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, temporizadorCallback);
 800092e:	4b37      	ldr	r3, [pc, #220]	@ (8000a0c <main+0x17c>)
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800093a:	4835      	ldr	r0, [pc, #212]	@ (8000a10 <main+0x180>)
 800093c:	f006 f936 	bl	8006bac <xTimerCreate>
 8000940:	4603      	mov	r3, r0
 8000942:	4a34      	ldr	r2, [pc, #208]	@ (8000a14 <main+0x184>)
 8000944:	6013      	str	r3, [r2, #0]
      if (timer == NULL) {
 8000946:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <main+0x184>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d104      	bne.n	8000958 <main+0xc8>
          printf("No se pudo crear el temporizador.\n");
 800094e:	4832      	ldr	r0, [pc, #200]	@ (8000a18 <main+0x188>)
 8000950:	f007 f9fe 	bl	8007d50 <puts>
          while (1);
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <main+0xc4>
      }

      xTimerStart(timer, 0);
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <main+0x184>)
 800095a:	681c      	ldr	r4, [r3, #0]
 800095c:	f005 fba6 	bl	80060ac <xTaskGetTickCount>
 8000960:	4602      	mov	r2, r0
 8000962:	2300      	movs	r3, #0
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	2101      	movs	r1, #1
 800096a:	4620      	mov	r0, r4
 800096c:	f006 f97e 	bl	8006c6c <xTimerGenericCommand>

      for (int i = 0; i < TASKS; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00d      	b.n	8000992 <main+0x102>
          xTaskCreate(tareaMultiplicacion, "TareaMult", 1000, (void *)i, configMAX_PRIORITIES - 1, NULL);
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	2200      	movs	r2, #0
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	2237      	movs	r2, #55	@ 0x37
 800097e:	9200      	str	r2, [sp, #0]
 8000980:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000984:	4925      	ldr	r1, [pc, #148]	@ (8000a1c <main+0x18c>)
 8000986:	4826      	ldr	r0, [pc, #152]	@ (8000a20 <main+0x190>)
 8000988:	f005 f880 	bl	8005a8c <xTaskCreate>
      for (int i = 0; i < TASKS; i++) {
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	2b03      	cmp	r3, #3
 8000996:	ddee      	ble.n	8000976 <main+0xe6>
      }

      xTaskCreate(tareaMonitoreo, "TareaMon", 1000, NULL, 1, NULL);
 8000998:	2300      	movs	r3, #0
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	2301      	movs	r3, #1
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2300      	movs	r3, #0
 80009a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a6:	491f      	ldr	r1, [pc, #124]	@ (8000a24 <main+0x194>)
 80009a8:	481f      	ldr	r0, [pc, #124]	@ (8000a28 <main+0x198>)
 80009aa:	f005 f86f 	bl	8005a8c <xTaskCreate>

      vTaskStartScheduler();
 80009ae:	f005 fa63 	bl	8005e78 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  	uint8_t uart3_data[20] = "hello from uart3";
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <main+0x19c>)
 80009b4:	463c      	mov	r4, r7
 80009b6:	461d      	mov	r5, r3
 80009b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	7023      	strb	r3, [r4, #0]
 80009c0:	f107 0311 	add.w	r3, r7, #17
 80009c4:	2200      	movs	r2, #0
 80009c6:	801a      	strh	r2, [r3, #0]
 80009c8:	709a      	strb	r2, [r3, #2]


  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello world");
 80009ca:	4819      	ldr	r0, [pc, #100]	@ (8000a30 <main+0x1a0>)
 80009cc:	f007 f950 	bl	8007c70 <iprintf>
      HAL_Delay(1000);
 80009d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d4:	f000 fdb2 	bl	800153c <HAL_Delay>
	   HAL_UART_Transmit(&huart3,uart3_data, sizeof(uart3_data), 50); // just to see what happens
 80009d8:	4639      	mov	r1, r7
 80009da:	2332      	movs	r3, #50	@ 0x32
 80009dc:	2214      	movs	r2, #20
 80009de:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <main+0x1a4>)
 80009e0:	f002 feae 	bl	8003740 <HAL_UART_Transmit>
	  printf("Hello world");
 80009e4:	bf00      	nop
 80009e6:	e7f0      	b.n	80009ca <main+0x13a>
 80009e8:	08008c28 	.word	0x08008c28
 80009ec:	08000e19 	.word	0x08000e19
 80009f0:	200008a0 	.word	0x200008a0
 80009f4:	20004564 	.word	0x20004564
 80009f8:	08008b54 	.word	0x08008b54
 80009fc:	20004568 	.word	0x20004568
 8000a00:	08008b70 	.word	0x08008b70
 8000a04:	2000456c 	.word	0x2000456c
 8000a08:	08008b90 	.word	0x08008b90
 8000a0c:	080007e5 	.word	0x080007e5
 8000a10:	08008bac 	.word	0x08008bac
 8000a14:	20004570 	.word	0x20004570
 8000a18:	08008bb4 	.word	0x08008bb4
 8000a1c:	08008bd8 	.word	0x08008bd8
 8000a20:	080006a5 	.word	0x080006a5
 8000a24:	08008be4 	.word	0x08008be4
 8000a28:	08000801 	.word	0x08000801
 8000a2c:	08008bfc 	.word	0x08008bfc
 8000a30:	08008bf0 	.word	0x08008bf0
 8000a34:	20000338 	.word	0x20000338

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	@ 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	@ 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 fa62 	bl	8007f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a5c:	f001 fcc6 	bl	80023ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <SystemClock_Config+0xdc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	4a2b      	ldr	r2, [pc, #172]	@ (8000b14 <SystemClock_Config+0xdc>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <SystemClock_Config+0xdc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <SystemClock_Config+0xe0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a80:	4a25      	ldr	r2, [pc, #148]	@ (8000b18 <SystemClock_Config+0xe0>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <SystemClock_Config+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a98:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aac:	2360      	movs	r3, #96	@ 0x60
 8000aae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fcf3 	bl	80024ac <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000acc:	f000 f9ac 	bl	8000e28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ad0:	f001 fc9c 	bl	800240c <HAL_PWREx_EnableOverDrive>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ada:	f000 f9a5 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2103      	movs	r1, #3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 ff84 	bl	8002a08 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b06:	f000 f98f 	bl	8000e28 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	@ 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_ETH_Init+0x84>)
 8000b22:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <MX_ETH_Init+0x88>)
 8000b24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <MX_ETH_Init+0x8c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <MX_ETH_Init+0x8c>)
 8000b2e:	2280      	movs	r2, #128	@ 0x80
 8000b30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <MX_ETH_Init+0x8c>)
 8000b34:	22e1      	movs	r2, #225	@ 0xe1
 8000b36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <MX_ETH_Init+0x8c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_ETH_Init+0x8c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_ETH_Init+0x8c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_ETH_Init+0x84>)
 8000b4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ba8 <MX_ETH_Init+0x8c>)
 8000b4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_ETH_Init+0x84>)
 8000b52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b56:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_ETH_Init+0x84>)
 8000b5a:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <MX_ETH_Init+0x90>)
 8000b5c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_ETH_Init+0x84>)
 8000b60:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <MX_ETH_Init+0x94>)
 8000b62:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_ETH_Init+0x84>)
 8000b66:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000b6a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <MX_ETH_Init+0x84>)
 8000b6e:	f000 fdef 	bl	8001750 <HAL_ETH_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 f956 	bl	8000e28 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b7c:	2238      	movs	r2, #56	@ 0x38
 8000b7e:	2100      	movs	r1, #0
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <MX_ETH_Init+0x98>)
 8000b82:	f007 f9c5 	bl	8007f10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_ETH_Init+0x98>)
 8000b88:	2221      	movs	r2, #33	@ 0x21
 8000b8a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_ETH_Init+0x98>)
 8000b8e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b92:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <MX_ETH_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000200 	.word	0x20000200
 8000ba4:	40028000 	.word	0x40028000
 8000ba8:	20004574 	.word	0x20004574
 8000bac:	2000010c 	.word	0x2000010c
 8000bb0:	2000006c 	.word	0x2000006c
 8000bb4:	200001c8 	.word	0x200001c8

08000bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bbe:	4a15      	ldr	r2, [pc, #84]	@ (8000c14 <MX_USART2_UART_Init+0x5c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bfc:	f002 fd52 	bl	80036a4 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c06:	f000 f90f 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200002b0 	.word	0x200002b0
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c1e:	4a15      	ldr	r2, [pc, #84]	@ (8000c74 <MX_USART3_UART_Init+0x5c>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_USART3_UART_Init+0x58>)
 8000c5c:	f002 fd22 	bl	80036a4 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c66:	f000 f8df 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000338 	.word	0x20000338
 8000c74:	40004800 	.word	0x40004800

08000c78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c86:	2206      	movs	r2, #6
 8000c88:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbc:	f001 fa5b 	bl	8002176 <HAL_PCD_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f000 f8af 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200003c0 	.word	0x200003c0

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	@ 0x30
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	4b47      	ldr	r3, [pc, #284]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a46      	ldr	r2, [pc, #280]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b44      	ldr	r3, [pc, #272]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	4b41      	ldr	r3, [pc, #260]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a40      	ldr	r2, [pc, #256]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a3a      	ldr	r2, [pc, #232]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b38      	ldr	r3, [pc, #224]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b35      	ldr	r3, [pc, #212]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a34      	ldr	r2, [pc, #208]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b32      	ldr	r3, [pc, #200]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d62:	4b29      	ldr	r3, [pc, #164]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a28      	ldr	r2, [pc, #160]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <MX_GPIO_Init+0x134>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d80:	4822      	ldr	r0, [pc, #136]	@ (8000e0c <MX_GPIO_Init+0x138>)
 8000d82:	f001 f9df 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	@ 0x40
 8000d8a:	4821      	ldr	r0, [pc, #132]	@ (8000e10 <MX_GPIO_Init+0x13c>)
 8000d8c:	f001 f9da 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	481b      	ldr	r0, [pc, #108]	@ (8000e14 <MX_GPIO_Init+0x140>)
 8000da8:	f001 f820 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dac:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_GPIO_Init+0x138>)
 8000dc6:	f001 f811 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <MX_GPIO_Init+0x13c>)
 8000de2:	f001 f803 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_GPIO_Init+0x13c>)
 8000dfa:	f000 fff7 	bl	8001dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfe:	bf00      	nop
 8000e00:	3730      	adds	r7, #48	@ 0x30
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40021800 	.word	0x40021800
 8000e14:	40020800 	.word	0x40020800

08000e18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f003 fd9d 	bl	8004960 <osDelay>
 8000e26:	e7fb      	b.n	8000e20 <StartDefaultTask+0x8>

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <Error_Handler+0x8>

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_MspInit+0x4c>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	f06f 0001 	mvn.w	r0, #1
 8000e72:	f000 fc44 	bl	80016fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	@ 0x38
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8000fdc <HAL_ETH_MspInit+0x158>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	f040 8096 	bne.w	8000fd4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eac:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ebc:	623b      	str	r3, [r7, #32]
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	4b47      	ldr	r3, [pc, #284]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	4a46      	ldr	r2, [pc, #280]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000ec6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ecc:	4b44      	ldr	r3, [pc, #272]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	4b41      	ldr	r3, [pc, #260]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a40      	ldr	r2, [pc, #256]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000ede:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efc:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b35      	ldr	r3, [pc, #212]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	4a34      	ldr	r2, [pc, #208]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f14:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	4a28      	ldr	r2, [pc, #160]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f44:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HAL_ETH_MspInit+0x15c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f50:	2332      	movs	r3, #50	@ 0x32
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f60:	230b      	movs	r3, #11
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481e      	ldr	r0, [pc, #120]	@ (8000fe4 <HAL_ETH_MspInit+0x160>)
 8000f6c:	f000 ff3e 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f70:	2386      	movs	r3, #134	@ 0x86
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f80:	230b      	movs	r3, #11
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4817      	ldr	r0, [pc, #92]	@ (8000fe8 <HAL_ETH_MspInit+0x164>)
 8000f8c:	f000 ff2e 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	480f      	ldr	r0, [pc, #60]	@ (8000fec <HAL_ETH_MspInit+0x168>)
 8000fae:	f000 ff1d 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fb2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc4:	230b      	movs	r3, #11
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <HAL_ETH_MspInit+0x16c>)
 8000fd0:	f000 ff0c 	bl	8001dec <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3738      	adds	r7, #56	@ 0x38
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40028000 	.word	0x40028000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40021800 	.word	0x40021800

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0b0      	sub	sp, #192	@ 0xc0
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2290      	movs	r2, #144	@ 0x90
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f006 ff7b 	bl	8007f10 <memset>
  if(huart->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a53      	ldr	r2, [pc, #332]	@ (800116c <HAL_UART_MspInit+0x178>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d15c      	bne.n	80010de <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001024:	2380      	movs	r3, #128	@ 0x80
 8001026:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4618      	mov	r0, r3
 8001032:	f001 ff0f 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f7ff fef4 	bl	8000e28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001040:	4b4b      	ldr	r3, [pc, #300]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a4a      	ldr	r2, [pc, #296]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40
 800104c:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a44      	ldr	r2, [pc, #272]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
 8001064:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	4a3e      	ldr	r2, [pc, #248]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6313      	str	r3, [r2, #48]	@ 0x30
 800107c:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001088:	2308      	movs	r3, #8
 800108a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a0:	2307      	movs	r3, #7
 80010a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010aa:	4619      	mov	r1, r3
 80010ac:	4831      	ldr	r0, [pc, #196]	@ (8001174 <HAL_UART_MspInit+0x180>)
 80010ae:	f000 fe9d 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010b2:	2320      	movs	r3, #32
 80010b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ca:	2307      	movs	r3, #7
 80010cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010d4:	4619      	mov	r1, r3
 80010d6:	4828      	ldr	r0, [pc, #160]	@ (8001178 <HAL_UART_MspInit+0x184>)
 80010d8:	f000 fe88 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010dc:	e041      	b.n	8001162 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a26      	ldr	r2, [pc, #152]	@ (800117c <HAL_UART_MspInit+0x188>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d13c      	bne.n	8001162 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 feac 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001102:	f7ff fe91 	bl	8000e28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a13      	ldr	r2, [pc, #76]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <HAL_UART_MspInit+0x17c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001136:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800113a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001150:	2307      	movs	r3, #7
 8001152:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001156:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800115a:	4619      	mov	r1, r3
 800115c:	4806      	ldr	r0, [pc, #24]	@ (8001178 <HAL_UART_MspInit+0x184>)
 800115e:	f000 fe45 	bl	8001dec <HAL_GPIO_Init>
}
 8001162:	bf00      	nop
 8001164:	37c0      	adds	r7, #192	@ 0xc0
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40004400 	.word	0x40004400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40004800 	.word	0x40004800

08001180 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0ae      	sub	sp, #184	@ 0xb8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2290      	movs	r2, #144	@ 0x90
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 feb5 	bl	8007f10 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ae:	d159      	bne.n	8001264 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fe47 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011cc:	f7ff fe2c 	bl	8000e28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <HAL_PCD_MspInit+0xec>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	4a25      	ldr	r2, [pc, #148]	@ (800126c <HAL_PCD_MspInit+0xec>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6313      	str	r3, [r2, #48]	@ 0x30
 80011dc:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_PCD_MspInit+0xec>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011e8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001202:	230a      	movs	r3, #10
 8001204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800120c:	4619      	mov	r1, r3
 800120e:	4818      	ldr	r0, [pc, #96]	@ (8001270 <HAL_PCD_MspInit+0xf0>)
 8001210:	f000 fdec 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001218:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800122c:	4619      	mov	r1, r3
 800122e:	4810      	ldr	r0, [pc, #64]	@ (8001270 <HAL_PCD_MspInit+0xf0>)
 8001230:	f000 fddc 	bl	8001dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <HAL_PCD_MspInit+0xec>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <HAL_PCD_MspInit+0xec>)
 800123a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_PCD_MspInit+0xec>)
 8001242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <HAL_PCD_MspInit+0xec>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001250:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_PCD_MspInit+0xec>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001256:	6453      	str	r3, [r2, #68]	@ 0x44
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <HAL_PCD_MspInit+0xec>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001264:	bf00      	nop
 8001266:	37b8      	adds	r7, #184	@ 0xb8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ae:	f000 f925 	bl	80014fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012b2:	f005 fa45 	bl	8006740 <xTaskGetSchedulerState>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d001      	beq.n	80012c0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012bc:	f006 f994 	bl	80075e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e00a      	b.n	80012ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d6:	f3af 8000 	nop.w
 80012da:	4601      	mov	r1, r0
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	60ba      	str	r2, [r7, #8]
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf0      	blt.n	80012d6 <_read+0x12>
  }

  return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e009      	b.n	8001324 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff faa7 	bl	800086c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf1      	blt.n	8001310 <_write+0x12>
  }
  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_close>:

int _close(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800135e:	605a      	str	r2, [r3, #4]
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_isatty>:

int _isatty(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f006 fdec 	bl	8007fac <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20080000 	.word	0x20080000
 8001400:	00000400 	.word	0x00000400
 8001404:	2000457c 	.word	0x2000457c
 8001408:	20009018 	.word	0x20009018

0800140c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001468 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001434:	f7ff ffea 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	@ (8001470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	@ (800147c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800145e:	f006 fdab 	bl	8007fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff fa15 	bl	8000890 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001474:	08008ca8 	.word	0x08008ca8
  ldr r2, =_sbss
 8001478:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 800147c:	20009018 	.word	0x20009018

08001480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC_IRQHandler>

08001482 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001486:	2003      	movs	r0, #3
 8001488:	f000 f92e 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148c:	200f      	movs	r0, #15
 800148e:	f000 f805 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001492:	f7ff fccf 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f93b 	bl	8001736 <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f911 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	@ (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	20004580 	.word	0x20004580

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20004580 	.word	0x20004580

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <__NVIC_SetPriorityGrouping+0x40>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	05fa0000 	.word	0x05fa0000

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	@ (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	@ (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff47 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5c 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb0 	bl	80016a4 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e086      	b.n	8001870 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001768:	2b00      	cmp	r3, #0
 800176a:	d106      	bne.n	800177a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2223      	movs	r2, #35	@ 0x23
 8001770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fb85 	bl	8000e84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <HAL_ETH_Init+0x128>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	4a3e      	ldr	r2, [pc, #248]	@ (8001878 <HAL_ETH_Init+0x128>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001784:	6453      	str	r3, [r2, #68]	@ 0x44
 8001786:	4b3c      	ldr	r3, [pc, #240]	@ (8001878 <HAL_ETH_Init+0x128>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001792:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <HAL_ETH_Init+0x12c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a39      	ldr	r2, [pc, #228]	@ (800187c <HAL_ETH_Init+0x12c>)
 8001798:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800179c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_ETH_Init+0x12c>)
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4935      	ldr	r1, [pc, #212]	@ (800187c <HAL_ETH_Init+0x12c>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017ac:	4b33      	ldr	r3, [pc, #204]	@ (800187c <HAL_ETH_Init+0x12c>)
 80017ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c8:	f7ff feac 	bl	8001524 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017ce:	e011      	b.n	80017f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017d0:	f7ff fea8 	bl	8001524 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017de:	d909      	bls.n	80017f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2204      	movs	r2, #4
 80017e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	22e0      	movs	r2, #224	@ 0xe0
 80017ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e03d      	b.n	8001870 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1e4      	bne.n	80017d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f97a 	bl	8001b00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fa25 	bl	8001c5c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fa7b 	bl	8001d0e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	461a      	mov	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f9e3 	bl	8001bec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001834:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_ETH_Init+0x130>)
 8001844:	430b      	orrs	r3, r1
 8001846:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800185a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2210      	movs	r2, #16
 800186a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	00020060 	.word	0x00020060

08001884 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4b53      	ldr	r3, [pc, #332]	@ (80019e8 <ETH_SetMACConfig+0x164>)
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7b9b      	ldrb	r3, [r3, #14]
 80018a2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	7c12      	ldrb	r2, [r2, #16]
 80018a8:	2a00      	cmp	r2, #0
 80018aa:	d102      	bne.n	80018b2 <ETH_SetMACConfig+0x2e>
 80018ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018b0:	e000      	b.n	80018b4 <ETH_SetMACConfig+0x30>
 80018b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80018b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	7c52      	ldrb	r2, [r2, #17]
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d102      	bne.n	80018c4 <ETH_SetMACConfig+0x40>
 80018be:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018c2:	e000      	b.n	80018c6 <ETH_SetMACConfig+0x42>
 80018c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7fdb      	ldrb	r3, [r3, #31]
 80018d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	7f92      	ldrb	r2, [r2, #30]
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d102      	bne.n	80018ea <ETH_SetMACConfig+0x66>
 80018e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e8:	e000      	b.n	80018ec <ETH_SetMACConfig+0x68>
 80018ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80018ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	791b      	ldrb	r3, [r3, #4]
 8001900:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	f892 2020 	ldrb.w	r2, [r2, #32]
 800190a:	2a00      	cmp	r2, #0
 800190c:	d102      	bne.n	8001914 <ETH_SetMACConfig+0x90>
 800190e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001912:	e000      	b.n	8001916 <ETH_SetMACConfig+0x92>
 8001914:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001916:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7bdb      	ldrb	r3, [r3, #15]
 800191c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800191e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001924:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800192c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800192e:	4313      	orrs	r3, r2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001946:	2001      	movs	r0, #1
 8001948:	f7ff fdf8 	bl	800153c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001962:	4013      	ands	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001972:	2a00      	cmp	r2, #0
 8001974:	d101      	bne.n	800197a <ETH_SetMACConfig+0xf6>
 8001976:	2280      	movs	r2, #128	@ 0x80
 8001978:	e000      	b.n	800197c <ETH_SetMACConfig+0xf8>
 800197a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800197c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001982:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800198a:	2a01      	cmp	r2, #1
 800198c:	d101      	bne.n	8001992 <ETH_SetMACConfig+0x10e>
 800198e:	2208      	movs	r2, #8
 8001990:	e000      	b.n	8001994 <ETH_SetMACConfig+0x110>
 8001992:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001994:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800199c:	2a01      	cmp	r2, #1
 800199e:	d101      	bne.n	80019a4 <ETH_SetMACConfig+0x120>
 80019a0:	2204      	movs	r2, #4
 80019a2:	e000      	b.n	80019a6 <ETH_SetMACConfig+0x122>
 80019a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80019ae:	2a01      	cmp	r2, #1
 80019b0:	d101      	bne.n	80019b6 <ETH_SetMACConfig+0x132>
 80019b2:	2202      	movs	r2, #2
 80019b4:	e000      	b.n	80019b8 <ETH_SetMACConfig+0x134>
 80019b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019b8:	4313      	orrs	r3, r2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fdb3 	bl	800153c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	fd20810f 	.word	0xfd20810f

080019ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <ETH_SetDMAConfig+0x110>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	7b1b      	ldrb	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <ETH_SetDMAConfig+0x2c>
 8001a12:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a16:	e000      	b.n	8001a1a <ETH_SetDMAConfig+0x2e>
 8001a18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	7b5b      	ldrb	r3, [r3, #13]
 8001a1e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a20:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	7f52      	ldrb	r2, [r2, #29]
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	d102      	bne.n	8001a30 <ETH_SetDMAConfig+0x44>
 8001a2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a2e:	e000      	b.n	8001a32 <ETH_SetDMAConfig+0x46>
 8001a30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	7b9b      	ldrb	r3, [r3, #14]
 8001a38:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a3a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	7f1b      	ldrb	r3, [r3, #28]
 8001a46:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	7f9b      	ldrb	r3, [r3, #30]
 8001a4e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a50:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a5e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a60:	4313      	orrs	r3, r2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a70:	461a      	mov	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff fd5a 	bl	800153c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001aa0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001aa6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001aac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ab4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ab6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001abe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ac4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ace:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ad2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fd2b 	bl	800153c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	f8de3f23 	.word	0xf8de3f23

08001b00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0a6      	sub	sp, #152	@ 0x98
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b42:	2300      	movs	r3, #0
 8001b44:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fe7f 	bl	8001884 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001bb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bc0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff05 	bl	80019ec <ETH_SetDMAConfig>
}
 8001be2:	bf00      	nop
 8001be4:	3798      	adds	r7, #152	@ 0x98
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3305      	adds	r3, #5
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	3204      	adds	r2, #4
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <ETH_MACAddressConfig+0x68>)
 8001c0e:	4413      	add	r3, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3303      	adds	r3, #3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	061a      	lsls	r2, r3, #24
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3302      	adds	r3, #2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	4313      	orrs	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <ETH_MACAddressConfig+0x6c>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40028040 	.word	0x40028040
 8001c58:	40028044 	.word	0x40028044

08001c5c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e03e      	b.n	8001ce8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68d9      	ldr	r1, [r3, #12]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	3206      	adds	r2, #6
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d80c      	bhi.n	8001ccc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68d9      	ldr	r1, [r3, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	e004      	b.n	8001cd6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d9bd      	bls.n	8001c6a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d00:	611a      	str	r2, [r3, #16]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e048      	b.n	8001dae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6919      	ldr	r1, [r3, #16]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001d58:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	3212      	adds	r2, #18
 8001d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d80c      	bhi.n	8001d9e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6919      	ldr	r1, [r3, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	e004      	b.n	8001da8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d9b3      	bls.n	8001d1c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dde:	60da      	str	r2, [r3, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e175      	b.n	80020f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8164 	bne.w	80020f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d005      	beq.n	8001e42 <HAL_GPIO_Init+0x56>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d130      	bne.n	8001ea4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0201 	and.w	r2, r3, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d017      	beq.n	8001ee0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80be 	beq.w	80020f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b66      	ldr	r3, [pc, #408]	@ (8002110 <HAL_GPIO_Init+0x324>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	4a65      	ldr	r2, [pc, #404]	@ (8002110 <HAL_GPIO_Init+0x324>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f82:	4b63      	ldr	r3, [pc, #396]	@ (8002110 <HAL_GPIO_Init+0x324>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f8e:	4a61      	ldr	r2, [pc, #388]	@ (8002114 <HAL_GPIO_Init+0x328>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a58      	ldr	r2, [pc, #352]	@ (8002118 <HAL_GPIO_Init+0x32c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d037      	beq.n	800202a <HAL_GPIO_Init+0x23e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a57      	ldr	r2, [pc, #348]	@ (800211c <HAL_GPIO_Init+0x330>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_GPIO_Init+0x23a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a56      	ldr	r2, [pc, #344]	@ (8002120 <HAL_GPIO_Init+0x334>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d02b      	beq.n	8002022 <HAL_GPIO_Init+0x236>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a55      	ldr	r2, [pc, #340]	@ (8002124 <HAL_GPIO_Init+0x338>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d025      	beq.n	800201e <HAL_GPIO_Init+0x232>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a54      	ldr	r2, [pc, #336]	@ (8002128 <HAL_GPIO_Init+0x33c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01f      	beq.n	800201a <HAL_GPIO_Init+0x22e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a53      	ldr	r2, [pc, #332]	@ (800212c <HAL_GPIO_Init+0x340>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_GPIO_Init+0x22a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	@ (8002130 <HAL_GPIO_Init+0x344>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0x226>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a51      	ldr	r2, [pc, #324]	@ (8002134 <HAL_GPIO_Init+0x348>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00d      	beq.n	800200e <HAL_GPIO_Init+0x222>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a50      	ldr	r2, [pc, #320]	@ (8002138 <HAL_GPIO_Init+0x34c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x21e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800213c <HAL_GPIO_Init+0x350>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_GPIO_Init+0x21a>
 8002002:	2309      	movs	r3, #9
 8002004:	e012      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002006:	230a      	movs	r3, #10
 8002008:	e010      	b.n	800202c <HAL_GPIO_Init+0x240>
 800200a:	2308      	movs	r3, #8
 800200c:	e00e      	b.n	800202c <HAL_GPIO_Init+0x240>
 800200e:	2307      	movs	r3, #7
 8002010:	e00c      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002012:	2306      	movs	r3, #6
 8002014:	e00a      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002016:	2305      	movs	r3, #5
 8002018:	e008      	b.n	800202c <HAL_GPIO_Init+0x240>
 800201a:	2304      	movs	r3, #4
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x240>
 800201e:	2303      	movs	r3, #3
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x240>
 800202a:	2300      	movs	r3, #0
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800203c:	4935      	ldr	r1, [pc, #212]	@ (8002114 <HAL_GPIO_Init+0x328>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_GPIO_Init+0x354>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a34      	ldr	r2, [pc, #208]	@ (8002140 <HAL_GPIO_Init+0x354>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b32      	ldr	r3, [pc, #200]	@ (8002140 <HAL_GPIO_Init+0x354>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a29      	ldr	r2, [pc, #164]	@ (8002140 <HAL_GPIO_Init+0x354>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ec:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	f67f ae86 	bls.w	8001e0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40021400 	.word	0x40021400
 8002130:	40021800 	.word	0x40021800
 8002134:	40021c00 	.word	0x40021c00
 8002138:	40022000 	.word	0x40022000
 800213c:	40022400 	.word	0x40022400
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af02      	add	r7, sp, #8
 800217c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e108      	b.n	800239a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe ffec 	bl	8001180 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2203      	movs	r2, #3
 80021ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021b6:	d102      	bne.n	80021be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 f820 	bl	8004208 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7c1a      	ldrb	r2, [r3, #16]
 80021d0:	f88d 2000 	strb.w	r2, [sp]
 80021d4:	3304      	adds	r3, #4
 80021d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d8:	f001 ffbc 	bl	8004154 <USB_CoreInit>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0d5      	b.n	800239a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 f818 	bl	800422a <USB_SetCurrentMode>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0c6      	b.n	800239a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e04a      	b.n	80022a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3315      	adds	r3, #21
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3314      	adds	r3, #20
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	b298      	uxth	r0, r3
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	332e      	adds	r3, #46	@ 0x2e
 800224e:	4602      	mov	r2, r0
 8002250:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3318      	adds	r3, #24
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	331c      	adds	r3, #28
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3320      	adds	r3, #32
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3324      	adds	r3, #36	@ 0x24
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	3301      	adds	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	791b      	ldrb	r3, [r3, #4]
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3af      	bcc.n	8002212 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e044      	b.n	8002342 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	791b      	ldrb	r3, [r3, #4]
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3b5      	bcc.n	80022b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7c1a      	ldrb	r2, [r3, #16]
 8002354:	f88d 2000 	strb.w	r2, [sp]
 8002358:	3304      	adds	r3, #4
 800235a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235c:	f001 ffb2 	bl	80042c4 <USB_DevInit>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e013      	b.n	800239a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7b1b      	ldrb	r3, [r3, #12]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f80b 	bl	80023a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f002 f96d 	bl	8004672 <USB_DevDisconnect>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	10000003 	.word	0x10000003

080023ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40007000 	.word	0x40007000

0800240c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a22      	ldr	r2, [pc, #136]	@ (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b20      	ldr	r3, [pc, #128]	@ (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1d      	ldr	r2, [pc, #116]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002438:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243a:	f7ff f873 	bl	8001524 <HAL_GetTick>
 800243e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002440:	e009      	b.n	8002456 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002442:	f7ff f86f 	bl	8001524 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002450:	d901      	bls.n	8002456 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e022      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002462:	d1ee      	bne.n	8002442 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800246a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800246e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002470:	f7ff f858 	bl	8001524 <HAL_GetTick>
 8002474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002476:	e009      	b.n	800248c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002478:	f7ff f854 	bl	8001524 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002486:	d901      	bls.n	800248c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e007      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002498:	d1ee      	bne.n	8002478 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40007000 	.word	0x40007000

080024ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e29b      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8087 	beq.w	80025de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d0:	4b96      	ldr	r3, [pc, #600]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024dc:	4b93      	ldr	r3, [pc, #588]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d112      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
 80024e8:	4b90      	ldr	r3, [pc, #576]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024f4:	d10b      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4b8d      	ldr	r3, [pc, #564]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d06c      	beq.n	80025dc <HAL_RCC_OscConfig+0x130>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d168      	bne.n	80025dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e275      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x7a>
 8002518:	4b84      	ldr	r3, [pc, #528]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a83      	ldr	r2, [pc, #524]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e02e      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x9c>
 800252e:	4b7f      	ldr	r3, [pc, #508]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7e      	ldr	r2, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b7c      	ldr	r3, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7b      	ldr	r2, [pc, #492]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0xc0>
 8002552:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a75      	ldr	r2, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b73      	ldr	r3, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a72      	ldr	r2, [pc, #456]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 800256c:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a6e      	ldr	r2, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6b      	ldr	r2, [pc, #428]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe ffca 	bl	8001524 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe ffc6 	bl	8001524 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e229      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b61      	ldr	r3, [pc, #388]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe ffb6 	bl	8001524 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe ffb2 	bl	8001524 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e215      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b57      	ldr	r3, [pc, #348]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x110>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d069      	beq.n	80026be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ea:	4b50      	ldr	r3, [pc, #320]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b4d      	ldr	r3, [pc, #308]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x190>
 8002602:	4b4a      	ldr	r3, [pc, #296]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x17a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1e9      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	493d      	ldr	r1, [pc, #244]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e040      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d023      	beq.n	800268c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b39      	ldr	r3, [pc, #228]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a38      	ldr	r2, [pc, #224]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe ff68 	bl	8001524 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7fe ff64 	bl	8001524 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1c7      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b30      	ldr	r3, [pc, #192]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4929      	ldr	r1, [pc, #164]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
 800268a:	e018      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe ff44 	bl	8001524 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7fe ff40 	bl	8001524 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1a3      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d038      	beq.n	800273c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b16      	ldr	r3, [pc, #88]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	4a15      	ldr	r2, [pc, #84]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7fe ff21 	bl	8001524 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e6:	f7fe ff1d 	bl	8001524 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e180      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x23a>
 8002704:	e01a      	b.n	800273c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270a:	4a08      	ldr	r2, [pc, #32]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe ff07 	bl	8001524 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271a:	f7fe ff03 	bl	8001524 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d903      	bls.n	8002730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e166      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
 800272c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	4b92      	ldr	r3, [pc, #584]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a4 	beq.w	8002892 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b8c      	ldr	r3, [pc, #560]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b89      	ldr	r3, [pc, #548]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4a88      	ldr	r2, [pc, #544]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	@ 0x40
 8002762:	4b86      	ldr	r3, [pc, #536]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	4b83      	ldr	r3, [pc, #524]	@ (8002980 <HAL_RCC_OscConfig+0x4d4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800277e:	4b80      	ldr	r3, [pc, #512]	@ (8002980 <HAL_RCC_OscConfig+0x4d4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7f      	ldr	r2, [pc, #508]	@ (8002980 <HAL_RCC_OscConfig+0x4d4>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278a:	f7fe fecb 	bl	8001524 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7fe fec7 	bl	8001524 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	@ 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e12a      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a4:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x4d4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x31a>
 80027b8:	4b70      	ldr	r3, [pc, #448]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	4a6f      	ldr	r2, [pc, #444]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c4:	e02d      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x33c>
 80027ce:	4b6b      	ldr	r3, [pc, #428]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027da:	4b68      	ldr	r3, [pc, #416]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a67      	ldr	r2, [pc, #412]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e6:	e01c      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d10c      	bne.n	800280a <HAL_RCC_OscConfig+0x35e>
 80027f0:	4b62      	ldr	r3, [pc, #392]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f4:	4a61      	ldr	r2, [pc, #388]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fc:	4b5f      	ldr	r3, [pc, #380]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	4a5e      	ldr	r2, [pc, #376]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	@ 0x70
 8002808:	e00b      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 800280a:	4b5c      	ldr	r3, [pc, #368]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a5b      	ldr	r2, [pc, #364]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
 8002816:	4b59      	ldr	r3, [pc, #356]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	4a58      	ldr	r2, [pc, #352]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d015      	beq.n	8002856 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fe7b 	bl	8001524 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fe77 	bl	8001524 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0d8      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	4b4c      	ldr	r3, [pc, #304]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ee      	beq.n	8002832 <HAL_RCC_OscConfig+0x386>
 8002854:	e014      	b.n	8002880 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7fe fe65 	bl	8001524 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fe61 	bl	8001524 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0c2      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	4b41      	ldr	r3, [pc, #260]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ee      	bne.n	800285e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a3c      	ldr	r2, [pc, #240]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80ae 	beq.w	80029f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	4b37      	ldr	r3, [pc, #220]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d06d      	beq.n	8002984 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d14b      	bne.n	8002948 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	4b32      	ldr	r3, [pc, #200]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a31      	ldr	r2, [pc, #196]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fe32 	bl	8001524 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe fe2e 	bl	8001524 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e091      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b29      	ldr	r3, [pc, #164]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	071b      	lsls	r3, r3, #28
 800290e:	491b      	ldr	r1, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a18      	ldr	r2, [pc, #96]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fe00 	bl	8001524 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fdfc 	bl	8001524 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e05f      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x47c>
 8002946:	e057      	b.n	80029f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0b      	ldr	r2, [pc, #44]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 800294e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fde6 	bl	8001524 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fde2 	bl	8001524 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e045      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b03      	ldr	r3, [pc, #12]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x4b0>
 800297a:	e03d      	b.n	80029f8 <HAL_RCC_OscConfig+0x54c>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_RCC_OscConfig+0x558>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d030      	beq.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d129      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d122      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029bc:	4293      	cmp	r3, r2
 80029be:	d119      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	3b01      	subs	r3, #1
 80029ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d10f      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d0      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b6a      	ldr	r3, [pc, #424]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d910      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b67      	ldr	r3, [pc, #412]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 020f 	bic.w	r2, r3, #15
 8002a36:	4965      	ldr	r1, [pc, #404]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a52      	ldr	r2, [pc, #328]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d040      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d115      	bne.n	8002aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b41      	ldr	r3, [pc, #260]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e073      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06b      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4936      	ldr	r1, [pc, #216]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fe fd12 	bl	8001524 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe fd0e 	bl	8001524 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e053      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b27      	ldr	r3, [pc, #156]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d210      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 020f 	bic.w	r2, r3, #15
 8002b42:	4922      	ldr	r1, [pc, #136]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f821 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1d4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fc6e 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	08008c4c 	.word	0x08008c4c
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be4:	b094      	sub	sp, #80	@ 0x50
 8002be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bec:	2300      	movs	r3, #0
 8002bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf8:	4b79      	ldr	r3, [pc, #484]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d00d      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x40>
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	f200 80e1 	bhi.w	8002dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c12:	e0db      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b73      	ldr	r3, [pc, #460]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c18:	e0db      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c1a:	4b73      	ldr	r3, [pc, #460]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c1e:	e0d8      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c20:	4b6f      	ldr	r3, [pc, #444]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c52:	4622      	mov	r2, r4
 8002c54:	462b      	mov	r3, r5
 8002c56:	f04f 0000 	mov.w	r0, #0
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	0159      	lsls	r1, r3, #5
 8002c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c64:	0150      	lsls	r0, r2, #5
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	1a51      	subs	r1, r2, r1
 8002c6e:	6139      	str	r1, [r7, #16]
 8002c70:	4629      	mov	r1, r5
 8002c72:	eb63 0301 	sbc.w	r3, r3, r1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c84:	4659      	mov	r1, fp
 8002c86:	018b      	lsls	r3, r1, #6
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8e:	4651      	mov	r1, sl
 8002c90:	018a      	lsls	r2, r1, #6
 8002c92:	4651      	mov	r1, sl
 8002c94:	ebb2 0801 	subs.w	r8, r2, r1
 8002c98:	4659      	mov	r1, fp
 8002c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	4699      	mov	r9, r3
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	eb18 0303 	adds.w	r3, r8, r3
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	eb49 0303 	adc.w	r3, r9, r3
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	024b      	lsls	r3, r1, #9
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cdc:	4621      	mov	r1, r4
 8002cde:	024a      	lsls	r2, r1, #9
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cf0:	f7fd faf6 	bl	80002e0 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cfc:	e058      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b38      	ldr	r3, [pc, #224]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	2200      	movs	r2, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	4611      	mov	r1, r2
 8002d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	f04f 0000 	mov.w	r0, #0
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	0159      	lsls	r1, r3, #5
 8002d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2a:	0150      	lsls	r0, r2, #5
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4641      	mov	r1, r8
 8002d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d36:	4649      	mov	r1, r9
 8002d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d50:	ebb2 040a 	subs.w	r4, r2, sl
 8002d54:	eb63 050b 	sbc.w	r5, r3, fp
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	00eb      	lsls	r3, r5, #3
 8002d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d66:	00e2      	lsls	r2, r4, #3
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	18e3      	adds	r3, r4, r3
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	464b      	mov	r3, r9
 8002d74:	eb45 0303 	adc.w	r3, r5, r3
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d86:	4629      	mov	r1, r5
 8002d88:	028b      	lsls	r3, r1, #10
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d90:	4621      	mov	r1, r4
 8002d92:	028a      	lsls	r2, r1, #10
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	61fa      	str	r2, [r7, #28]
 8002da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da4:	f7fd fa9c 	bl	80002e0 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3750      	adds	r7, #80	@ 0x50
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	007a1200 	.word	0x007a1200

08002dec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff0 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	@ (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08008c5c 	.word	0x08008c5c

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e30:	f7ff ffdc 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0b5b      	lsrs	r3, r3, #13
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	@ (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	08008c5c 	.word	0x08008c5c

08002e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e7c:	4b69      	ldr	r3, [pc, #420]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a68      	ldr	r2, [pc, #416]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e86:	6093      	str	r3, [r2, #8]
 8002e88:	4b66      	ldr	r3, [pc, #408]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	4964      	ldr	r1, [pc, #400]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d017      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eae:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebc:	4959      	ldr	r1, [pc, #356]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d017      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eea:	4b4e      	ldr	r3, [pc, #312]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	494a      	ldr	r1, [pc, #296]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 808b 	beq.w	800304e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f38:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	4a39      	ldr	r2, [pc, #228]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f44:	4b37      	ldr	r3, [pc, #220]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a34      	ldr	r2, [pc, #208]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fae2 	bl	8001524 <HAL_GetTick>
 8002f60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f64:	f7fe fade 	bl	8001524 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e38f      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f76:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f82:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d035      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d02e      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa0:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002faa:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	4a1d      	ldr	r2, [pc, #116]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	4a1a      	ldr	r2, [pc, #104]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fc2:	4a18      	ldr	r2, [pc, #96]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fc8:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d114      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe faa6 	bl	8001524 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe faa2 	bl	8001524 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e351      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800300a:	d111      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800301a:	400b      	ands	r3, r1
 800301c:	4901      	ldr	r1, [pc, #4]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
 8003022:	e00b      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
 800302c:	0ffffcff 	.word	0x0ffffcff
 8003030:	4bac      	ldr	r3, [pc, #688]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4aab      	ldr	r2, [pc, #684]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800303a:	6093      	str	r3, [r2, #8]
 800303c:	4ba9      	ldr	r3, [pc, #676]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	49a6      	ldr	r1, [pc, #664]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304a:	4313      	orrs	r3, r2
 800304c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	d010      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800305a:	4ba2      	ldr	r3, [pc, #648]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003060:	4aa0      	ldr	r2, [pc, #640]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003066:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800306a:	4b9e      	ldr	r3, [pc, #632]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	499b      	ldr	r1, [pc, #620]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003088:	4b96      	ldr	r3, [pc, #600]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003096:	4993      	ldr	r1, [pc, #588]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030aa:	4b8e      	ldr	r3, [pc, #568]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030b8:	498a      	ldr	r1, [pc, #552]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030cc:	4b85      	ldr	r3, [pc, #532]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030da:	4982      	ldr	r1, [pc, #520]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030ee:	4b7d      	ldr	r3, [pc, #500]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	4979      	ldr	r1, [pc, #484]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003110:	4b74      	ldr	r3, [pc, #464]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	4971      	ldr	r1, [pc, #452]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003132:	4b6c      	ldr	r3, [pc, #432]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	f023 020c 	bic.w	r2, r3, #12
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003140:	4968      	ldr	r1, [pc, #416]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003154:	4b63      	ldr	r3, [pc, #396]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003162:	4960      	ldr	r1, [pc, #384]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003176:	4b5b      	ldr	r3, [pc, #364]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003184:	4957      	ldr	r1, [pc, #348]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003198:	4b52      	ldr	r3, [pc, #328]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	494f      	ldr	r1, [pc, #316]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031ba:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	4946      	ldr	r1, [pc, #280]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031dc:	4b41      	ldr	r3, [pc, #260]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	493e      	ldr	r1, [pc, #248]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031fe:	4b39      	ldr	r3, [pc, #228]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	4935      	ldr	r1, [pc, #212]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003220:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003226:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800322e:	492d      	ldr	r1, [pc, #180]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d011      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003242:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003248:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003250:	4924      	ldr	r1, [pc, #144]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800325c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003272:	2301      	movs	r3, #1
 8003274:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003282:	4b18      	ldr	r3, [pc, #96]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003290:	4914      	ldr	r1, [pc, #80]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032a4:	4b0f      	ldr	r3, [pc, #60]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032b4:	490b      	ldr	r1, [pc, #44]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00f      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032c8:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032d8:	4902      	ldr	r1, [pc, #8]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003304:	4986      	ldr	r1, [pc, #536]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003318:	4b81      	ldr	r3, [pc, #516]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003328:	497d      	ldr	r1, [pc, #500]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d006      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80d6 	beq.w	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003344:	4b76      	ldr	r3, [pc, #472]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a75      	ldr	r2, [pc, #468]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800334e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003350:	f7fe f8e8 	bl	8001524 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003358:	f7fe f8e4 	bl	8001524 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	@ 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e195      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800336a:	4b6d      	ldr	r3, [pc, #436]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d021      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11d      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800338a:	4b65      	ldr	r3, [pc, #404]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003398:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800339e:	0e1b      	lsrs	r3, r3, #24
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	019a      	lsls	r2, r3, #6
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	071b      	lsls	r3, r3, #28
 80033be:	4958      	ldr	r1, [pc, #352]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f0:	d129      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003400:	4b47      	ldr	r3, [pc, #284]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003406:	0f1b      	lsrs	r3, r3, #28
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	019a      	lsls	r2, r3, #6
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	493e      	ldr	r1, [pc, #248]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800342e:	4b3c      	ldr	r3, [pc, #240]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003434:	f023 021f 	bic.w	r2, r3, #31
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	3b01      	subs	r3, #1
 800343e:	4938      	ldr	r1, [pc, #224]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01d      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003452:	4b33      	ldr	r3, [pc, #204]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003460:	4b2f      	ldr	r3, [pc, #188]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003466:	0f1b      	lsrs	r3, r3, #28
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	019a      	lsls	r2, r3, #6
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	4926      	ldr	r1, [pc, #152]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	019a      	lsls	r2, r3, #6
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	491a      	ldr	r1, [pc, #104]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034be:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ca:	f7fe f82b 	bl	8001524 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034d2:	f7fe f827 	bl	8001524 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	@ 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0d8      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	f040 80ce 	bne.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe f80e 	bl	8001524 <HAL_GetTick>
 8003508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800350a:	e00b      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800350c:	f7fe f80a 	bl	8001524 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	@ 0x64
 8003518:	d904      	bls.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0bb      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003524:	4b5e      	ldr	r3, [pc, #376]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800352c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003530:	d0ec      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02e      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d12a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800355a:	4b51      	ldr	r3, [pc, #324]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003568:	4b4d      	ldr	r3, [pc, #308]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	0f1b      	lsrs	r3, r3, #28
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	019a      	lsls	r2, r3, #6
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	071b      	lsls	r3, r3, #28
 800358e:	4944      	ldr	r1, [pc, #272]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003596:	4b42      	ldr	r3, [pc, #264]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800359c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	493d      	ldr	r1, [pc, #244]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035c4:	d11d      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c6:	4b36      	ldr	r3, [pc, #216]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035cc:	0e1b      	lsrs	r3, r3, #24
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035d4:	4b32      	ldr	r3, [pc, #200]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	0f1b      	lsrs	r3, r3, #28
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	019a      	lsls	r2, r3, #6
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	071b      	lsls	r3, r3, #28
 80035fa:	4929      	ldr	r1, [pc, #164]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d028      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800360e:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003614:	0e1b      	lsrs	r3, r3, #24
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800361c:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	019a      	lsls	r2, r3, #6
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	071b      	lsls	r3, r3, #28
 8003642:	4917      	ldr	r1, [pc, #92]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800364a:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4911      	ldr	r1, [pc, #68]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0e      	ldr	r2, [pc, #56]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fd ff5a 	bl	8001524 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003674:	f7fd ff56 	bl	8001524 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e007      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800368e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003692:	d1ef      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e040      	b.n	8003738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd fc94 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fb16 	bl	8003d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8af 	bl	8003854 <UART_SetConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e01b      	b.n	8003738 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800370e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800371e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fb95 	bl	8003e60 <UART_CheckIdleState>
 8003736:	4603      	mov	r3, r0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	@ 0x28
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003754:	2b20      	cmp	r3, #32
 8003756:	d177      	bne.n	8003848 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_UART_Transmit+0x24>
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e070      	b.n	800384a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2221      	movs	r2, #33	@ 0x21
 8003774:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003776:	f7fd fed5 	bl	8001524 <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003794:	d108      	bne.n	80037a8 <HAL_UART_Transmit+0x68>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	e003      	b.n	80037b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037b0:	e02f      	b.n	8003812 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2180      	movs	r1, #128	@ 0x80
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fbf7 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e03b      	b.n	800384a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	3302      	adds	r3, #2
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e007      	b.n	8003800 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1c9      	bne.n	80037b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	2140      	movs	r1, #64	@ 0x40
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fbc1 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e005      	b.n	800384a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e000      	b.n	800384a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4ba6      	ldr	r3, [pc, #664]	@ (8003b18 <UART_SetConfig+0x2c4>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	430b      	orrs	r3, r1
 800388a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a94      	ldr	r2, [pc, #592]	@ (8003b1c <UART_SetConfig+0x2c8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d120      	bne.n	8003912 <UART_SetConfig+0xbe>
 80038d0:	4b93      	ldr	r3, [pc, #588]	@ (8003b20 <UART_SetConfig+0x2cc>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d816      	bhi.n	800390c <UART_SetConfig+0xb8>
 80038de:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <UART_SetConfig+0x90>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003901 	.word	0x08003901
 80038ec:	080038fb 	.word	0x080038fb
 80038f0:	08003907 	.word	0x08003907
 80038f4:	2301      	movs	r3, #1
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e150      	b.n	8003b9c <UART_SetConfig+0x348>
 80038fa:	2302      	movs	r3, #2
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e14d      	b.n	8003b9c <UART_SetConfig+0x348>
 8003900:	2304      	movs	r3, #4
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e14a      	b.n	8003b9c <UART_SetConfig+0x348>
 8003906:	2308      	movs	r3, #8
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e147      	b.n	8003b9c <UART_SetConfig+0x348>
 800390c:	2310      	movs	r3, #16
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e144      	b.n	8003b9c <UART_SetConfig+0x348>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a83      	ldr	r2, [pc, #524]	@ (8003b24 <UART_SetConfig+0x2d0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d132      	bne.n	8003982 <UART_SetConfig+0x12e>
 800391c:	4b80      	ldr	r3, [pc, #512]	@ (8003b20 <UART_SetConfig+0x2cc>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d828      	bhi.n	800397c <UART_SetConfig+0x128>
 800392a:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <UART_SetConfig+0xdc>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003965 	.word	0x08003965
 8003934:	0800397d 	.word	0x0800397d
 8003938:	0800397d 	.word	0x0800397d
 800393c:	0800397d 	.word	0x0800397d
 8003940:	08003971 	.word	0x08003971
 8003944:	0800397d 	.word	0x0800397d
 8003948:	0800397d 	.word	0x0800397d
 800394c:	0800397d 	.word	0x0800397d
 8003950:	0800396b 	.word	0x0800396b
 8003954:	0800397d 	.word	0x0800397d
 8003958:	0800397d 	.word	0x0800397d
 800395c:	0800397d 	.word	0x0800397d
 8003960:	08003977 	.word	0x08003977
 8003964:	2300      	movs	r3, #0
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e118      	b.n	8003b9c <UART_SetConfig+0x348>
 800396a:	2302      	movs	r3, #2
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e115      	b.n	8003b9c <UART_SetConfig+0x348>
 8003970:	2304      	movs	r3, #4
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e112      	b.n	8003b9c <UART_SetConfig+0x348>
 8003976:	2308      	movs	r3, #8
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e10f      	b.n	8003b9c <UART_SetConfig+0x348>
 800397c:	2310      	movs	r3, #16
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e10c      	b.n	8003b9c <UART_SetConfig+0x348>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a68      	ldr	r2, [pc, #416]	@ (8003b28 <UART_SetConfig+0x2d4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d120      	bne.n	80039ce <UART_SetConfig+0x17a>
 800398c:	4b64      	ldr	r3, [pc, #400]	@ (8003b20 <UART_SetConfig+0x2cc>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003992:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003996:	2b30      	cmp	r3, #48	@ 0x30
 8003998:	d013      	beq.n	80039c2 <UART_SetConfig+0x16e>
 800399a:	2b30      	cmp	r3, #48	@ 0x30
 800399c:	d814      	bhi.n	80039c8 <UART_SetConfig+0x174>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d009      	beq.n	80039b6 <UART_SetConfig+0x162>
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d810      	bhi.n	80039c8 <UART_SetConfig+0x174>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <UART_SetConfig+0x15c>
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d006      	beq.n	80039bc <UART_SetConfig+0x168>
 80039ae:	e00b      	b.n	80039c8 <UART_SetConfig+0x174>
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e0f2      	b.n	8003b9c <UART_SetConfig+0x348>
 80039b6:	2302      	movs	r3, #2
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e0ef      	b.n	8003b9c <UART_SetConfig+0x348>
 80039bc:	2304      	movs	r3, #4
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e0ec      	b.n	8003b9c <UART_SetConfig+0x348>
 80039c2:	2308      	movs	r3, #8
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e0e9      	b.n	8003b9c <UART_SetConfig+0x348>
 80039c8:	2310      	movs	r3, #16
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e0e6      	b.n	8003b9c <UART_SetConfig+0x348>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a56      	ldr	r2, [pc, #344]	@ (8003b2c <UART_SetConfig+0x2d8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d120      	bne.n	8003a1a <UART_SetConfig+0x1c6>
 80039d8:	4b51      	ldr	r3, [pc, #324]	@ (8003b20 <UART_SetConfig+0x2cc>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80039e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039e4:	d013      	beq.n	8003a0e <UART_SetConfig+0x1ba>
 80039e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80039e8:	d814      	bhi.n	8003a14 <UART_SetConfig+0x1c0>
 80039ea:	2b80      	cmp	r3, #128	@ 0x80
 80039ec:	d009      	beq.n	8003a02 <UART_SetConfig+0x1ae>
 80039ee:	2b80      	cmp	r3, #128	@ 0x80
 80039f0:	d810      	bhi.n	8003a14 <UART_SetConfig+0x1c0>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <UART_SetConfig+0x1a8>
 80039f6:	2b40      	cmp	r3, #64	@ 0x40
 80039f8:	d006      	beq.n	8003a08 <UART_SetConfig+0x1b4>
 80039fa:	e00b      	b.n	8003a14 <UART_SetConfig+0x1c0>
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e0cc      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a02:	2302      	movs	r3, #2
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e0c9      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e0c6      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e0c3      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a14:	2310      	movs	r3, #16
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e0c0      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a44      	ldr	r2, [pc, #272]	@ (8003b30 <UART_SetConfig+0x2dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d125      	bne.n	8003a70 <UART_SetConfig+0x21c>
 8003a24:	4b3e      	ldr	r3, [pc, #248]	@ (8003b20 <UART_SetConfig+0x2cc>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a32:	d017      	beq.n	8003a64 <UART_SetConfig+0x210>
 8003a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a38:	d817      	bhi.n	8003a6a <UART_SetConfig+0x216>
 8003a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3e:	d00b      	beq.n	8003a58 <UART_SetConfig+0x204>
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a44:	d811      	bhi.n	8003a6a <UART_SetConfig+0x216>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <UART_SetConfig+0x1fe>
 8003a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4e:	d006      	beq.n	8003a5e <UART_SetConfig+0x20a>
 8003a50:	e00b      	b.n	8003a6a <UART_SetConfig+0x216>
 8003a52:	2300      	movs	r3, #0
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e0a1      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e09e      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a5e:	2304      	movs	r3, #4
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e09b      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a64:	2308      	movs	r3, #8
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e098      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e095      	b.n	8003b9c <UART_SetConfig+0x348>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2f      	ldr	r2, [pc, #188]	@ (8003b34 <UART_SetConfig+0x2e0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d125      	bne.n	8003ac6 <UART_SetConfig+0x272>
 8003a7a:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <UART_SetConfig+0x2cc>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a88:	d017      	beq.n	8003aba <UART_SetConfig+0x266>
 8003a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a8e:	d817      	bhi.n	8003ac0 <UART_SetConfig+0x26c>
 8003a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a94:	d00b      	beq.n	8003aae <UART_SetConfig+0x25a>
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a9a:	d811      	bhi.n	8003ac0 <UART_SetConfig+0x26c>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <UART_SetConfig+0x254>
 8003aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa4:	d006      	beq.n	8003ab4 <UART_SetConfig+0x260>
 8003aa6:	e00b      	b.n	8003ac0 <UART_SetConfig+0x26c>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e076      	b.n	8003b9c <UART_SetConfig+0x348>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e073      	b.n	8003b9c <UART_SetConfig+0x348>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e070      	b.n	8003b9c <UART_SetConfig+0x348>
 8003aba:	2308      	movs	r3, #8
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e06d      	b.n	8003b9c <UART_SetConfig+0x348>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e06a      	b.n	8003b9c <UART_SetConfig+0x348>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <UART_SetConfig+0x2e4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d138      	bne.n	8003b42 <UART_SetConfig+0x2ee>
 8003ad0:	4b13      	ldr	r3, [pc, #76]	@ (8003b20 <UART_SetConfig+0x2cc>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ada:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ade:	d017      	beq.n	8003b10 <UART_SetConfig+0x2bc>
 8003ae0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ae4:	d82a      	bhi.n	8003b3c <UART_SetConfig+0x2e8>
 8003ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aea:	d00b      	beq.n	8003b04 <UART_SetConfig+0x2b0>
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af0:	d824      	bhi.n	8003b3c <UART_SetConfig+0x2e8>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <UART_SetConfig+0x2aa>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afa:	d006      	beq.n	8003b0a <UART_SetConfig+0x2b6>
 8003afc:	e01e      	b.n	8003b3c <UART_SetConfig+0x2e8>
 8003afe:	2300      	movs	r3, #0
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e04b      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b04:	2302      	movs	r3, #2
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e048      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e045      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b10:	2308      	movs	r3, #8
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e042      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b16:	bf00      	nop
 8003b18:	efff69f3 	.word	0xefff69f3
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40004800 	.word	0x40004800
 8003b2c:	40004c00 	.word	0x40004c00
 8003b30:	40005000 	.word	0x40005000
 8003b34:	40011400 	.word	0x40011400
 8003b38:	40007800 	.word	0x40007800
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e02c      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a72      	ldr	r2, [pc, #456]	@ (8003d10 <UART_SetConfig+0x4bc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d125      	bne.n	8003b98 <UART_SetConfig+0x344>
 8003b4c:	4b71      	ldr	r3, [pc, #452]	@ (8003d14 <UART_SetConfig+0x4c0>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b5a:	d017      	beq.n	8003b8c <UART_SetConfig+0x338>
 8003b5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b60:	d817      	bhi.n	8003b92 <UART_SetConfig+0x33e>
 8003b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b66:	d00b      	beq.n	8003b80 <UART_SetConfig+0x32c>
 8003b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b6c:	d811      	bhi.n	8003b92 <UART_SetConfig+0x33e>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <UART_SetConfig+0x326>
 8003b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b76:	d006      	beq.n	8003b86 <UART_SetConfig+0x332>
 8003b78:	e00b      	b.n	8003b92 <UART_SetConfig+0x33e>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e00d      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b80:	2302      	movs	r3, #2
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e00a      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b86:	2304      	movs	r3, #4
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e007      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e004      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b92:	2310      	movs	r3, #16
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e001      	b.n	8003b9c <UART_SetConfig+0x348>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba4:	d15b      	bne.n	8003c5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d828      	bhi.n	8003bfe <UART_SetConfig+0x3aa>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <UART_SetConfig+0x360>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bff 	.word	0x08003bff
 8003bc4:	08003bef 	.word	0x08003bef
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003bff 	.word	0x08003bff
 8003bd4:	08003bf7 	.word	0x08003bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7ff f914 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	61b8      	str	r0, [r7, #24]
        break;
 8003bde:	e013      	b.n	8003c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7ff f924 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003be4:	61b8      	str	r0, [r7, #24]
        break;
 8003be6:	e00f      	b.n	8003c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be8:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <UART_SetConfig+0x4c4>)
 8003bea:	61bb      	str	r3, [r7, #24]
        break;
 8003bec:	e00c      	b.n	8003c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe fff7 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003bf2:	61b8      	str	r0, [r7, #24]
        break;
 8003bf4:	e008      	b.n	8003c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bfa:	61bb      	str	r3, [r7, #24]
        break;
 8003bfc:	e004      	b.n	8003c08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	77bb      	strb	r3, [r7, #30]
        break;
 8003c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d074      	beq.n	8003cf8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	005a      	lsls	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	d916      	bls.n	8003c58 <UART_SetConfig+0x404>
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c30:	d212      	bcs.n	8003c58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f023 030f 	bic.w	r3, r3, #15
 8003c3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	89fb      	ldrh	r3, [r7, #14]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	89fa      	ldrh	r2, [r7, #14]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	e04f      	b.n	8003cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	77bb      	strb	r3, [r7, #30]
 8003c5c:	e04c      	b.n	8003cf8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d828      	bhi.n	8003cb6 <UART_SetConfig+0x462>
 8003c64:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <UART_SetConfig+0x418>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08003cb7 	.word	0x08003cb7
 8003c7c:	08003ca7 	.word	0x08003ca7
 8003c80:	08003cb7 	.word	0x08003cb7
 8003c84:	08003cb7 	.word	0x08003cb7
 8003c88:	08003cb7 	.word	0x08003cb7
 8003c8c:	08003caf 	.word	0x08003caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7ff f8b8 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8003c94:	61b8      	str	r0, [r7, #24]
        break;
 8003c96:	e013      	b.n	8003cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7ff f8c8 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003c9c:	61b8      	str	r0, [r7, #24]
        break;
 8003c9e:	e00f      	b.n	8003cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <UART_SetConfig+0x4c4>)
 8003ca2:	61bb      	str	r3, [r7, #24]
        break;
 8003ca4:	e00c      	b.n	8003cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca6:	f7fe ff9b 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003caa:	61b8      	str	r0, [r7, #24]
        break;
 8003cac:	e008      	b.n	8003cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cb2:	61bb      	str	r3, [r7, #24]
        break;
 8003cb4:	e004      	b.n	8003cc0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8003cbe:	bf00      	nop
    }

    if (pclk != 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	085a      	lsrs	r2, r3, #1
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	441a      	add	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b0f      	cmp	r3, #15
 8003cde:	d909      	bls.n	8003cf4 <UART_SetConfig+0x4a0>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce6:	d205      	bcs.n	8003cf4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	e001      	b.n	8003cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d04:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40007c00 	.word	0x40007c00
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400

08003d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e1a:	d10a      	bne.n	8003e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b098      	sub	sp, #96	@ 0x60
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e70:	f7fd fb58 	bl	8001524 <HAL_GetTick>
 8003e74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d12e      	bne.n	8003ee2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f88c 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d021      	beq.n	8003ee2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ebe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e6      	bne.n	8003e9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e062      	b.n	8003fa8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d149      	bne.n	8003f84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f856 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d03c      	beq.n	8003f84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	623b      	str	r3, [r7, #32]
   return(result);
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e6      	bne.n	8003f0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f5c:	61fa      	str	r2, [r7, #28]
 8003f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	69b9      	ldr	r1, [r7, #24]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	617b      	str	r3, [r7, #20]
   return(result);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e011      	b.n	8003fa8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3758      	adds	r7, #88	@ 0x58
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc0:	e04f      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d04b      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fd faab 	bl	8001524 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e04e      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d037      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b80      	cmp	r3, #128	@ 0x80
 8003ff6:	d034      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b40      	cmp	r3, #64	@ 0x40
 8003ffc:	d031      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b08      	cmp	r3, #8
 800400a:	d110      	bne.n	800402e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2208      	movs	r2, #8
 8004012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f838 	bl	800408a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2208      	movs	r2, #8
 800401e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e029      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403c:	d111      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f81e 	bl	800408a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e00f      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0a0      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800408a:	b480      	push	{r7}
 800408c:	b095      	sub	sp, #84	@ 0x54
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e6      	bne.n	8004092 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d118      	bne.n	8004132 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	60bb      	str	r3, [r7, #8]
   return(result);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0310 	bic.w	r3, r3, #16
 8004114:	647b      	str	r3, [r7, #68]	@ 0x44
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6979      	ldr	r1, [r7, #20]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	613b      	str	r3, [r7, #16]
   return(result);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e6      	bne.n	8004100 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004146:	bf00      	nop
 8004148:	3754      	adds	r7, #84	@ 0x54
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004154:	b084      	sub	sp, #16
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	f107 001c 	add.w	r0, r7, #28
 8004162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004166:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800416a:	2b01      	cmp	r3, #1
 800416c:	d121      	bne.n	80041b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	4b21      	ldr	r3, [pc, #132]	@ (8004204 <USB_CoreInit+0xb0>)
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004192:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004196:	2b01      	cmp	r3, #1
 8004198:	d105      	bne.n	80041a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa92 	bl	80046d0 <USB_CoreReset>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e010      	b.n	80041d4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa86 	bl	80046d0 <USB_CoreReset>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80041d4:	7fbb      	ldrb	r3, [r7, #30]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10b      	bne.n	80041f2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f043 0206 	orr.w	r2, r3, #6
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041fe:	b004      	add	sp, #16
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	ffbdffbf 	.word	0xffbdffbf

08004208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 0201 	bic.w	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d115      	bne.n	8004278 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004258:	200a      	movs	r0, #10
 800425a:	f7fd f96f 	bl	800153c <HAL_Delay>
      ms += 10U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	330a      	adds	r3, #10
 8004262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa25 	bl	80046b4 <USB_GetMode>
 800426a:	4603      	mov	r3, r0
 800426c:	2b01      	cmp	r3, #1
 800426e:	d01e      	beq.n	80042ae <USB_SetCurrentMode+0x84>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2bc7      	cmp	r3, #199	@ 0xc7
 8004274:	d9f0      	bls.n	8004258 <USB_SetCurrentMode+0x2e>
 8004276:	e01a      	b.n	80042ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d115      	bne.n	80042aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800428a:	200a      	movs	r0, #10
 800428c:	f7fd f956 	bl	800153c <HAL_Delay>
      ms += 10U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	330a      	adds	r3, #10
 8004294:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa0c 	bl	80046b4 <USB_GetMode>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <USB_SetCurrentMode+0x84>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80042a6:	d9f0      	bls.n	800428a <USB_SetCurrentMode+0x60>
 80042a8:	e001      	b.n	80042ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e005      	b.n	80042ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80042b2:	d101      	bne.n	80042b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042c4:	b084      	sub	sp, #16
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80042d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	e009      	b.n	80042f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	3340      	adds	r3, #64	@ 0x40
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	2200      	movs	r2, #0
 80042f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3301      	adds	r3, #1
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b0e      	cmp	r3, #14
 80042fc:	d9f2      	bls.n	80042e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11c      	bne.n	8004340 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e005      	b.n	800434c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004344:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004358:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10d      	bne.n	800437c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004368:	2100      	movs	r1, #0
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f968 	bl	8004640 <USB_SetDevSpeed>
 8004370:	e008      	b.n	8004384 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004372:	2101      	movs	r1, #1
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f963 	bl	8004640 <USB_SetDevSpeed>
 800437a:	e003      	b.n	8004384 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800437c:	2103      	movs	r1, #3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f95e 	bl	8004640 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004384:	2110      	movs	r1, #16
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8fa 	bl	8004580 <USB_FlushTxFifo>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f924 	bl	80045e4 <USB_FlushRxFifo>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ac:	461a      	mov	r2, r3
 80043ae:	2300      	movs	r3, #0
 80043b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b8:	461a      	mov	r2, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c4:	461a      	mov	r2, r3
 80043c6:	2300      	movs	r3, #0
 80043c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e043      	b.n	8004458 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043e6:	d118      	bne.n	800441a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e013      	b.n	800442c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004410:	461a      	mov	r2, r3
 8004412:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e008      	b.n	800442c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004438:	461a      	mov	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444a:	461a      	mov	r2, r3
 800444c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800445c:	461a      	mov	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4293      	cmp	r3, r2
 8004462:	d3b5      	bcc.n	80043d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e043      	b.n	80044f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800447c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004480:	d118      	bne.n	80044b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e013      	b.n	80044c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e008      	b.n	80044c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c0:	461a      	mov	r2, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d2:	461a      	mov	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e4:	461a      	mov	r2, r3
 80044e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3301      	adds	r3, #1
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044f6:	461a      	mov	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d3b5      	bcc.n	800446a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800450c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004510:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800451e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f043 0210 	orr.w	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <USB_DevInit+0x2b4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004540:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f043 0208 	orr.w	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004554:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	4b06      	ldr	r3, [pc, #24]	@ (800457c <USB_DevInit+0x2b8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004568:	7dfb      	ldrb	r3, [r7, #23]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004574:	b004      	add	sp, #16
 8004576:	4770      	bx	lr
 8004578:	803c3800 	.word	0x803c3800
 800457c:	40000004 	.word	0x40000004

08004580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3301      	adds	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800459a:	d901      	bls.n	80045a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e01b      	b.n	80045d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	daf2      	bge.n	800458e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	019b      	lsls	r3, r3, #6
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045c4:	d901      	bls.n	80045ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e006      	b.n	80045d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d0f0      	beq.n	80045b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045fc:	d901      	bls.n	8004602 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e018      	b.n	8004634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	daf2      	bge.n	80045f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2210      	movs	r2, #16
 8004612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004620:	d901      	bls.n	8004626 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e006      	b.n	8004634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b10      	cmp	r3, #16
 8004630:	d0f0      	beq.n	8004614 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0301 	and.w	r3, r3, #1
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046e8:	d901      	bls.n	80046ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e01b      	b.n	8004726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	daf2      	bge.n	80046dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004712:	d901      	bls.n	8004718 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e006      	b.n	8004726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d0f0      	beq.n	8004706 <USB_CoreReset+0x36>

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004746:	f3ef 8305 	mrs	r3, IPSR
 800474a:	60bb      	str	r3, [r7, #8]
  return(result);
 800474c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004752:	f3ef 8310 	mrs	r3, PRIMASK
 8004756:	607b      	str	r3, [r7, #4]
  return(result);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800475e:	f3ef 8311 	mrs	r3, BASEPRI
 8004762:	603b      	str	r3, [r7, #0]
  return(result);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <osKernelInitialize+0x3a>
 800476a:	4b0e      	ldr	r3, [pc, #56]	@ (80047a4 <osKernelInitialize+0x64>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d103      	bne.n	800477a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004772:	f06f 0305 	mvn.w	r3, #5
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e00c      	b.n	8004794 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <osKernelInitialize+0x64>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d105      	bne.n	800478e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <osKernelInitialize+0x64>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e002      	b.n	8004794 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295
 8004792:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004794:	68fb      	ldr	r3, [r7, #12]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20004584 	.word	0x20004584

080047a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ae:	f3ef 8305 	mrs	r3, IPSR
 80047b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80047b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ba:	f3ef 8310 	mrs	r3, PRIMASK
 80047be:	607b      	str	r3, [r7, #4]
  return(result);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d105      	bne.n	80047d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047c6:	f3ef 8311 	mrs	r3, BASEPRI
 80047ca:	603b      	str	r3, [r7, #0]
  return(result);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <osKernelStart+0x3a>
 80047d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <osKernelStart+0x68>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d103      	bne.n	80047e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80047da:	f06f 0305 	mvn.w	r3, #5
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e010      	b.n	8004804 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <osKernelStart+0x68>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d109      	bne.n	80047fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80047ea:	f7ff ffa2 	bl	8004732 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80047ee:	4b08      	ldr	r3, [pc, #32]	@ (8004810 <osKernelStart+0x68>)
 80047f0:	2202      	movs	r2, #2
 80047f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80047f4:	f001 fb40 	bl	8005e78 <vTaskStartScheduler>
      stat = osOK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e002      	b.n	8004804 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20004584 	.word	0x20004584

08004814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b090      	sub	sp, #64	@ 0x40
 8004818:	af04      	add	r7, sp, #16
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004824:	f3ef 8305 	mrs	r3, IPSR
 8004828:	61fb      	str	r3, [r7, #28]
  return(result);
 800482a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 808f 	bne.w	8004950 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	61bb      	str	r3, [r7, #24]
  return(result);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800483e:	f3ef 8311 	mrs	r3, BASEPRI
 8004842:	617b      	str	r3, [r7, #20]
  return(result);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <osThreadNew+0x3e>
 800484a:	4b44      	ldr	r3, [pc, #272]	@ (800495c <osThreadNew+0x148>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d07e      	beq.n	8004950 <osThreadNew+0x13c>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d07b      	beq.n	8004950 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800485c:	2318      	movs	r3, #24
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004864:	f04f 33ff 	mov.w	r3, #4294967295
 8004868:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d045      	beq.n	80048fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <osThreadNew+0x6a>
        name = attr->name;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <osThreadNew+0x90>
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	2b38      	cmp	r3, #56	@ 0x38
 8004896:	d805      	bhi.n	80048a4 <osThreadNew+0x90>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <osThreadNew+0x94>
        return (NULL);
 80048a4:	2300      	movs	r3, #0
 80048a6:	e054      	b.n	8004952 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00e      	beq.n	80048de <osThreadNew+0xca>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b5b      	cmp	r3, #91	@ 0x5b
 80048c6:	d90a      	bls.n	80048de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <osThreadNew+0xca>
        mem = 1;
 80048d8:	2301      	movs	r3, #1
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	e010      	b.n	8004900 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <osThreadNew+0xec>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <osThreadNew+0xec>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <osThreadNew+0xec>
          mem = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	e001      	b.n	8004900 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d110      	bne.n	8004928 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800490e:	9202      	str	r2, [sp, #8]
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f001 f84f 	bl	80059c0 <xTaskCreateStatic>
 8004922:	4603      	mov	r3, r0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e013      	b.n	8004950 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d110      	bne.n	8004950 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	b29a      	uxth	r2, r3
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f001 f8a3 	bl	8005a8c <xTaskCreate>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d001      	beq.n	8004950 <osThreadNew+0x13c>
          hTask = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004950:	693b      	ldr	r3, [r7, #16]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3730      	adds	r7, #48	@ 0x30
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20004584 	.word	0x20004584

08004960 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004968:	f3ef 8305 	mrs	r3, IPSR
 800496c:	613b      	str	r3, [r7, #16]
  return(result);
 800496e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10f      	bne.n	8004994 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	60fb      	str	r3, [r7, #12]
  return(result);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004980:	f3ef 8311 	mrs	r3, BASEPRI
 8004984:	60bb      	str	r3, [r7, #8]
  return(result);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <osDelay+0x3c>
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <osDelay+0x58>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d103      	bne.n	800499c <osDelay+0x3c>
    stat = osErrorISR;
 8004994:	f06f 0305 	mvn.w	r3, #5
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e007      	b.n	80049ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f001 fa2e 	bl	8005e08 <vTaskDelay>
    }
  }

  return (stat);
 80049ac:	697b      	ldr	r3, [r7, #20]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20004584 	.word	0x20004584

080049bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80049cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a06      	ldr	r2, [pc, #24]	@ (80049ec <vApplicationGetIdleTaskMemory+0x30>)
 80049d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2280      	movs	r2, #128	@ 0x80
 80049d8:	601a      	str	r2, [r3, #0]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20004588 	.word	0x20004588
 80049ec:	200045e4 	.word	0x200045e4

080049f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a07      	ldr	r2, [pc, #28]	@ (8004a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a06      	ldr	r2, [pc, #24]	@ (8004a20 <vApplicationGetTimerTaskMemory+0x30>)
 8004a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	200047e4 	.word	0x200047e4
 8004a20:	20004840 	.word	0x20004840

08004a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0208 	add.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 0208 	add.w	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 0208 	add.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d103      	bne.n	8004ae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e00c      	b.n	8004b00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e002      	b.n	8004af4 <vListInsert+0x2e>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d2f6      	bcs.n	8004aee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	601a      	str	r2, [r3, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6892      	ldr	r2, [r2, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6852      	ldr	r2, [r2, #4]
 8004b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d103      	bne.n	8004b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	1e5a      	subs	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	b672      	cpsid	i
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	b662      	cpsie	i
 8004bb4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004bbc:	f002 fc7e 	bl	80074bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	441a      	add	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bec:	3b01      	subs	r3, #1
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	441a      	add	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	22ff      	movs	r2, #255	@ 0xff
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	22ff      	movs	r2, #255	@ 0xff
 8004c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d114      	bne.n	8004c3c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01a      	beq.n	8004c50 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 fbc6 	bl	80063b0 <xTaskRemoveFromEventList>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d012      	beq.n	8004c50 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <xQueueGenericReset+0xd4>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	e009      	b.n	8004c50 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3310      	adds	r3, #16
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff feef 	bl	8004a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3324      	adds	r3, #36	@ 0x24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff feea 	bl	8004a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c50:	f002 fc6a 	bl	8007528 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c54:	2301      	movs	r3, #1
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	@ 0x38
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10d      	bne.n	8004c94 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7c:	b672      	cpsid	i
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	b662      	cpsie	i
 8004c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	b672      	cpsid	i
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	b662      	cpsie	i
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <xQueueGenericCreateStatic+0x5e>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <xQueueGenericCreateStatic+0x62>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueGenericCreateStatic+0x64>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10d      	bne.n	8004ce8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd0:	b672      	cpsid	i
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	b662      	cpsie	i
 8004ce0:	623b      	str	r3, [r7, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <xQueueGenericCreateStatic+0x90>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <xQueueGenericCreateStatic+0x94>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <xQueueGenericCreateStatic+0x96>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d02:	b672      	cpsid	i
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	b662      	cpsie	i
 8004d12:	61fb      	str	r3, [r7, #28]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d1a:	2350      	movs	r3, #80	@ 0x50
 8004d1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b50      	cmp	r3, #80	@ 0x50
 8004d22:	d00d      	beq.n	8004d40 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d28:	b672      	cpsid	i
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	b662      	cpsie	i
 8004d38:	61bb      	str	r3, [r7, #24]
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00d      	beq.n	8004d68 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f848 	bl	8004df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3730      	adds	r7, #48	@ 0x30
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b08a      	sub	sp, #40	@ 0x28
 8004d76:	af02      	add	r7, sp, #8
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <xQueueGenericCreate+0x30>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8a:	b672      	cpsid	i
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	b662      	cpsie	i
 8004d9a:	613b      	str	r3, [r7, #16]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e004      	b.n	8004db8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	3350      	adds	r3, #80	@ 0x50
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f002 fcab 	bl	8007718 <pvPortMalloc>
 8004dc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	3350      	adds	r3, #80	@ 0x50
 8004dd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f805 	bl	8004df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dee:	69bb      	ldr	r3, [r7, #24]
	}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d103      	bne.n	8004e14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e002      	b.n	8004e1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e26:	2101      	movs	r1, #1
 8004e28:	69b8      	ldr	r0, [r7, #24]
 8004e2a:	f7ff feaf 	bl	8004b8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00e      	beq.n	8004e6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2200      	movs	r2, #0
 8004e62:	2100      	movs	r1, #0
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f855 	bl	8004f14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4603      	mov	r3, r0
 8004e7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6939      	ldr	r1, [r7, #16]
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	f7ff ff71 	bl	8004d72 <xQueueGenericCreate>
 8004e90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff ffd3 	bl	8004e3e <prvInitialiseMutex>

		return xNewQueue;
 8004e98:	68fb      	ldr	r3, [r7, #12]
	}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10d      	bne.n	8004ece <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	b672      	cpsid	i
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	b662      	cpsie	i
 8004ec6:	613b      	str	r3, [r7, #16]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d90d      	bls.n	8004ef2 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	b672      	cpsid	i
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	b662      	cpsie	i
 8004eea:	60fb      	str	r3, [r7, #12]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ff3b 	bl	8004d72 <xQueueGenericCreate>
 8004efc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f0a:	697b      	ldr	r3, [r7, #20]
	}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08e      	sub	sp, #56	@ 0x38
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f22:	2300      	movs	r3, #0
 8004f24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <xQueueGenericSend+0x38>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	b672      	cpsid	i
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	b662      	cpsie	i
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <xQueueGenericSend+0x46>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <xQueueGenericSend+0x4a>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueGenericSend+0x4c>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10d      	bne.n	8004f80 <xQueueGenericSend+0x6c>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f7a:	bf00      	nop
 8004f7c:	bf00      	nop
 8004f7e:	e7fd      	b.n	8004f7c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d103      	bne.n	8004f8e <xQueueGenericSend+0x7a>
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <xQueueGenericSend+0x7e>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <xQueueGenericSend+0x80>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10d      	bne.n	8004fb4 <xQueueGenericSend+0xa0>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9c:	b672      	cpsid	i
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	b662      	cpsie	i
 8004fac:	623b      	str	r3, [r7, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb4:	f001 fbc4 	bl	8006740 <xTaskGetSchedulerState>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <xQueueGenericSend+0xb0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <xQueueGenericSend+0xb4>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <xQueueGenericSend+0xb6>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <xQueueGenericSend+0xd6>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	b672      	cpsid	i
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	b662      	cpsie	i
 8004fe2:	61fb      	str	r3, [r7, #28]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fea:	f002 fa67 	bl	80074bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <xQueueGenericSend+0xec>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d129      	bne.n	8005054 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005006:	f000 fb6c 	bl	80056e2 <prvCopyDataToQueue>
 800500a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	3324      	adds	r3, #36	@ 0x24
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f9c9 	bl	80063b0 <xTaskRemoveFromEventList>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005024:	4b3f      	ldr	r3, [pc, #252]	@ (8005124 <xQueueGenericSend+0x210>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	e00a      	b.n	800504c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800503c:	4b39      	ldr	r3, [pc, #228]	@ (8005124 <xQueueGenericSend+0x210>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800504c:	f002 fa6c 	bl	8007528 <vPortExitCritical>
				return pdPASS;
 8005050:	2301      	movs	r3, #1
 8005052:	e063      	b.n	800511c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800505a:	f002 fa65 	bl	8007528 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800505e:	2300      	movs	r3, #0
 8005060:	e05c      	b.n	800511c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005068:	f107 0314 	add.w	r3, r7, #20
 800506c:	4618      	mov	r0, r3
 800506e:	f001 fa05 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005072:	2301      	movs	r3, #1
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005076:	f002 fa57 	bl	8007528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800507a:	f000 ff69 	bl	8005f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800507e:	f002 fa1d 	bl	80074bc <vPortEnterCritical>
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005088:	b25b      	sxtb	r3, r3
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d103      	bne.n	8005098 <xQueueGenericSend+0x184>
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800509e:	b25b      	sxtb	r3, r3
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d103      	bne.n	80050ae <xQueueGenericSend+0x19a>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ae:	f002 fa3b 	bl	8007528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050b2:	1d3a      	adds	r2, r7, #4
 80050b4:	f107 0314 	add.w	r3, r7, #20
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 f9f4 	bl	80064a8 <xTaskCheckForTimeOut>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d124      	bne.n	8005110 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050c8:	f000 fc03 	bl	80058d2 <prvIsQueueFull>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d018      	beq.n	8005104 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	3310      	adds	r3, #16
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4611      	mov	r1, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 f912 	bl	8006304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050e2:	f000 fb8e 	bl	8005802 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050e6:	f000 ff41 	bl	8005f6c <xTaskResumeAll>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f47f af7c 	bne.w	8004fea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80050f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <xQueueGenericSend+0x210>)
 80050f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	e772      	b.n	8004fea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005106:	f000 fb7c 	bl	8005802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800510a:	f000 ff2f 	bl	8005f6c <xTaskResumeAll>
 800510e:	e76c      	b.n	8004fea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005112:	f000 fb76 	bl	8005802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005116:	f000 ff29 	bl	8005f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800511a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800511c:	4618      	mov	r0, r3
 800511e:	3738      	adds	r7, #56	@ 0x38
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	@ 0x38
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10d      	bne.n	800515c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	b672      	cpsid	i
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	b662      	cpsie	i
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	e7fd      	b.n	8005158 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <xQueueGenericSendFromISR+0x42>
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <xQueueGenericSendFromISR+0x46>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <xQueueGenericSendFromISR+0x48>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10d      	bne.n	8005190 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	623b      	str	r3, [r7, #32]
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d103      	bne.n	800519e <xQueueGenericSendFromISR+0x76>
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <xQueueGenericSendFromISR+0x7a>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericSendFromISR+0x7c>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10d      	bne.n	80051c4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	b672      	cpsid	i
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	b662      	cpsie	i
 80051bc:	61fb      	str	r3, [r7, #28]
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c4:	f002 fa62 	bl	800768c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051c8:	f3ef 8211 	mrs	r2, BASEPRI
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	b672      	cpsid	i
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	b662      	cpsie	i
 80051e0:	61ba      	str	r2, [r7, #24]
 80051e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <xQueueGenericSendFromISR+0xd2>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d12c      	bne.n	8005254 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800520a:	f000 fa6a 	bl	80056e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800520e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d112      	bne.n	800523e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d016      	beq.n	800524e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	3324      	adds	r3, #36	@ 0x24
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f8c3 	bl	80063b0 <xTaskRemoveFromEventList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00e      	beq.n	800524e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e007      	b.n	800524e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800523e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005242:	3301      	adds	r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	b25a      	sxtb	r2, r3
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800524e:	2301      	movs	r3, #1
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005252:	e001      	b.n	8005258 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005254:	2300      	movs	r3, #0
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
 8005258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005262:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005266:	4618      	mov	r0, r3
 8005268:	3738      	adds	r7, #56	@ 0x38
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08c      	sub	sp, #48	@ 0x30
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <xQueueReceive+0x36>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	b672      	cpsid	i
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	b662      	cpsie	i
 800529e:	623b      	str	r3, [r7, #32]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d103      	bne.n	80052b4 <xQueueReceive+0x44>
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <xQueueReceive+0x48>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <xQueueReceive+0x4a>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <xQueueReceive+0x6a>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	b672      	cpsid	i
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	b662      	cpsie	i
 80052d2:	61fb      	str	r3, [r7, #28]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052da:	f001 fa31 	bl	8006740 <xTaskGetSchedulerState>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <xQueueReceive+0x7a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <xQueueReceive+0x7e>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <xQueueReceive+0x80>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10d      	bne.n	8005310 <xQueueReceive+0xa0>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f8:	b672      	cpsid	i
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	b662      	cpsie	i
 8005308:	61bb      	str	r3, [r7, #24]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005310:	f002 f8d4 	bl	80074bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01f      	beq.n	8005360 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005324:	f000 fa47 	bl	80057b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	1e5a      	subs	r2, r3, #1
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00f      	beq.n	8005358 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	3310      	adds	r3, #16
 800533c:	4618      	mov	r0, r3
 800533e:	f001 f837 	bl	80063b0 <xTaskRemoveFromEventList>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005348:	4b3c      	ldr	r3, [pc, #240]	@ (800543c <xQueueReceive+0x1cc>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005358:	f002 f8e6 	bl	8007528 <vPortExitCritical>
				return pdPASS;
 800535c:	2301      	movs	r3, #1
 800535e:	e069      	b.n	8005434 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005366:	f002 f8df 	bl	8007528 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800536a:	2300      	movs	r3, #0
 800536c:	e062      	b.n	8005434 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f87f 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005382:	f002 f8d1 	bl	8007528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005386:	f000 fde3 	bl	8005f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800538a:	f002 f897 	bl	80074bc <vPortEnterCritical>
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005394:	b25b      	sxtb	r3, r3
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <xQueueReceive+0x134>
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d103      	bne.n	80053ba <xQueueReceive+0x14a>
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ba:	f002 f8b5 	bl	8007528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053be:	1d3a      	adds	r2, r7, #4
 80053c0:	f107 0310 	add.w	r3, r7, #16
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 f86e 	bl	80064a8 <xTaskCheckForTimeOut>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d123      	bne.n	800541a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053d4:	f000 fa67 	bl	80058a6 <prvIsQueueEmpty>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d017      	beq.n	800540e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	3324      	adds	r3, #36	@ 0x24
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ff8c 	bl	8006304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ee:	f000 fa08 	bl	8005802 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053f2:	f000 fdbb 	bl	8005f6c <xTaskResumeAll>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d189      	bne.n	8005310 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80053fc:	4b0f      	ldr	r3, [pc, #60]	@ (800543c <xQueueReceive+0x1cc>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	e780      	b.n	8005310 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800540e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005410:	f000 f9f7 	bl	8005802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005414:	f000 fdaa 	bl	8005f6c <xTaskResumeAll>
 8005418:	e77a      	b.n	8005310 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800541a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800541c:	f000 f9f1 	bl	8005802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005420:	f000 fda4 	bl	8005f6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005426:	f000 fa3e 	bl	80058a6 <prvIsQueueEmpty>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	f43f af6f 	beq.w	8005310 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005432:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005434:	4618      	mov	r0, r3
 8005436:	3730      	adds	r7, #48	@ 0x30
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08e      	sub	sp, #56	@ 0x38
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005452:	2300      	movs	r3, #0
 8005454:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	b672      	cpsid	i
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	b662      	cpsie	i
 8005470:	623b      	str	r3, [r7, #32]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	b672      	cpsid	i
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	b662      	cpsie	i
 8005494:	61fb      	str	r3, [r7, #28]
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800549c:	f001 f950 	bl	8006740 <xTaskGetSchedulerState>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <xQueueSemaphoreTake+0x6c>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <xQueueSemaphoreTake+0x70>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <xQueueSemaphoreTake+0x72>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10d      	bne.n	80054d2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	b672      	cpsid	i
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	b662      	cpsie	i
 80054ca:	61bb      	str	r3, [r7, #24]
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	e7fd      	b.n	80054ce <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054d2:	f001 fff3 	bl	80074bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d024      	beq.n	800552c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80054f2:	f001 faa7 	bl	8006a44 <pvTaskIncrementMutexHeldCount>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00f      	beq.n	8005524 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005506:	3310      	adds	r3, #16
 8005508:	4618      	mov	r0, r3
 800550a:	f000 ff51 	bl	80063b0 <xTaskRemoveFromEventList>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005514:	4b55      	ldr	r3, [pc, #340]	@ (800566c <xQueueSemaphoreTake+0x22c>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005524:	f002 f800 	bl	8007528 <vPortExitCritical>
				return pdPASS;
 8005528:	2301      	movs	r3, #1
 800552a:	e09a      	b.n	8005662 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d114      	bne.n	800555c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	b672      	cpsid	i
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	b662      	cpsie	i
 800554c:	617b      	str	r3, [r7, #20]
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005554:	f001 ffe8 	bl	8007528 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005558:	2300      	movs	r3, #0
 800555a:	e082      	b.n	8005662 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005562:	f107 030c 	add.w	r3, r7, #12
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ff88 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005570:	f001 ffda 	bl	8007528 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005574:	f000 fcec 	bl	8005f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005578:	f001 ffa0 	bl	80074bc <vPortEnterCritical>
 800557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005582:	b25b      	sxtb	r3, r3
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d103      	bne.n	8005592 <xQueueSemaphoreTake+0x152>
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005598:	b25b      	sxtb	r3, r3
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d103      	bne.n	80055a8 <xQueueSemaphoreTake+0x168>
 80055a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055a8:	f001 ffbe 	bl	8007528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ac:	463a      	mov	r2, r7
 80055ae:	f107 030c 	add.w	r3, r7, #12
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 ff77 	bl	80064a8 <xTaskCheckForTimeOut>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d132      	bne.n	8005626 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055c2:	f000 f970 	bl	80058a6 <prvIsQueueEmpty>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d026      	beq.n	800561a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d109      	bne.n	80055e8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80055d4:	f001 ff72 	bl	80074bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 f8cd 	bl	800677c <xTaskPriorityInherit>
 80055e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80055e4:	f001 ffa0 	bl	8007528 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ea:	3324      	adds	r3, #36	@ 0x24
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	4611      	mov	r1, r2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fe87 	bl	8006304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055f8:	f000 f903 	bl	8005802 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055fc:	f000 fcb6 	bl	8005f6c <xTaskResumeAll>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f47f af65 	bne.w	80054d2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005608:	4b18      	ldr	r3, [pc, #96]	@ (800566c <xQueueSemaphoreTake+0x22c>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	e75b      	b.n	80054d2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800561a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800561c:	f000 f8f1 	bl	8005802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005620:	f000 fca4 	bl	8005f6c <xTaskResumeAll>
 8005624:	e755      	b.n	80054d2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005626:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005628:	f000 f8eb 	bl	8005802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800562c:	f000 fc9e 	bl	8005f6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005630:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005632:	f000 f938 	bl	80058a6 <prvIsQueueEmpty>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	f43f af4a 	beq.w	80054d2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005644:	f001 ff3a 	bl	80074bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005648:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800564a:	f000 f832 	bl	80056b2 <prvGetDisinheritPriorityAfterTimeout>
 800564e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f96c 	bl	8006934 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800565c:	f001 ff64 	bl	8007528 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005662:	4618      	mov	r0, r3
 8005664:	3738      	adds	r7, #56	@ 0x38
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005682:	b672      	cpsid	i
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	b662      	cpsie	i
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800569a:	f001 ff0f 	bl	80074bc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80056a4:	f001 ff40 	bl	8007528 <vPortExitCritical>

	return uxReturn;
 80056a8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d006      	beq.n	80056d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e001      	b.n	80056d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80056d4:	68fb      	ldr	r3, [r7, #12]
	}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10d      	bne.n	800571c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d14d      	bne.n	80057a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f001 f89d 	bl	800684c <xTaskPriorityDisinherit>
 8005712:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
 800571a:	e043      	b.n	80057a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d119      	bne.n	8005756 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6858      	ldr	r0, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	461a      	mov	r2, r3
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	f002 fc6a 	bl	8008006 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	429a      	cmp	r2, r3
 800574a:	d32b      	bcc.n	80057a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	e026      	b.n	80057a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68d8      	ldr	r0, [r3, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	461a      	mov	r2, r3
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	f002 fc50 	bl	8008006 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	425b      	negs	r3, r3
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d207      	bcs.n	8005792 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	425b      	negs	r3, r3
 800578c:	441a      	add	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d105      	bne.n	80057a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80057ac:	697b      	ldr	r3, [r7, #20]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d018      	beq.n	80057fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	441a      	add	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d303      	bcc.n	80057ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68d9      	ldr	r1, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	461a      	mov	r2, r3
 80057f4:	6838      	ldr	r0, [r7, #0]
 80057f6:	f002 fc06 	bl	8008006 <memcpy>
	}
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800580a:	f001 fe57 	bl	80074bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005814:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005816:	e011      	b.n	800583c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d012      	beq.n	8005846 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3324      	adds	r3, #36	@ 0x24
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fdc3 	bl	80063b0 <xTaskRemoveFromEventList>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005830:	f000 fea2 	bl	8006578 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	3b01      	subs	r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800583c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dce9      	bgt.n	8005818 <prvUnlockQueue+0x16>
 8005844:	e000      	b.n	8005848 <prvUnlockQueue+0x46>
					break;
 8005846:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	22ff      	movs	r2, #255	@ 0xff
 800584c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005850:	f001 fe6a 	bl	8007528 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005854:	f001 fe32 	bl	80074bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800585e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005860:	e011      	b.n	8005886 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d012      	beq.n	8005890 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3310      	adds	r3, #16
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fd9e 	bl	80063b0 <xTaskRemoveFromEventList>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800587a:	f000 fe7d 	bl	8006578 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	3b01      	subs	r3, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800588a:	2b00      	cmp	r3, #0
 800588c:	dce9      	bgt.n	8005862 <prvUnlockQueue+0x60>
 800588e:	e000      	b.n	8005892 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005890:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	22ff      	movs	r2, #255	@ 0xff
 8005896:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800589a:	f001 fe45 	bl	8007528 <vPortExitCritical>
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058ae:	f001 fe05 	bl	80074bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e001      	b.n	80058c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058c4:	f001 fe30 	bl	8007528 <vPortExitCritical>

	return xReturn;
 80058c8:	68fb      	ldr	r3, [r7, #12]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058da:	f001 fdef 	bl	80074bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d102      	bne.n	80058f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e001      	b.n	80058f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058f4:	f001 fe18 	bl	8007528 <vPortExitCritical>

	return xReturn;
 80058f8:	68fb      	ldr	r3, [r7, #12]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	e014      	b.n	800593e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005914:	4a0f      	ldr	r2, [pc, #60]	@ (8005954 <vQueueAddToRegistry+0x50>)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005920:	490c      	ldr	r1, [pc, #48]	@ (8005954 <vQueueAddToRegistry+0x50>)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800592a:	4a0a      	ldr	r2, [pc, #40]	@ (8005954 <vQueueAddToRegistry+0x50>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005936:	e006      	b.n	8005946 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b07      	cmp	r3, #7
 8005942:	d9e7      	bls.n	8005914 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20004c40 	.word	0x20004c40

08005958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005968:	f001 fda8 	bl	80074bc <vPortEnterCritical>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005972:	b25b      	sxtb	r3, r3
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d103      	bne.n	8005982 <vQueueWaitForMessageRestricted+0x2a>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005988:	b25b      	sxtb	r3, r3
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d103      	bne.n	8005998 <vQueueWaitForMessageRestricted+0x40>
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005998:	f001 fdc6 	bl	8007528 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	3324      	adds	r3, #36	@ 0x24
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fcd1 	bl	8006354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	f7ff ff25 	bl	8005802 <prvUnlockQueue>
	}
 80059b8:	bf00      	nop
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	@ 0x38
 80059c4:	af04      	add	r7, sp, #16
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10d      	bne.n	80059f0 <xTaskCreateStatic+0x30>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
 80059e8:	623b      	str	r3, [r7, #32]
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <xTaskCreateStatic+0x52>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	b672      	cpsid	i
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	b662      	cpsie	i
 8005a0a:	61fb      	str	r3, [r7, #28]
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a12:	235c      	movs	r3, #92	@ 0x5c
 8005a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b5c      	cmp	r3, #92	@ 0x5c
 8005a1a:	d00d      	beq.n	8005a38 <xTaskCreateStatic+0x78>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a20:	b672      	cpsid	i
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	b662      	cpsie	i
 8005a30:	61bb      	str	r3, [r7, #24]
}
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	e7fd      	b.n	8005a34 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01e      	beq.n	8005a7e <xTaskCreateStatic+0xbe>
 8005a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01b      	beq.n	8005a7e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9303      	str	r3, [sp, #12]
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	f107 0314 	add.w	r3, r7, #20
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f850 	bl	8005b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a78:	f000 f8e0 	bl	8005c3c <prvAddNewTaskToReadyList>
 8005a7c:	e001      	b.n	8005a82 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a82:	697b      	ldr	r3, [r7, #20]
	}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3728      	adds	r7, #40	@ 0x28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	@ 0x30
 8005a90:	af04      	add	r7, sp, #16
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 fe39 	bl	8007718 <pvPortMalloc>
 8005aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005aae:	205c      	movs	r0, #92	@ 0x5c
 8005ab0:	f001 fe32 	bl	8007718 <pvPortMalloc>
 8005ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ac2:	e005      	b.n	8005ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ac4:	6978      	ldr	r0, [r7, #20]
 8005ac6:	f001 fef5 	bl	80078b4 <vPortFree>
 8005aca:	e001      	b.n	8005ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d017      	beq.n	8005b06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	9302      	str	r3, [sp, #8]
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f80e 	bl	8005b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005afa:	69f8      	ldr	r0, [r7, #28]
 8005afc:	f000 f89e 	bl	8005c3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b00:	2301      	movs	r3, #1
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	e002      	b.n	8005b0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b088      	sub	sp, #32
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	21a5      	movs	r1, #165	@ 0xa5
 8005b30:	f002 f9ee 	bl	8007f10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005b3e:	440b      	add	r3, r1
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f023 0307 	bic.w	r3, r3, #7
 8005b4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00d      	beq.n	8005b74 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5c:	b672      	cpsid	i
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	b662      	cpsie	i
 8005b6c:	617b      	str	r3, [r7, #20]
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01f      	beq.n	8005bba <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e012      	b.n	8005ba6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	7819      	ldrb	r1, [r3, #0]
 8005b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3334      	adds	r3, #52	@ 0x34
 8005b90:	460a      	mov	r2, r1
 8005b92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b0f      	cmp	r3, #15
 8005baa:	d9e9      	bls.n	8005b80 <prvInitialiseNewTask+0x6a>
 8005bac:	e000      	b.n	8005bb0 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005bae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb8:	e003      	b.n	8005bc2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	2b37      	cmp	r3, #55	@ 0x37
 8005bc6:	d901      	bls.n	8005bcc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bc8:	2337      	movs	r3, #55	@ 0x37
 8005bca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bd6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	2200      	movs	r2, #0
 8005bdc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	3304      	adds	r3, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe ff3e 	bl	8004a64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	3318      	adds	r3, #24
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe ff39 	bl	8004a64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	69b8      	ldr	r0, [r7, #24]
 8005c1c:	f001 fb42 	bl	80072a4 <pxPortInitialiseStack>
 8005c20:	4602      	mov	r2, r0
 8005c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c32:	bf00      	nop
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c44:	f001 fc3a 	bl	80074bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c48:	4b2d      	ldr	r3, [pc, #180]	@ (8005d00 <prvAddNewTaskToReadyList+0xc4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d00 <prvAddNewTaskToReadyList+0xc4>)
 8005c50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c52:	4b2c      	ldr	r3, [pc, #176]	@ (8005d04 <prvAddNewTaskToReadyList+0xc8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d04 <prvAddNewTaskToReadyList+0xc8>)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c60:	4b27      	ldr	r3, [pc, #156]	@ (8005d00 <prvAddNewTaskToReadyList+0xc4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d110      	bne.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c68:	f000 fcaa 	bl	80065c0 <prvInitialiseTaskLists>
 8005c6c:	e00d      	b.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c6e:	4b26      	ldr	r3, [pc, #152]	@ (8005d08 <prvAddNewTaskToReadyList+0xcc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c76:	4b23      	ldr	r3, [pc, #140]	@ (8005d04 <prvAddNewTaskToReadyList+0xc8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d802      	bhi.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c84:	4a1f      	ldr	r2, [pc, #124]	@ (8005d04 <prvAddNewTaskToReadyList+0xc8>)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c8a:	4b20      	ldr	r3, [pc, #128]	@ (8005d0c <prvAddNewTaskToReadyList+0xd0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	4a1e      	ldr	r2, [pc, #120]	@ (8005d0c <prvAddNewTaskToReadyList+0xd0>)
 8005c92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c94:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <prvAddNewTaskToReadyList+0xd0>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d10 <prvAddNewTaskToReadyList+0xd4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d903      	bls.n	8005cb0 <prvAddNewTaskToReadyList+0x74>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <prvAddNewTaskToReadyList+0xd4>)
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4a15      	ldr	r2, [pc, #84]	@ (8005d14 <prvAddNewTaskToReadyList+0xd8>)
 8005cbe:	441a      	add	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	f7fe fed9 	bl	8004a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ccc:	f001 fc2c 	bl	8007528 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <prvAddNewTaskToReadyList+0xcc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d04 <prvAddNewTaskToReadyList+0xc8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d207      	bcs.n	8005cf6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <prvAddNewTaskToReadyList+0xdc>)
 8005ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20005154 	.word	0x20005154
 8005d04:	20004c80 	.word	0x20004c80
 8005d08:	20005160 	.word	0x20005160
 8005d0c:	20005170 	.word	0x20005170
 8005d10:	2000515c 	.word	0x2000515c
 8005d14:	20004c84 	.word	0x20004c84
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005d24:	f001 fbca 	bl	80074bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <vTaskDelete+0x18>
 8005d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005de8 <vTaskDelete+0xcc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	e000      	b.n	8005d36 <vTaskDelete+0x1a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe fefb 	bl	8004b38 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fef2 	bl	8004b38 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <vTaskDelete+0xd0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a24      	ldr	r2, [pc, #144]	@ (8005dec <vTaskDelete+0xd0>)
 8005d5c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005d5e:	4b22      	ldr	r3, [pc, #136]	@ (8005de8 <vTaskDelete+0xcc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d10b      	bne.n	8005d80 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4820      	ldr	r0, [pc, #128]	@ (8005df0 <vTaskDelete+0xd4>)
 8005d70:	f7fe fe85 	bl	8004a7e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005d74:	4b1f      	ldr	r3, [pc, #124]	@ (8005df4 <vTaskDelete+0xd8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005df4 <vTaskDelete+0xd8>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e009      	b.n	8005d94 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <vTaskDelete+0xdc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <vTaskDelete+0xdc>)
 8005d88:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fc86 	bl	800669c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005d90:	f000 fcb6 	bl	8006700 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005d94:	f001 fbc8 	bl	8007528 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005d98:	4b18      	ldr	r3, [pc, #96]	@ (8005dfc <vTaskDelete+0xe0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01e      	beq.n	8005dde <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 8005da0:	4b11      	ldr	r3, [pc, #68]	@ (8005de8 <vTaskDelete+0xcc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d119      	bne.n	8005dde <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <vTaskDelete+0xe4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <vTaskDelete+0xb2>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	b672      	cpsid	i
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	b662      	cpsie	i
 8005dc6:	60bb      	str	r3, [r7, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8005dce:	4b0d      	ldr	r3, [pc, #52]	@ (8005e04 <vTaskDelete+0xe8>)
 8005dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004c80 	.word	0x20004c80
 8005dec:	20005170 	.word	0x20005170
 8005df0:	20005128 	.word	0x20005128
 8005df4:	2000513c 	.word	0x2000513c
 8005df8:	20005154 	.word	0x20005154
 8005dfc:	20005160 	.word	0x20005160
 8005e00:	2000517c 	.word	0x2000517c
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01a      	beq.n	8005e50 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e1a:	4b15      	ldr	r3, [pc, #84]	@ (8005e70 <vTaskDelay+0x68>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00d      	beq.n	8005e3e <vTaskDelay+0x36>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	b672      	cpsid	i
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	b662      	cpsie	i
 8005e36:	60bb      	str	r3, [r7, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	e7fd      	b.n	8005e3a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005e3e:	f000 f887 	bl	8005f50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e42:	2100      	movs	r1, #0
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fe11 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e4a:	f000 f88f 	bl	8005f6c <xTaskResumeAll>
 8005e4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005e56:	4b07      	ldr	r3, [pc, #28]	@ (8005e74 <vTaskDelay+0x6c>)
 8005e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000517c 	.word	0x2000517c
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e86:	463a      	mov	r2, r7
 8005e88:	1d39      	adds	r1, r7, #4
 8005e8a:	f107 0308 	add.w	r3, r7, #8
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fd94 	bl	80049bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	9202      	str	r2, [sp, #8]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	460a      	mov	r2, r1
 8005ea6:	4924      	ldr	r1, [pc, #144]	@ (8005f38 <vTaskStartScheduler+0xc0>)
 8005ea8:	4824      	ldr	r0, [pc, #144]	@ (8005f3c <vTaskStartScheduler+0xc4>)
 8005eaa:	f7ff fd89 	bl	80059c0 <xTaskCreateStatic>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4a23      	ldr	r2, [pc, #140]	@ (8005f40 <vTaskStartScheduler+0xc8>)
 8005eb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005eb4:	4b22      	ldr	r3, [pc, #136]	@ (8005f40 <vTaskStartScheduler+0xc8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e001      	b.n	8005ec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d102      	bne.n	8005ed2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ecc:	f000 fe22 	bl	8006b14 <xTimerCreateTimerTask>
 8005ed0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d118      	bne.n	8005f0a <vTaskStartScheduler+0x92>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	b672      	cpsid	i
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	b662      	cpsie	i
 8005eec:	613b      	str	r3, [r7, #16]
}
 8005eee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ef0:	4b14      	ldr	r3, [pc, #80]	@ (8005f44 <vTaskStartScheduler+0xcc>)
 8005ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ef8:	4b13      	ldr	r3, [pc, #76]	@ (8005f48 <vTaskStartScheduler+0xd0>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005efe:	4b13      	ldr	r3, [pc, #76]	@ (8005f4c <vTaskStartScheduler+0xd4>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f04:	f001 fa5c 	bl	80073c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f08:	e011      	b.n	8005f2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d10d      	bne.n	8005f2e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	b672      	cpsid	i
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	b662      	cpsie	i
 8005f26:	60fb      	str	r3, [r7, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <vTaskStartScheduler+0xb2>
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	08008c10 	.word	0x08008c10
 8005f3c:	08006591 	.word	0x08006591
 8005f40:	20005178 	.word	0x20005178
 8005f44:	20005174 	.word	0x20005174
 8005f48:	20005160 	.word	0x20005160
 8005f4c:	20005158 	.word	0x20005158

08005f50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f54:	4b04      	ldr	r3, [pc, #16]	@ (8005f68 <vTaskSuspendAll+0x18>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	4a03      	ldr	r2, [pc, #12]	@ (8005f68 <vTaskSuspendAll+0x18>)
 8005f5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f5e:	bf00      	nop
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	2000517c 	.word	0x2000517c

08005f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f7a:	4b43      	ldr	r3, [pc, #268]	@ (8006088 <xTaskResumeAll+0x11c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <xTaskResumeAll+0x32>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	b672      	cpsid	i
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	b662      	cpsie	i
 8005f96:	603b      	str	r3, [r7, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f9e:	f001 fa8d 	bl	80074bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fa2:	4b39      	ldr	r3, [pc, #228]	@ (8006088 <xTaskResumeAll+0x11c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4a37      	ldr	r2, [pc, #220]	@ (8006088 <xTaskResumeAll+0x11c>)
 8005faa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fac:	4b36      	ldr	r3, [pc, #216]	@ (8006088 <xTaskResumeAll+0x11c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d162      	bne.n	800607a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fb4:	4b35      	ldr	r3, [pc, #212]	@ (800608c <xTaskResumeAll+0x120>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05e      	beq.n	800607a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fbc:	e02f      	b.n	800601e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbe:	4b34      	ldr	r3, [pc, #208]	@ (8006090 <xTaskResumeAll+0x124>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3318      	adds	r3, #24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fdb4 	bl	8004b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe fdaf 	bl	8004b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fde:	4b2d      	ldr	r3, [pc, #180]	@ (8006094 <xTaskResumeAll+0x128>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d903      	bls.n	8005fee <xTaskResumeAll+0x82>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fea:	4a2a      	ldr	r2, [pc, #168]	@ (8006094 <xTaskResumeAll+0x128>)
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4a27      	ldr	r2, [pc, #156]	@ (8006098 <xTaskResumeAll+0x12c>)
 8005ffc:	441a      	add	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3304      	adds	r3, #4
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f7fe fd3a 	bl	8004a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600e:	4b23      	ldr	r3, [pc, #140]	@ (800609c <xTaskResumeAll+0x130>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006018:	4b21      	ldr	r3, [pc, #132]	@ (80060a0 <xTaskResumeAll+0x134>)
 800601a:	2201      	movs	r2, #1
 800601c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800601e:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <xTaskResumeAll+0x124>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1cb      	bne.n	8005fbe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800602c:	f000 fb68 	bl	8006700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006030:	4b1c      	ldr	r3, [pc, #112]	@ (80060a4 <xTaskResumeAll+0x138>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d010      	beq.n	800605e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800603c:	f000 f846 	bl	80060cc <xTaskIncrementTick>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006046:	4b16      	ldr	r3, [pc, #88]	@ (80060a0 <xTaskResumeAll+0x134>)
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3b01      	subs	r3, #1
 8006050:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f1      	bne.n	800603c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006058:	4b12      	ldr	r3, [pc, #72]	@ (80060a4 <xTaskResumeAll+0x138>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800605e:	4b10      	ldr	r3, [pc, #64]	@ (80060a0 <xTaskResumeAll+0x134>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006066:	2301      	movs	r3, #1
 8006068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800606a:	4b0f      	ldr	r3, [pc, #60]	@ (80060a8 <xTaskResumeAll+0x13c>)
 800606c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800607a:	f001 fa55 	bl	8007528 <vPortExitCritical>

	return xAlreadyYielded;
 800607e:	68bb      	ldr	r3, [r7, #8]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	2000517c 	.word	0x2000517c
 800608c:	20005154 	.word	0x20005154
 8006090:	20005114 	.word	0x20005114
 8006094:	2000515c 	.word	0x2000515c
 8006098:	20004c84 	.word	0x20004c84
 800609c:	20004c80 	.word	0x20004c80
 80060a0:	20005168 	.word	0x20005168
 80060a4:	20005164 	.word	0x20005164
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <xTaskGetTickCount+0x1c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060b8:	687b      	ldr	r3, [r7, #4]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20005158 	.word	0x20005158

080060cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d6:	4b50      	ldr	r3, [pc, #320]	@ (8006218 <xTaskIncrementTick+0x14c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 808c 	bne.w	80061f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060e0:	4b4e      	ldr	r3, [pc, #312]	@ (800621c <xTaskIncrementTick+0x150>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3301      	adds	r3, #1
 80060e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060e8:	4a4c      	ldr	r2, [pc, #304]	@ (800621c <xTaskIncrementTick+0x150>)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d123      	bne.n	800613c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80060f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006220 <xTaskIncrementTick+0x154>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <xTaskIncrementTick+0x4e>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	b672      	cpsid	i
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	b662      	cpsie	i
 8006112:	603b      	str	r3, [r7, #0]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <xTaskIncrementTick+0x4a>
 800611a:	4b41      	ldr	r3, [pc, #260]	@ (8006220 <xTaskIncrementTick+0x154>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	4b40      	ldr	r3, [pc, #256]	@ (8006224 <xTaskIncrementTick+0x158>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3e      	ldr	r2, [pc, #248]	@ (8006220 <xTaskIncrementTick+0x154>)
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	4a3e      	ldr	r2, [pc, #248]	@ (8006224 <xTaskIncrementTick+0x158>)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4b3e      	ldr	r3, [pc, #248]	@ (8006228 <xTaskIncrementTick+0x15c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a3c      	ldr	r2, [pc, #240]	@ (8006228 <xTaskIncrementTick+0x15c>)
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	f000 fae2 	bl	8006700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800613c:	4b3b      	ldr	r3, [pc, #236]	@ (800622c <xTaskIncrementTick+0x160>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	d349      	bcc.n	80061da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006146:	4b36      	ldr	r3, [pc, #216]	@ (8006220 <xTaskIncrementTick+0x154>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006150:	4b36      	ldr	r3, [pc, #216]	@ (800622c <xTaskIncrementTick+0x160>)
 8006152:	f04f 32ff 	mov.w	r2, #4294967295
 8006156:	601a      	str	r2, [r3, #0]
					break;
 8006158:	e03f      	b.n	80061da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800615a:	4b31      	ldr	r3, [pc, #196]	@ (8006220 <xTaskIncrementTick+0x154>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d203      	bcs.n	800617a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006172:	4a2e      	ldr	r2, [pc, #184]	@ (800622c <xTaskIncrementTick+0x160>)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006178:	e02f      	b.n	80061da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	3304      	adds	r3, #4
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fcda 	bl	8004b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3318      	adds	r3, #24
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe fcd1 	bl	8004b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619a:	4b25      	ldr	r3, [pc, #148]	@ (8006230 <xTaskIncrementTick+0x164>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d903      	bls.n	80061aa <xTaskIncrementTick+0xde>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a6:	4a22      	ldr	r2, [pc, #136]	@ (8006230 <xTaskIncrementTick+0x164>)
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006234 <xTaskIncrementTick+0x168>)
 80061b8:	441a      	add	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7fe fc5c 	bl	8004a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006238 <xTaskIncrementTick+0x16c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d3b8      	bcc.n	8006146 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d8:	e7b5      	b.n	8006146 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061da:	4b17      	ldr	r3, [pc, #92]	@ (8006238 <xTaskIncrementTick+0x16c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e0:	4914      	ldr	r1, [pc, #80]	@ (8006234 <xTaskIncrementTick+0x168>)
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d907      	bls.n	8006202 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e004      	b.n	8006202 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061f8:	4b10      	ldr	r3, [pc, #64]	@ (800623c <xTaskIncrementTick+0x170>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	4a0f      	ldr	r2, [pc, #60]	@ (800623c <xTaskIncrementTick+0x170>)
 8006200:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006202:	4b0f      	ldr	r3, [pc, #60]	@ (8006240 <xTaskIncrementTick+0x174>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800620e:	697b      	ldr	r3, [r7, #20]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	2000517c 	.word	0x2000517c
 800621c:	20005158 	.word	0x20005158
 8006220:	2000510c 	.word	0x2000510c
 8006224:	20005110 	.word	0x20005110
 8006228:	2000516c 	.word	0x2000516c
 800622c:	20005174 	.word	0x20005174
 8006230:	2000515c 	.word	0x2000515c
 8006234:	20004c84 	.word	0x20004c84
 8006238:	20004c80 	.word	0x20004c80
 800623c:	20005164 	.word	0x20005164
 8006240:	20005168 	.word	0x20005168

08006244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800624a:	4b29      	ldr	r3, [pc, #164]	@ (80062f0 <vTaskSwitchContext+0xac>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006252:	4b28      	ldr	r3, [pc, #160]	@ (80062f4 <vTaskSwitchContext+0xb0>)
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006258:	e044      	b.n	80062e4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800625a:	4b26      	ldr	r3, [pc, #152]	@ (80062f4 <vTaskSwitchContext+0xb0>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006260:	4b25      	ldr	r3, [pc, #148]	@ (80062f8 <vTaskSwitchContext+0xb4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e013      	b.n	8006290 <vTaskSwitchContext+0x4c>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10d      	bne.n	800628a <vTaskSwitchContext+0x46>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	b672      	cpsid	i
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	b662      	cpsie	i
 8006282:	607b      	str	r3, [r7, #4]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <vTaskSwitchContext+0x42>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3b01      	subs	r3, #1
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	491a      	ldr	r1, [pc, #104]	@ (80062fc <vTaskSwitchContext+0xb8>)
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0e1      	beq.n	8006268 <vTaskSwitchContext+0x24>
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <vTaskSwitchContext+0xb8>)
 80062b0:	4413      	add	r3, r2
 80062b2:	60bb      	str	r3, [r7, #8]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	3308      	adds	r3, #8
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d104      	bne.n	80062d4 <vTaskSwitchContext+0x90>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	4a09      	ldr	r2, [pc, #36]	@ (8006300 <vTaskSwitchContext+0xbc>)
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	4a06      	ldr	r2, [pc, #24]	@ (80062f8 <vTaskSwitchContext+0xb4>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6013      	str	r3, [r2, #0]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	2000517c 	.word	0x2000517c
 80062f4:	20005168 	.word	0x20005168
 80062f8:	2000515c 	.word	0x2000515c
 80062fc:	20004c84 	.word	0x20004c84
 8006300:	20004c80 	.word	0x20004c80

08006304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10d      	bne.n	8006330 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	b672      	cpsid	i
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	b662      	cpsie	i
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006330:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <vTaskPlaceOnEventList+0x4c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3318      	adds	r3, #24
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7fe fbc4 	bl	8004ac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800633e:	2101      	movs	r1, #1
 8006340:	6838      	ldr	r0, [r7, #0]
 8006342:	f000 fb93 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
}
 8006346:	bf00      	nop
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20004c80 	.word	0x20004c80

08006354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10d      	bne.n	8006382 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	b672      	cpsid	i
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	b662      	cpsie	i
 800637a:	617b      	str	r3, [r7, #20]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006382:	4b0a      	ldr	r3, [pc, #40]	@ (80063ac <vTaskPlaceOnEventListRestricted+0x58>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3318      	adds	r3, #24
 8006388:	4619      	mov	r1, r3
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7fe fb77 	bl	8004a7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	68b8      	ldr	r0, [r7, #8]
 80063a0:	f000 fb64 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
	}
 80063a4:	bf00      	nop
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20004c80 	.word	0x20004c80

080063b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10d      	bne.n	80063e2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	b672      	cpsid	i
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	b662      	cpsie	i
 80063da:	60fb      	str	r3, [r7, #12]
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	3318      	adds	r3, #24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fba6 	bl	8004b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006464 <xTaskRemoveFromEventList+0xb4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11d      	bne.n	8006430 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fb9d 	bl	8004b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006402:	4b19      	ldr	r3, [pc, #100]	@ (8006468 <xTaskRemoveFromEventList+0xb8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d903      	bls.n	8006412 <xTaskRemoveFromEventList+0x62>
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <xTaskRemoveFromEventList+0xb8>)
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4a13      	ldr	r2, [pc, #76]	@ (800646c <xTaskRemoveFromEventList+0xbc>)
 8006420:	441a      	add	r2, r3
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3304      	adds	r3, #4
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f7fe fb28 	bl	8004a7e <vListInsertEnd>
 800642e:	e005      	b.n	800643c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	3318      	adds	r3, #24
 8006434:	4619      	mov	r1, r3
 8006436:	480e      	ldr	r0, [pc, #56]	@ (8006470 <xTaskRemoveFromEventList+0xc0>)
 8006438:	f7fe fb21 	bl	8004a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006440:	4b0c      	ldr	r3, [pc, #48]	@ (8006474 <xTaskRemoveFromEventList+0xc4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006446:	429a      	cmp	r2, r3
 8006448:	d905      	bls.n	8006456 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800644a:	2301      	movs	r3, #1
 800644c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800644e:	4b0a      	ldr	r3, [pc, #40]	@ (8006478 <xTaskRemoveFromEventList+0xc8>)
 8006450:	2201      	movs	r2, #1
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e001      	b.n	800645a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800645a:	697b      	ldr	r3, [r7, #20]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	2000517c 	.word	0x2000517c
 8006468:	2000515c 	.word	0x2000515c
 800646c:	20004c84 	.word	0x20004c84
 8006470:	20005114 	.word	0x20005114
 8006474:	20004c80 	.word	0x20004c80
 8006478:	20005168 	.word	0x20005168

0800647c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006484:	4b06      	ldr	r3, [pc, #24]	@ (80064a0 <vTaskInternalSetTimeOutState+0x24>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800648c:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <vTaskInternalSetTimeOutState+0x28>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	2000516c 	.word	0x2000516c
 80064a4:	20005158 	.word	0x20005158

080064a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10d      	bne.n	80064d4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	b672      	cpsid	i
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	b662      	cpsie	i
 80064cc:	613b      	str	r3, [r7, #16]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064de:	b672      	cpsid	i
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	b662      	cpsie	i
 80064ee:	60fb      	str	r3, [r7, #12]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80064f6:	f000 ffe1 	bl	80074bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006570 <xTaskCheckForTimeOut+0xc8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d102      	bne.n	800651a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e023      	b.n	8006562 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <xTaskCheckForTimeOut+0xcc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d007      	beq.n	8006536 <xTaskCheckForTimeOut+0x8e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	e015      	b.n	8006562 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	429a      	cmp	r2, r3
 800653e:	d20b      	bcs.n	8006558 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ff95 	bl	800647c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e004      	b.n	8006562 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006562:	f000 ffe1 	bl	8007528 <vPortExitCritical>

	return xReturn;
 8006566:	69fb      	ldr	r3, [r7, #28]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20005158 	.word	0x20005158
 8006574:	2000516c 	.word	0x2000516c

08006578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800657c:	4b03      	ldr	r3, [pc, #12]	@ (800658c <vTaskMissedYield+0x14>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20005168 	.word	0x20005168

08006590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006598:	f000 f852 	bl	8006640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800659c:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <prvIdleTask+0x28>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d9f9      	bls.n	8006598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065a4:	4b05      	ldr	r3, [pc, #20]	@ (80065bc <prvIdleTask+0x2c>)
 80065a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065b4:	e7f0      	b.n	8006598 <prvIdleTask+0x8>
 80065b6:	bf00      	nop
 80065b8:	20004c84 	.word	0x20004c84
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	e00c      	b.n	80065e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a12      	ldr	r2, [pc, #72]	@ (8006620 <prvInitialiseTaskLists+0x60>)
 80065d8:	4413      	add	r3, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fa22 	bl	8004a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b37      	cmp	r3, #55	@ 0x37
 80065ea:	d9ef      	bls.n	80065cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065ec:	480d      	ldr	r0, [pc, #52]	@ (8006624 <prvInitialiseTaskLists+0x64>)
 80065ee:	f7fe fa19 	bl	8004a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065f2:	480d      	ldr	r0, [pc, #52]	@ (8006628 <prvInitialiseTaskLists+0x68>)
 80065f4:	f7fe fa16 	bl	8004a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065f8:	480c      	ldr	r0, [pc, #48]	@ (800662c <prvInitialiseTaskLists+0x6c>)
 80065fa:	f7fe fa13 	bl	8004a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065fe:	480c      	ldr	r0, [pc, #48]	@ (8006630 <prvInitialiseTaskLists+0x70>)
 8006600:	f7fe fa10 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006604:	480b      	ldr	r0, [pc, #44]	@ (8006634 <prvInitialiseTaskLists+0x74>)
 8006606:	f7fe fa0d 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800660a:	4b0b      	ldr	r3, [pc, #44]	@ (8006638 <prvInitialiseTaskLists+0x78>)
 800660c:	4a05      	ldr	r2, [pc, #20]	@ (8006624 <prvInitialiseTaskLists+0x64>)
 800660e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006610:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <prvInitialiseTaskLists+0x7c>)
 8006612:	4a05      	ldr	r2, [pc, #20]	@ (8006628 <prvInitialiseTaskLists+0x68>)
 8006614:	601a      	str	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20004c84 	.word	0x20004c84
 8006624:	200050e4 	.word	0x200050e4
 8006628:	200050f8 	.word	0x200050f8
 800662c:	20005114 	.word	0x20005114
 8006630:	20005128 	.word	0x20005128
 8006634:	20005140 	.word	0x20005140
 8006638:	2000510c 	.word	0x2000510c
 800663c:	20005110 	.word	0x20005110

08006640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006646:	e019      	b.n	800667c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006648:	f000 ff38 	bl	80074bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	4b10      	ldr	r3, [pc, #64]	@ (8006690 <prvCheckTasksWaitingTermination+0x50>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fa6d 	bl	8004b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800665e:	4b0d      	ldr	r3, [pc, #52]	@ (8006694 <prvCheckTasksWaitingTermination+0x54>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3b01      	subs	r3, #1
 8006664:	4a0b      	ldr	r2, [pc, #44]	@ (8006694 <prvCheckTasksWaitingTermination+0x54>)
 8006666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006668:	4b0b      	ldr	r3, [pc, #44]	@ (8006698 <prvCheckTasksWaitingTermination+0x58>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a0a      	ldr	r2, [pc, #40]	@ (8006698 <prvCheckTasksWaitingTermination+0x58>)
 8006670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006672:	f000 ff59 	bl	8007528 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f810 	bl	800669c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800667c:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <prvCheckTasksWaitingTermination+0x58>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e1      	bne.n	8006648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20005128 	.word	0x20005128
 8006694:	20005154 	.word	0x20005154
 8006698:	2000513c 	.word	0x2000513c

0800669c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 f8fe 	bl	80078b4 <vPortFree>
				vPortFree( pxTCB );
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 f8fb 	bl	80078b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066be:	e01b      	b.n	80066f8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d103      	bne.n	80066d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 f8f2 	bl	80078b4 <vPortFree>
	}
 80066d0:	e012      	b.n	80066f8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d00d      	beq.n	80066f8 <prvDeleteTCB+0x5c>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e0:	b672      	cpsid	i
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	b662      	cpsie	i
 80066f0:	60fb      	str	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <prvDeleteTCB+0x58>
	}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006706:	4b0c      	ldr	r3, [pc, #48]	@ (8006738 <prvResetNextTaskUnblockTime+0x38>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d104      	bne.n	800671a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006710:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <prvResetNextTaskUnblockTime+0x3c>)
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006718:	e008      	b.n	800672c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671a:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <prvResetNextTaskUnblockTime+0x38>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a04      	ldr	r2, [pc, #16]	@ (800673c <prvResetNextTaskUnblockTime+0x3c>)
 800672a:	6013      	str	r3, [r2, #0]
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	2000510c 	.word	0x2000510c
 800673c:	20005174 	.word	0x20005174

08006740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006746:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <xTaskGetSchedulerState+0x34>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800674e:	2301      	movs	r3, #1
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	e008      	b.n	8006766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006754:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <xTaskGetSchedulerState+0x38>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800675c:	2302      	movs	r3, #2
 800675e:	607b      	str	r3, [r7, #4]
 8006760:	e001      	b.n	8006766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006762:	2300      	movs	r3, #0
 8006764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006766:	687b      	ldr	r3, [r7, #4]
	}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	20005160 	.word	0x20005160
 8006778:	2000517c 	.word	0x2000517c

0800677c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d051      	beq.n	8006836 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006796:	4b2a      	ldr	r3, [pc, #168]	@ (8006840 <xTaskPriorityInherit+0xc4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	429a      	cmp	r2, r3
 800679e:	d241      	bcs.n	8006824 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	db06      	blt.n	80067b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a8:	4b25      	ldr	r3, [pc, #148]	@ (8006840 <xTaskPriorityInherit+0xc4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6959      	ldr	r1, [r3, #20]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006844 <xTaskPriorityInherit+0xc8>)
 80067c8:	4413      	add	r3, r2
 80067ca:	4299      	cmp	r1, r3
 80067cc:	d122      	bne.n	8006814 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe f9b0 	bl	8004b38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067d8:	4b19      	ldr	r3, [pc, #100]	@ (8006840 <xTaskPriorityInherit+0xc4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e6:	4b18      	ldr	r3, [pc, #96]	@ (8006848 <xTaskPriorityInherit+0xcc>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d903      	bls.n	80067f6 <xTaskPriorityInherit+0x7a>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	4a15      	ldr	r2, [pc, #84]	@ (8006848 <xTaskPriorityInherit+0xcc>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a10      	ldr	r2, [pc, #64]	@ (8006844 <xTaskPriorityInherit+0xc8>)
 8006804:	441a      	add	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3304      	adds	r3, #4
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f7fe f936 	bl	8004a7e <vListInsertEnd>
 8006812:	e004      	b.n	800681e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006814:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <xTaskPriorityInherit+0xc4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e008      	b.n	8006836 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006828:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <xTaskPriorityInherit+0xc4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682e:	429a      	cmp	r2, r3
 8006830:	d201      	bcs.n	8006836 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006832:	2301      	movs	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006836:	68fb      	ldr	r3, [r7, #12]
	}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20004c80 	.word	0x20004c80
 8006844:	20004c84 	.word	0x20004c84
 8006848:	2000515c 	.word	0x2000515c

0800684c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d05c      	beq.n	800691c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006862:	4b31      	ldr	r3, [pc, #196]	@ (8006928 <xTaskPriorityDisinherit+0xdc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	d00d      	beq.n	8006888 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	b672      	cpsid	i
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	b662      	cpsie	i
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10d      	bne.n	80068ac <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006894:	b672      	cpsid	i
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	b662      	cpsie	i
 80068a4:	60bb      	str	r3, [r7, #8]
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d02c      	beq.n	800691c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d128      	bne.n	800691c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe f932 	bl	8004b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ec:	4b0f      	ldr	r3, [pc, #60]	@ (800692c <xTaskPriorityDisinherit+0xe0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d903      	bls.n	80068fc <xTaskPriorityDisinherit+0xb0>
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	4a0c      	ldr	r2, [pc, #48]	@ (800692c <xTaskPriorityDisinherit+0xe0>)
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <xTaskPriorityDisinherit+0xe4>)
 800690a:	441a      	add	r2, r3
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	3304      	adds	r3, #4
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f7fe f8b3 	bl	8004a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800691c:	697b      	ldr	r3, [r7, #20]
	}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20004c80 	.word	0x20004c80
 800692c:	2000515c 	.word	0x2000515c
 8006930:	20004c84 	.word	0x20004c84

08006934 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006942:	2301      	movs	r3, #1
 8006944:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d070      	beq.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10d      	bne.n	8006970 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006958:	b672      	cpsid	i
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	b662      	cpsie	i
 8006968:	60fb      	str	r3, [r7, #12]
}
 800696a:	bf00      	nop
 800696c:	bf00      	nop
 800696e:	e7fd      	b.n	800696c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d902      	bls.n	8006980 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	e002      	b.n	8006986 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006984:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	429a      	cmp	r2, r3
 800698e:	d04e      	beq.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	429a      	cmp	r2, r3
 8006998:	d149      	bne.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800699a:	4b27      	ldr	r3, [pc, #156]	@ (8006a38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d10d      	bne.n	80069c0 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	b672      	cpsid	i
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	b662      	cpsie	i
 80069b8:	60bb      	str	r3, [r7, #8]
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	e7fd      	b.n	80069bc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	db04      	blt.n	80069de <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	6959      	ldr	r1, [r3, #20]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4a13      	ldr	r2, [pc, #76]	@ (8006a3c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80069ee:	4413      	add	r3, r2
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d11c      	bne.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe f89d 	bl	8004b38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a02:	4b0f      	ldr	r3, [pc, #60]	@ (8006a40 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a40 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4a07      	ldr	r2, [pc, #28]	@ (8006a3c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006a20:	441a      	add	r2, r3
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7fe f828 	bl	8004a7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a2e:	bf00      	nop
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20004c80 	.word	0x20004c80
 8006a3c:	20004c84 	.word	0x20004c84
 8006a40:	2000515c 	.word	0x2000515c

08006a44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a48:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a50:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a56:	3201      	adds	r2, #1
 8006a58:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006a5a:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
	}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20004c80 	.word	0x20004c80

08006a6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a76:	4b21      	ldr	r3, [pc, #132]	@ (8006afc <prvAddCurrentTaskToDelayedList+0x90>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a7c:	4b20      	ldr	r3, [pc, #128]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe f858 	bl	8004b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d10a      	bne.n	8006aa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d007      	beq.n	8006aa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a96:	4b1a      	ldr	r3, [pc, #104]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4819      	ldr	r0, [pc, #100]	@ (8006b04 <prvAddCurrentTaskToDelayedList+0x98>)
 8006aa0:	f7fd ffed 	bl	8004a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aa4:	e026      	b.n	8006af4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006aae:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d209      	bcs.n	8006ad2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006abe:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f7fd fffb 	bl	8004ac6 <vListInsert>
}
 8006ad0:	e010      	b.n	8006af4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fd fff1 	bl	8004ac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d202      	bcs.n	8006af4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006aee:	4a08      	ldr	r2, [pc, #32]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6013      	str	r3, [r2, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20005158 	.word	0x20005158
 8006b00:	20004c80 	.word	0x20004c80
 8006b04:	20005140 	.word	0x20005140
 8006b08:	20005110 	.word	0x20005110
 8006b0c:	2000510c 	.word	0x2000510c
 8006b10:	20005174 	.word	0x20005174

08006b14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	@ 0x28
 8006b18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b1e:	f000 fb81 	bl	8007224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b22:	4b1e      	ldr	r3, [pc, #120]	@ (8006b9c <xTimerCreateTimerTask+0x88>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d021      	beq.n	8006b6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b32:	1d3a      	adds	r2, r7, #4
 8006b34:	f107 0108 	add.w	r1, r7, #8
 8006b38:	f107 030c 	add.w	r3, r7, #12
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fd ff57 	bl	80049f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	9202      	str	r2, [sp, #8]
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	2300      	movs	r3, #0
 8006b52:	460a      	mov	r2, r1
 8006b54:	4912      	ldr	r1, [pc, #72]	@ (8006ba0 <xTimerCreateTimerTask+0x8c>)
 8006b56:	4813      	ldr	r0, [pc, #76]	@ (8006ba4 <xTimerCreateTimerTask+0x90>)
 8006b58:	f7fe ff32 	bl	80059c0 <xTaskCreateStatic>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	4a12      	ldr	r2, [pc, #72]	@ (8006ba8 <xTimerCreateTimerTask+0x94>)
 8006b60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b62:	4b11      	ldr	r3, [pc, #68]	@ (8006ba8 <xTimerCreateTimerTask+0x94>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10d      	bne.n	8006b90 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	b672      	cpsid	i
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	b662      	cpsie	i
 8006b88:	613b      	str	r3, [r7, #16]
}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	e7fd      	b.n	8006b8c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006b90:	697b      	ldr	r3, [r7, #20]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200051b0 	.word	0x200051b0
 8006ba0:	08008c18 	.word	0x08008c18
 8006ba4:	08006dad 	.word	0x08006dad
 8006ba8:	200051b4 	.word	0x200051b4

08006bac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006bba:	202c      	movs	r0, #44	@ 0x2c
 8006bbc:	f000 fdac 	bl	8007718 <pvPortMalloc>
 8006bc0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00d      	beq.n	8006be4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f805 	bl	8006bee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006be4:	697b      	ldr	r3, [r7, #20]
	}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10d      	bne.n	8006c1e <prvInitialiseNewTimer+0x30>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	617b      	str	r3, [r7, #20]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01e      	beq.n	8006c62 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006c24:	f000 fafe 	bl	8007224 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	6a3a      	ldr	r2, [r7, #32]
 8006c3e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	3304      	adds	r3, #4
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fd ff0d 	bl	8004a64 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c56:	f043 0304 	orr.w	r3, r3, #4
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006c62:	bf00      	nop
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	@ 0x28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <xTimerGenericCommand+0x34>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	b672      	cpsid	i
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	b662      	cpsie	i
 8006c98:	623b      	str	r3, [r7, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	bf00      	nop
 8006c9e:	e7fd      	b.n	8006c9c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ca0:	4b19      	ldr	r3, [pc, #100]	@ (8006d08 <xTimerGenericCommand+0x9c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d02a      	beq.n	8006cfe <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b05      	cmp	r3, #5
 8006cb8:	dc18      	bgt.n	8006cec <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cba:	f7ff fd41 	bl	8006740 <xTaskGetSchedulerState>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d109      	bne.n	8006cd8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cc4:	4b10      	ldr	r3, [pc, #64]	@ (8006d08 <xTimerGenericCommand+0x9c>)
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	f107 0110 	add.w	r1, r7, #16
 8006ccc:	2300      	movs	r3, #0
 8006cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd0:	f7fe f920 	bl	8004f14 <xQueueGenericSend>
 8006cd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cd6:	e012      	b.n	8006cfe <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <xTimerGenericCommand+0x9c>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	f107 0110 	add.w	r1, r7, #16
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f7fe f916 	bl	8004f14 <xQueueGenericSend>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cea:	e008      	b.n	8006cfe <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cec:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <xTimerGenericCommand+0x9c>)
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	f107 0110 	add.w	r1, r7, #16
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	f7fe fa16 	bl	8005128 <xQueueGenericSendFromISR>
 8006cfc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3728      	adds	r7, #40	@ 0x28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	200051b0 	.word	0x200051b0

08006d0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d16:	4b24      	ldr	r3, [pc, #144]	@ (8006da8 <prvProcessExpiredTimer+0x9c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fd ff07 	bl	8004b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d025      	beq.n	8006d84 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	18d1      	adds	r1, r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	6978      	ldr	r0, [r7, #20]
 8006d46:	f000 f8d7 	bl	8006ef8 <prvInsertTimerInActiveList>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d022      	beq.n	8006d96 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d50:	2300      	movs	r3, #0
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2300      	movs	r3, #0
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	2100      	movs	r1, #0
 8006d5a:	6978      	ldr	r0, [r7, #20]
 8006d5c:	f7ff ff86 	bl	8006c6c <xTimerGenericCommand>
 8006d60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d116      	bne.n	8006d96 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	b672      	cpsid	i
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	b662      	cpsie	i
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	e7fd      	b.n	8006d80 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d8a:	f023 0301 	bic.w	r3, r3, #1
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	4798      	blx	r3
}
 8006d9e:	bf00      	nop
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200051a8 	.word	0x200051a8

08006dac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006db4:	f107 0308 	add.w	r3, r7, #8
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f859 	bl	8006e70 <prvGetNextExpireTime>
 8006dbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f805 	bl	8006dd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006dca:	f000 f8d7 	bl	8006f7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dce:	bf00      	nop
 8006dd0:	e7f0      	b.n	8006db4 <prvTimerTask+0x8>
	...

08006dd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006dde:	f7ff f8b7 	bl	8005f50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 f866 	bl	8006eb8 <prvSampleTimeNow>
 8006dec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d130      	bne.n	8006e56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <prvProcessTimerOrBlockTask+0x3c>
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d806      	bhi.n	8006e10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e02:	f7ff f8b3 	bl	8005f6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e06:	68f9      	ldr	r1, [r7, #12]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ff7f 	bl	8006d0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e0e:	e024      	b.n	8006e5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e16:	4b13      	ldr	r3, [pc, #76]	@ (8006e64 <prvProcessTimerOrBlockTask+0x90>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <prvProcessTimerOrBlockTask+0x50>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <prvProcessTimerOrBlockTask+0x52>
 8006e24:	2300      	movs	r3, #0
 8006e26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e28:	4b0f      	ldr	r3, [pc, #60]	@ (8006e68 <prvProcessTimerOrBlockTask+0x94>)
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4619      	mov	r1, r3
 8006e36:	f7fe fd8f 	bl	8005958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e3a:	f7ff f897 	bl	8005f6c <xTaskResumeAll>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e44:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <prvProcessTimerOrBlockTask+0x98>)
 8006e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	f3bf 8f6f 	isb	sy
}
 8006e54:	e001      	b.n	8006e5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e56:	f7ff f889 	bl	8005f6c <xTaskResumeAll>
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	200051ac 	.word	0x200051ac
 8006e68:	200051b0 	.word	0x200051b0
 8006e6c:	e000ed04 	.word	0xe000ed04

08006e70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <prvGetNextExpireTime+0x44>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <prvGetNextExpireTime+0x16>
 8006e82:	2201      	movs	r2, #1
 8006e84:	e000      	b.n	8006e88 <prvGetNextExpireTime+0x18>
 8006e86:	2200      	movs	r2, #0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d105      	bne.n	8006ea0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e94:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <prvGetNextExpireTime+0x44>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e001      	b.n	8006ea4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	200051a8 	.word	0x200051a8

08006eb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ec0:	f7ff f8f4 	bl	80060ac <xTaskGetTickCount>
 8006ec4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <prvSampleTimeNow+0x3c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d205      	bcs.n	8006edc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ed0:	f000 f940 	bl	8007154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	e002      	b.n	8006ee2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ee2:	4a04      	ldr	r2, [pc, #16]	@ (8006ef4 <prvSampleTimeNow+0x3c>)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	200051b8 	.word	0x200051b8

08006ef8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d812      	bhi.n	8006f44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad2      	subs	r2, r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d302      	bcc.n	8006f32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e01b      	b.n	8006f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f32:	4b10      	ldr	r3, [pc, #64]	@ (8006f74 <prvInsertTimerInActiveList+0x7c>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f7fd fdc2 	bl	8004ac6 <vListInsert>
 8006f42:	e012      	b.n	8006f6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d206      	bcs.n	8006f5a <prvInsertTimerInActiveList+0x62>
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e007      	b.n	8006f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f5a:	4b07      	ldr	r3, [pc, #28]	@ (8006f78 <prvInsertTimerInActiveList+0x80>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f7fd fdae 	bl	8004ac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f6a:	697b      	ldr	r3, [r7, #20]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	200051ac 	.word	0x200051ac
 8006f78:	200051a8 	.word	0x200051a8

08006f7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08e      	sub	sp, #56	@ 0x38
 8006f80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f82:	e0d4      	b.n	800712e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da1b      	bge.n	8006fc2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10d      	bne.n	8006fb2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	b672      	cpsid	i
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	b662      	cpsie	i
 8006faa:	61fb      	str	r3, [r7, #28]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb8:	6850      	ldr	r0, [r2, #4]
 8006fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fbc:	6892      	ldr	r2, [r2, #8]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f2c0 80b2 	blt.w	800712e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd fdac 	bl	8004b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff ff68 	bl	8006eb8 <prvSampleTimeNow>
 8006fe8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b09      	cmp	r3, #9
 8006fee:	f200 809b 	bhi.w	8007128 <prvProcessReceivedCommands+0x1ac>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <prvProcessReceivedCommands+0x7c>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007021 	.word	0x08007021
 8007004:	0800709b 	.word	0x0800709b
 8007008:	080070af 	.word	0x080070af
 800700c:	080070ff 	.word	0x080070ff
 8007010:	08007021 	.word	0x08007021
 8007014:	08007021 	.word	0x08007021
 8007018:	0800709b 	.word	0x0800709b
 800701c:	080070af 	.word	0x080070af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	18d1      	adds	r1, r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800703e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007040:	f7ff ff5a 	bl	8006ef8 <prvInsertTimerInActiveList>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d070      	beq.n	800712c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007050:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d065      	beq.n	800712c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	441a      	add	r2, r3
 8007068:	2300      	movs	r3, #0
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2300      	movs	r3, #0
 800706e:	2100      	movs	r1, #0
 8007070:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007072:	f7ff fdfb 	bl	8006c6c <xTimerGenericCommand>
 8007076:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d156      	bne.n	800712c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	b672      	cpsid	i
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	b662      	cpsie	i
 8007092:	61bb      	str	r3, [r7, #24]
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	e7fd      	b.n	8007096 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070ac:	e03f      	b.n	800712e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10d      	bne.n	80070ea <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	b672      	cpsid	i
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	b662      	cpsie	i
 80070e2:	617b      	str	r3, [r7, #20]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	18d1      	adds	r1, r2, r3
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070f8:	f7ff fefe 	bl	8006ef8 <prvInsertTimerInActiveList>
					break;
 80070fc:	e017      	b.n	800712e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d103      	bne.n	8007114 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800710c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800710e:	f000 fbd1 	bl	80078b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007112:	e00c      	b.n	800712e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007126:	e002      	b.n	800712e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007128:	bf00      	nop
 800712a:	e000      	b.n	800712e <prvProcessReceivedCommands+0x1b2>
					break;
 800712c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800712e:	4b08      	ldr	r3, [pc, #32]	@ (8007150 <prvProcessReceivedCommands+0x1d4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	1d39      	adds	r1, r7, #4
 8007134:	2200      	movs	r2, #0
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe f89a 	bl	8005270 <xQueueReceive>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	f47f af20 	bne.w	8006f84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	3730      	adds	r7, #48	@ 0x30
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200051b0 	.word	0x200051b0

08007154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800715a:	e04b      	b.n	80071f4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800715c:	4b2f      	ldr	r3, [pc, #188]	@ (800721c <prvSwitchTimerLists+0xc8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007166:	4b2d      	ldr	r3, [pc, #180]	@ (800721c <prvSwitchTimerLists+0xc8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3304      	adds	r3, #4
 8007174:	4618      	mov	r0, r3
 8007176:	f7fd fcdf 	bl	8004b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d031      	beq.n	80071f4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4413      	add	r3, r2
 8007198:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d90e      	bls.n	80071c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ae:	4b1b      	ldr	r3, [pc, #108]	@ (800721c <prvSwitchTimerLists+0xc8>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f7fd fc84 	bl	8004ac6 <vListInsert>
 80071be:	e019      	b.n	80071f4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071c0:	2300      	movs	r3, #0
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	2100      	movs	r1, #0
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff fd4e 	bl	8006c6c <xTimerGenericCommand>
 80071d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10d      	bne.n	80071f4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071dc:	b672      	cpsid	i
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	b662      	cpsie	i
 80071ec:	603b      	str	r3, [r7, #0]
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <prvSwitchTimerLists+0xc8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1ae      	bne.n	800715c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071fe:	4b07      	ldr	r3, [pc, #28]	@ (800721c <prvSwitchTimerLists+0xc8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007204:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <prvSwitchTimerLists+0xcc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a04      	ldr	r2, [pc, #16]	@ (800721c <prvSwitchTimerLists+0xc8>)
 800720a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800720c:	4a04      	ldr	r2, [pc, #16]	@ (8007220 <prvSwitchTimerLists+0xcc>)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6013      	str	r3, [r2, #0]
}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200051a8 	.word	0x200051a8
 8007220:	200051ac 	.word	0x200051ac

08007224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800722a:	f000 f947 	bl	80074bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800722e:	4b15      	ldr	r3, [pc, #84]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d120      	bne.n	8007278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007236:	4814      	ldr	r0, [pc, #80]	@ (8007288 <prvCheckForValidListAndQueue+0x64>)
 8007238:	f7fd fbf4 	bl	8004a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800723c:	4813      	ldr	r0, [pc, #76]	@ (800728c <prvCheckForValidListAndQueue+0x68>)
 800723e:	f7fd fbf1 	bl	8004a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007242:	4b13      	ldr	r3, [pc, #76]	@ (8007290 <prvCheckForValidListAndQueue+0x6c>)
 8007244:	4a10      	ldr	r2, [pc, #64]	@ (8007288 <prvCheckForValidListAndQueue+0x64>)
 8007246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007248:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <prvCheckForValidListAndQueue+0x70>)
 800724a:	4a10      	ldr	r2, [pc, #64]	@ (800728c <prvCheckForValidListAndQueue+0x68>)
 800724c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800724e:	2300      	movs	r3, #0
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <prvCheckForValidListAndQueue+0x74>)
 8007254:	4a11      	ldr	r2, [pc, #68]	@ (800729c <prvCheckForValidListAndQueue+0x78>)
 8007256:	2110      	movs	r1, #16
 8007258:	200a      	movs	r0, #10
 800725a:	f7fd fd03 	bl	8004c64 <xQueueGenericCreateStatic>
 800725e:	4603      	mov	r3, r0
 8007260:	4a08      	ldr	r2, [pc, #32]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007264:	4b07      	ldr	r3, [pc, #28]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800726c:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	490b      	ldr	r1, [pc, #44]	@ (80072a0 <prvCheckForValidListAndQueue+0x7c>)
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fb46 	bl	8005904 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007278:	f000 f956 	bl	8007528 <vPortExitCritical>
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	200051b0 	.word	0x200051b0
 8007288:	20005180 	.word	0x20005180
 800728c:	20005194 	.word	0x20005194
 8007290:	200051a8 	.word	0x200051a8
 8007294:	200051ac 	.word	0x200051ac
 8007298:	2000525c 	.word	0x2000525c
 800729c:	200051bc 	.word	0x200051bc
 80072a0:	08008c20 	.word	0x08008c20

080072a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3b04      	subs	r3, #4
 80072b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007308 <pxPortInitialiseStack+0x64>)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3b14      	subs	r3, #20
 80072de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f06f 0202 	mvn.w	r2, #2
 80072f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3b20      	subs	r3, #32
 80072f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	0800730d 	.word	0x0800730d

0800730c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007316:	4b15      	ldr	r3, [pc, #84]	@ (800736c <prvTaskExitError+0x60>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d00d      	beq.n	800733c <prvTaskExitError+0x30>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	b672      	cpsid	i
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	b662      	cpsie	i
 8007334:	60fb      	str	r3, [r7, #12]
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	e7fd      	b.n	8007338 <prvTaskExitError+0x2c>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007340:	b672      	cpsid	i
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	b662      	cpsie	i
 8007350:	60bb      	str	r3, [r7, #8]
}
 8007352:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007354:	bf00      	nop
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0fc      	beq.n	8007356 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000000c 	.word	0x2000000c

08007370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007370:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <pxCurrentTCBConst2>)
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737a:	f380 8809 	msr	PSP, r0
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8811 	msr	BASEPRI, r0
 800738a:	4770      	bx	lr
 800738c:	f3af 8000 	nop.w

08007390 <pxCurrentTCBConst2>:
 8007390:	20004c80 	.word	0x20004c80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007398:	4808      	ldr	r0, [pc, #32]	@ (80073bc <prvPortStartFirstTask+0x24>)
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	6800      	ldr	r0, [r0, #0]
 800739e:	f380 8808 	msr	MSP, r0
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f380 8814 	msr	CONTROL, r0
 80073aa:	b662      	cpsie	i
 80073ac:	b661      	cpsie	f
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	df00      	svc	0
 80073b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ba:	bf00      	nop
 80073bc:	e000ed08 	.word	0xe000ed08

080073c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073c6:	4b37      	ldr	r3, [pc, #220]	@ (80074a4 <xPortStartScheduler+0xe4>)
 80073c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	22ff      	movs	r2, #255	@ 0xff
 80073d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	4b2f      	ldr	r3, [pc, #188]	@ (80074a8 <xPortStartScheduler+0xe8>)
 80073ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ee:	4b2f      	ldr	r3, [pc, #188]	@ (80074ac <xPortStartScheduler+0xec>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073f4:	e009      	b.n	800740a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073f6:	4b2d      	ldr	r3, [pc, #180]	@ (80074ac <xPortStartScheduler+0xec>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4a2b      	ldr	r2, [pc, #172]	@ (80074ac <xPortStartScheduler+0xec>)
 80073fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007412:	2b80      	cmp	r3, #128	@ 0x80
 8007414:	d0ef      	beq.n	80073f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007416:	4b25      	ldr	r3, [pc, #148]	@ (80074ac <xPortStartScheduler+0xec>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1c3 0307 	rsb	r3, r3, #7
 800741e:	2b04      	cmp	r3, #4
 8007420:	d00d      	beq.n	800743e <xPortStartScheduler+0x7e>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	60bb      	str	r3, [r7, #8]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800743e:	4b1b      	ldr	r3, [pc, #108]	@ (80074ac <xPortStartScheduler+0xec>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	4a19      	ldr	r2, [pc, #100]	@ (80074ac <xPortStartScheduler+0xec>)
 8007446:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007448:	4b18      	ldr	r3, [pc, #96]	@ (80074ac <xPortStartScheduler+0xec>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007450:	4a16      	ldr	r2, [pc, #88]	@ (80074ac <xPortStartScheduler+0xec>)
 8007452:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800745c:	4b14      	ldr	r3, [pc, #80]	@ (80074b0 <xPortStartScheduler+0xf0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a13      	ldr	r2, [pc, #76]	@ (80074b0 <xPortStartScheduler+0xf0>)
 8007462:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007466:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007468:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <xPortStartScheduler+0xf0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a10      	ldr	r2, [pc, #64]	@ (80074b0 <xPortStartScheduler+0xf0>)
 800746e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007472:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007474:	f000 f8dc 	bl	8007630 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007478:	4b0e      	ldr	r3, [pc, #56]	@ (80074b4 <xPortStartScheduler+0xf4>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800747e:	f000 f8fb 	bl	8007678 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007482:	4b0d      	ldr	r3, [pc, #52]	@ (80074b8 <xPortStartScheduler+0xf8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a0c      	ldr	r2, [pc, #48]	@ (80074b8 <xPortStartScheduler+0xf8>)
 8007488:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800748c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800748e:	f7ff ff83 	bl	8007398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007492:	f7fe fed7 	bl	8006244 <vTaskSwitchContext>
	prvTaskExitError();
 8007496:	f7ff ff39 	bl	800730c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	e000e400 	.word	0xe000e400
 80074a8:	200052ac 	.word	0x200052ac
 80074ac:	200052b0 	.word	0x200052b0
 80074b0:	e000ed20 	.word	0xe000ed20
 80074b4:	2000000c 	.word	0x2000000c
 80074b8:	e000ef34 	.word	0xe000ef34

080074bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	b672      	cpsid	i
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	b662      	cpsie	i
 80074d6:	607b      	str	r3, [r7, #4]
}
 80074d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074da:	4b11      	ldr	r3, [pc, #68]	@ (8007520 <vPortEnterCritical+0x64>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3301      	adds	r3, #1
 80074e0:	4a0f      	ldr	r2, [pc, #60]	@ (8007520 <vPortEnterCritical+0x64>)
 80074e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007520 <vPortEnterCritical+0x64>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d112      	bne.n	8007512 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <vPortEnterCritical+0x68>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <vPortEnterCritical+0x56>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	b672      	cpsid	i
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	b662      	cpsie	i
 800750a:	603b      	str	r3, [r7, #0]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <vPortEnterCritical+0x52>
	}
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	2000000c 	.word	0x2000000c
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800752e:	4b13      	ldr	r3, [pc, #76]	@ (800757c <vPortExitCritical+0x54>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10d      	bne.n	8007552 <vPortExitCritical+0x2a>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	b672      	cpsid	i
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	b662      	cpsie	i
 800754a:	607b      	str	r3, [r7, #4]
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	e7fd      	b.n	800754e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007552:	4b0a      	ldr	r3, [pc, #40]	@ (800757c <vPortExitCritical+0x54>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3b01      	subs	r3, #1
 8007558:	4a08      	ldr	r2, [pc, #32]	@ (800757c <vPortExitCritical+0x54>)
 800755a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800755c:	4b07      	ldr	r3, [pc, #28]	@ (800757c <vPortExitCritical+0x54>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <vPortExitCritical+0x48>
 8007564:	2300      	movs	r3, #0
 8007566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f383 8811 	msr	BASEPRI, r3
}
 800756e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	2000000c 	.word	0x2000000c

08007580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007580:	f3ef 8009 	mrs	r0, PSP
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <pxCurrentTCBConst>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	f01e 0f10 	tst.w	lr, #16
 8007590:	bf08      	it	eq
 8007592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	6010      	str	r0, [r2, #0]
 800759c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80075a4:	b672      	cpsid	i
 80075a6:	f380 8811 	msr	BASEPRI, r0
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	b662      	cpsie	i
 80075b4:	f7fe fe46 	bl	8006244 <vTaskSwitchContext>
 80075b8:	f04f 0000 	mov.w	r0, #0
 80075bc:	f380 8811 	msr	BASEPRI, r0
 80075c0:	bc09      	pop	{r0, r3}
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f01e 0f10 	tst.w	lr, #16
 80075ce:	bf08      	it	eq
 80075d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075d4:	f380 8809 	msr	PSP, r0
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop

080075e0 <pxCurrentTCBConst>:
 80075e0:	20004c80 	.word	0x20004c80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	b672      	cpsid	i
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	b662      	cpsie	i
 8007602:	607b      	str	r3, [r7, #4]
}
 8007604:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007606:	f7fe fd61 	bl	80060cc <xTaskIncrementTick>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007610:	4b06      	ldr	r3, [pc, #24]	@ (800762c <xPortSysTickHandler+0x44>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	2300      	movs	r3, #0
 800761a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f383 8811 	msr	BASEPRI, r3
}
 8007622:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007634:	4b0b      	ldr	r3, [pc, #44]	@ (8007664 <vPortSetupTimerInterrupt+0x34>)
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <vPortSetupTimerInterrupt+0x38>)
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <vPortSetupTimerInterrupt+0x3c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a0a      	ldr	r2, [pc, #40]	@ (8007670 <vPortSetupTimerInterrupt+0x40>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	099b      	lsrs	r3, r3, #6
 800764c:	4a09      	ldr	r2, [pc, #36]	@ (8007674 <vPortSetupTimerInterrupt+0x44>)
 800764e:	3b01      	subs	r3, #1
 8007650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007652:	4b04      	ldr	r3, [pc, #16]	@ (8007664 <vPortSetupTimerInterrupt+0x34>)
 8007654:	2207      	movs	r2, #7
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	e000e010 	.word	0xe000e010
 8007668:	e000e018 	.word	0xe000e018
 800766c:	20000000 	.word	0x20000000
 8007670:	10624dd3 	.word	0x10624dd3
 8007674:	e000e014 	.word	0xe000e014

08007678 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007678:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007688 <vPortEnableVFP+0x10>
 800767c:	6801      	ldr	r1, [r0, #0]
 800767e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007682:	6001      	str	r1, [r0, #0]
 8007684:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007686:	bf00      	nop
 8007688:	e000ed88 	.word	0xe000ed88

0800768c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007692:	f3ef 8305 	mrs	r3, IPSR
 8007696:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b0f      	cmp	r3, #15
 800769c:	d917      	bls.n	80076ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800769e:	4a1a      	ldr	r2, [pc, #104]	@ (8007708 <vPortValidateInterruptPriority+0x7c>)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076a8:	4b18      	ldr	r3, [pc, #96]	@ (800770c <vPortValidateInterruptPriority+0x80>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	7afa      	ldrb	r2, [r7, #11]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d20d      	bcs.n	80076ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	b672      	cpsid	i
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	b662      	cpsie	i
 80076c6:	607b      	str	r3, [r7, #4]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076ce:	4b10      	ldr	r3, [pc, #64]	@ (8007710 <vPortValidateInterruptPriority+0x84>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007714 <vPortValidateInterruptPriority+0x88>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d90d      	bls.n	80076fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	b672      	cpsid	i
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	b662      	cpsie	i
 80076f2:	603b      	str	r3, [r7, #0]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <vPortValidateInterruptPriority+0x6a>
	}
 80076fa:	bf00      	nop
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	e000e3f0 	.word	0xe000e3f0
 800770c:	200052ac 	.word	0x200052ac
 8007710:	e000ed0c 	.word	0xe000ed0c
 8007714:	200052b0 	.word	0x200052b0

08007718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08a      	sub	sp, #40	@ 0x28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007724:	f7fe fc14 	bl	8005f50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007728:	4b5d      	ldr	r3, [pc, #372]	@ (80078a0 <pvPortMalloc+0x188>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007730:	f000 f920 	bl	8007974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007734:	4b5b      	ldr	r3, [pc, #364]	@ (80078a4 <pvPortMalloc+0x18c>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	f040 8094 	bne.w	800786a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d020      	beq.n	800778a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007748:	2208      	movs	r2, #8
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b00      	cmp	r3, #0
 8007758:	d017      	beq.n	800778a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f023 0307 	bic.w	r3, r3, #7
 8007760:	3308      	adds	r3, #8
 8007762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <pvPortMalloc+0x72>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	b672      	cpsid	i
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	b662      	cpsie	i
 8007782:	617b      	str	r3, [r7, #20]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d06c      	beq.n	800786a <pvPortMalloc+0x152>
 8007790:	4b45      	ldr	r3, [pc, #276]	@ (80078a8 <pvPortMalloc+0x190>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d867      	bhi.n	800786a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800779a:	4b44      	ldr	r3, [pc, #272]	@ (80078ac <pvPortMalloc+0x194>)
 800779c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800779e:	4b43      	ldr	r3, [pc, #268]	@ (80078ac <pvPortMalloc+0x194>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077a4:	e004      	b.n	80077b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d903      	bls.n	80077c2 <pvPortMalloc+0xaa>
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f1      	bne.n	80077a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077c2:	4b37      	ldr	r3, [pc, #220]	@ (80078a0 <pvPortMalloc+0x188>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d04e      	beq.n	800786a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2208      	movs	r2, #8
 80077d2:	4413      	add	r3, r2
 80077d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	1ad2      	subs	r2, r2, r3
 80077e6:	2308      	movs	r3, #8
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d922      	bls.n	8007834 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <pvPortMalloc+0x104>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	b672      	cpsid	i
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	b662      	cpsie	i
 8007814:	613b      	str	r3, [r7, #16]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	1ad2      	subs	r2, r2, r3
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800782e:	69b8      	ldr	r0, [r7, #24]
 8007830:	f000 f902 	bl	8007a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007834:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <pvPortMalloc+0x190>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	4a1a      	ldr	r2, [pc, #104]	@ (80078a8 <pvPortMalloc+0x190>)
 8007840:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007842:	4b19      	ldr	r3, [pc, #100]	@ (80078a8 <pvPortMalloc+0x190>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b1a      	ldr	r3, [pc, #104]	@ (80078b0 <pvPortMalloc+0x198>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d203      	bcs.n	8007856 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <pvPortMalloc+0x190>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a17      	ldr	r2, [pc, #92]	@ (80078b0 <pvPortMalloc+0x198>)
 8007854:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	4b12      	ldr	r3, [pc, #72]	@ (80078a4 <pvPortMalloc+0x18c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	431a      	orrs	r2, r3
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800786a:	f7fe fb7f 	bl	8005f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00d      	beq.n	8007894 <pvPortMalloc+0x17c>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787c:	b672      	cpsid	i
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	b662      	cpsie	i
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <pvPortMalloc+0x178>
	return pvReturn;
 8007894:	69fb      	ldr	r3, [r7, #28]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3728      	adds	r7, #40	@ 0x28
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20008ebc 	.word	0x20008ebc
 80078a4:	20008ec8 	.word	0x20008ec8
 80078a8:	20008ec0 	.word	0x20008ec0
 80078ac:	20008eb4 	.word	0x20008eb4
 80078b0:	20008ec4 	.word	0x20008ec4

080078b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d04e      	beq.n	8007964 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078c6:	2308      	movs	r3, #8
 80078c8:	425b      	negs	r3, r3
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	4413      	add	r3, r2
 80078ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	4b24      	ldr	r3, [pc, #144]	@ (800796c <vPortFree+0xb8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4013      	ands	r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10d      	bne.n	80078fe <vPortFree+0x4a>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	b672      	cpsid	i
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	b662      	cpsie	i
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00d      	beq.n	8007922 <vPortFree+0x6e>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	b672      	cpsid	i
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	b662      	cpsie	i
 800791a:	60bb      	str	r3, [r7, #8]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	4b11      	ldr	r3, [pc, #68]	@ (800796c <vPortFree+0xb8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d019      	beq.n	8007964 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d115      	bne.n	8007964 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	4b0b      	ldr	r3, [pc, #44]	@ (800796c <vPortFree+0xb8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	43db      	mvns	r3, r3
 8007942:	401a      	ands	r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007948:	f7fe fb02 	bl	8005f50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <vPortFree+0xbc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4413      	add	r3, r2
 8007956:	4a06      	ldr	r2, [pc, #24]	@ (8007970 <vPortFree+0xbc>)
 8007958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800795a:	6938      	ldr	r0, [r7, #16]
 800795c:	f000 f86c 	bl	8007a38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007960:	f7fe fb04 	bl	8005f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007964:	bf00      	nop
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20008ec8 	.word	0x20008ec8
 8007970:	20008ec0 	.word	0x20008ec0

08007974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800797a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800797e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007980:	4b27      	ldr	r3, [pc, #156]	@ (8007a20 <prvHeapInit+0xac>)
 8007982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3307      	adds	r3, #7
 8007992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0307 	bic.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007a20 <prvHeapInit+0xac>)
 80079a4:	4413      	add	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007a24 <prvHeapInit+0xb0>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a24 <prvHeapInit+0xb0>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4413      	add	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079c0:	2208      	movs	r2, #8
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0307 	bic.w	r3, r3, #7
 80079ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a15      	ldr	r2, [pc, #84]	@ (8007a28 <prvHeapInit+0xb4>)
 80079d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079d6:	4b14      	ldr	r3, [pc, #80]	@ (8007a28 <prvHeapInit+0xb4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079de:	4b12      	ldr	r3, [pc, #72]	@ (8007a28 <prvHeapInit+0xb4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <prvHeapInit+0xb4>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4a0a      	ldr	r2, [pc, #40]	@ (8007a2c <prvHeapInit+0xb8>)
 8007a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	4a09      	ldr	r2, [pc, #36]	@ (8007a30 <prvHeapInit+0xbc>)
 8007a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a0c:	4b09      	ldr	r3, [pc, #36]	@ (8007a34 <prvHeapInit+0xc0>)
 8007a0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a12:	601a      	str	r2, [r3, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	200052b4 	.word	0x200052b4
 8007a24:	20008eb4 	.word	0x20008eb4
 8007a28:	20008ebc 	.word	0x20008ebc
 8007a2c:	20008ec4 	.word	0x20008ec4
 8007a30:	20008ec0 	.word	0x20008ec0
 8007a34:	20008ec8 	.word	0x20008ec8

08007a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a40:	4b28      	ldr	r3, [pc, #160]	@ (8007ae4 <prvInsertBlockIntoFreeList+0xac>)
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e002      	b.n	8007a4c <prvInsertBlockIntoFreeList+0x14>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d8f7      	bhi.n	8007a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4413      	add	r3, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d108      	bne.n	8007a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	441a      	add	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d118      	bne.n	8007ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	4b15      	ldr	r3, [pc, #84]	@ (8007ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d00d      	beq.n	8007ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e008      	b.n	8007ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e003      	b.n	8007ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d002      	beq.n	8007ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20008eb4 	.word	0x20008eb4
 8007ae8:	20008ebc 	.word	0x20008ebc

08007aec <std>:
 8007aec:	2300      	movs	r3, #0
 8007aee:	b510      	push	{r4, lr}
 8007af0:	4604      	mov	r4, r0
 8007af2:	e9c0 3300 	strd	r3, r3, [r0]
 8007af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007afa:	6083      	str	r3, [r0, #8]
 8007afc:	8181      	strh	r1, [r0, #12]
 8007afe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b00:	81c2      	strh	r2, [r0, #14]
 8007b02:	6183      	str	r3, [r0, #24]
 8007b04:	4619      	mov	r1, r3
 8007b06:	2208      	movs	r2, #8
 8007b08:	305c      	adds	r0, #92	@ 0x5c
 8007b0a:	f000 fa01 	bl	8007f10 <memset>
 8007b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b44 <std+0x58>)
 8007b10:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b12:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <std+0x5c>)
 8007b14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b16:	4b0d      	ldr	r3, [pc, #52]	@ (8007b4c <std+0x60>)
 8007b18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b50 <std+0x64>)
 8007b1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b54 <std+0x68>)
 8007b20:	6224      	str	r4, [r4, #32]
 8007b22:	429c      	cmp	r4, r3
 8007b24:	d006      	beq.n	8007b34 <std+0x48>
 8007b26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b2a:	4294      	cmp	r4, r2
 8007b2c:	d002      	beq.n	8007b34 <std+0x48>
 8007b2e:	33d0      	adds	r3, #208	@ 0xd0
 8007b30:	429c      	cmp	r4, r3
 8007b32:	d105      	bne.n	8007b40 <std+0x54>
 8007b34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b3c:	f000 ba60 	b.w	8008000 <__retarget_lock_init_recursive>
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	bf00      	nop
 8007b44:	08007d61 	.word	0x08007d61
 8007b48:	08007d83 	.word	0x08007d83
 8007b4c:	08007dbb 	.word	0x08007dbb
 8007b50:	08007ddf 	.word	0x08007ddf
 8007b54:	20008ecc 	.word	0x20008ecc

08007b58 <stdio_exit_handler>:
 8007b58:	4a02      	ldr	r2, [pc, #8]	@ (8007b64 <stdio_exit_handler+0xc>)
 8007b5a:	4903      	ldr	r1, [pc, #12]	@ (8007b68 <stdio_exit_handler+0x10>)
 8007b5c:	4803      	ldr	r0, [pc, #12]	@ (8007b6c <stdio_exit_handler+0x14>)
 8007b5e:	f000 b869 	b.w	8007c34 <_fwalk_sglue>
 8007b62:	bf00      	nop
 8007b64:	20000010 	.word	0x20000010
 8007b68:	080088bd 	.word	0x080088bd
 8007b6c:	20000020 	.word	0x20000020

08007b70 <cleanup_stdio>:
 8007b70:	6841      	ldr	r1, [r0, #4]
 8007b72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <cleanup_stdio+0x34>)
 8007b74:	4299      	cmp	r1, r3
 8007b76:	b510      	push	{r4, lr}
 8007b78:	4604      	mov	r4, r0
 8007b7a:	d001      	beq.n	8007b80 <cleanup_stdio+0x10>
 8007b7c:	f000 fe9e 	bl	80088bc <_fflush_r>
 8007b80:	68a1      	ldr	r1, [r4, #8]
 8007b82:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <cleanup_stdio+0x38>)
 8007b84:	4299      	cmp	r1, r3
 8007b86:	d002      	beq.n	8007b8e <cleanup_stdio+0x1e>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 fe97 	bl	80088bc <_fflush_r>
 8007b8e:	68e1      	ldr	r1, [r4, #12]
 8007b90:	4b06      	ldr	r3, [pc, #24]	@ (8007bac <cleanup_stdio+0x3c>)
 8007b92:	4299      	cmp	r1, r3
 8007b94:	d004      	beq.n	8007ba0 <cleanup_stdio+0x30>
 8007b96:	4620      	mov	r0, r4
 8007b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b9c:	f000 be8e 	b.w	80088bc <_fflush_r>
 8007ba0:	bd10      	pop	{r4, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20008ecc 	.word	0x20008ecc
 8007ba8:	20008f34 	.word	0x20008f34
 8007bac:	20008f9c 	.word	0x20008f9c

08007bb0 <global_stdio_init.part.0>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007be0 <global_stdio_init.part.0+0x30>)
 8007bb4:	4c0b      	ldr	r4, [pc, #44]	@ (8007be4 <global_stdio_init.part.0+0x34>)
 8007bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8007be8 <global_stdio_init.part.0+0x38>)
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	4620      	mov	r0, r4
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	f7ff ff94 	bl	8007aec <std>
 8007bc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007bc8:	2201      	movs	r2, #1
 8007bca:	2109      	movs	r1, #9
 8007bcc:	f7ff ff8e 	bl	8007aec <std>
 8007bd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bda:	2112      	movs	r1, #18
 8007bdc:	f7ff bf86 	b.w	8007aec <std>
 8007be0:	20009004 	.word	0x20009004
 8007be4:	20008ecc 	.word	0x20008ecc
 8007be8:	08007b59 	.word	0x08007b59

08007bec <__sfp_lock_acquire>:
 8007bec:	4801      	ldr	r0, [pc, #4]	@ (8007bf4 <__sfp_lock_acquire+0x8>)
 8007bee:	f000 ba08 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	2000900d 	.word	0x2000900d

08007bf8 <__sfp_lock_release>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	@ (8007c00 <__sfp_lock_release+0x8>)
 8007bfa:	f000 ba03 	b.w	8008004 <__retarget_lock_release_recursive>
 8007bfe:	bf00      	nop
 8007c00:	2000900d 	.word	0x2000900d

08007c04 <__sinit>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	4604      	mov	r4, r0
 8007c08:	f7ff fff0 	bl	8007bec <__sfp_lock_acquire>
 8007c0c:	6a23      	ldr	r3, [r4, #32]
 8007c0e:	b11b      	cbz	r3, 8007c18 <__sinit+0x14>
 8007c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c14:	f7ff bff0 	b.w	8007bf8 <__sfp_lock_release>
 8007c18:	4b04      	ldr	r3, [pc, #16]	@ (8007c2c <__sinit+0x28>)
 8007c1a:	6223      	str	r3, [r4, #32]
 8007c1c:	4b04      	ldr	r3, [pc, #16]	@ (8007c30 <__sinit+0x2c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1f5      	bne.n	8007c10 <__sinit+0xc>
 8007c24:	f7ff ffc4 	bl	8007bb0 <global_stdio_init.part.0>
 8007c28:	e7f2      	b.n	8007c10 <__sinit+0xc>
 8007c2a:	bf00      	nop
 8007c2c:	08007b71 	.word	0x08007b71
 8007c30:	20009004 	.word	0x20009004

08007c34 <_fwalk_sglue>:
 8007c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c38:	4607      	mov	r7, r0
 8007c3a:	4688      	mov	r8, r1
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	2600      	movs	r6, #0
 8007c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c44:	f1b9 0901 	subs.w	r9, r9, #1
 8007c48:	d505      	bpl.n	8007c56 <_fwalk_sglue+0x22>
 8007c4a:	6824      	ldr	r4, [r4, #0]
 8007c4c:	2c00      	cmp	r4, #0
 8007c4e:	d1f7      	bne.n	8007c40 <_fwalk_sglue+0xc>
 8007c50:	4630      	mov	r0, r6
 8007c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c56:	89ab      	ldrh	r3, [r5, #12]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d907      	bls.n	8007c6c <_fwalk_sglue+0x38>
 8007c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c60:	3301      	adds	r3, #1
 8007c62:	d003      	beq.n	8007c6c <_fwalk_sglue+0x38>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4638      	mov	r0, r7
 8007c68:	47c0      	blx	r8
 8007c6a:	4306      	orrs	r6, r0
 8007c6c:	3568      	adds	r5, #104	@ 0x68
 8007c6e:	e7e9      	b.n	8007c44 <_fwalk_sglue+0x10>

08007c70 <iprintf>:
 8007c70:	b40f      	push	{r0, r1, r2, r3}
 8007c72:	b507      	push	{r0, r1, r2, lr}
 8007c74:	4906      	ldr	r1, [pc, #24]	@ (8007c90 <iprintf+0x20>)
 8007c76:	ab04      	add	r3, sp, #16
 8007c78:	6808      	ldr	r0, [r1, #0]
 8007c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7e:	6881      	ldr	r1, [r0, #8]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	f000 faf1 	bl	8008268 <_vfiprintf_r>
 8007c86:	b003      	add	sp, #12
 8007c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c8c:	b004      	add	sp, #16
 8007c8e:	4770      	bx	lr
 8007c90:	2000001c 	.word	0x2000001c

08007c94 <putchar>:
 8007c94:	4b02      	ldr	r3, [pc, #8]	@ (8007ca0 <putchar+0xc>)
 8007c96:	4601      	mov	r1, r0
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	6882      	ldr	r2, [r0, #8]
 8007c9c:	f000 be98 	b.w	80089d0 <_putc_r>
 8007ca0:	2000001c 	.word	0x2000001c

08007ca4 <_puts_r>:
 8007ca4:	6a03      	ldr	r3, [r0, #32]
 8007ca6:	b570      	push	{r4, r5, r6, lr}
 8007ca8:	6884      	ldr	r4, [r0, #8]
 8007caa:	4605      	mov	r5, r0
 8007cac:	460e      	mov	r6, r1
 8007cae:	b90b      	cbnz	r3, 8007cb4 <_puts_r+0x10>
 8007cb0:	f7ff ffa8 	bl	8007c04 <__sinit>
 8007cb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb6:	07db      	lsls	r3, r3, #31
 8007cb8:	d405      	bmi.n	8007cc6 <_puts_r+0x22>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	0598      	lsls	r0, r3, #22
 8007cbe:	d402      	bmi.n	8007cc6 <_puts_r+0x22>
 8007cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc2:	f000 f99e 	bl	8008002 <__retarget_lock_acquire_recursive>
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	0719      	lsls	r1, r3, #28
 8007cca:	d502      	bpl.n	8007cd2 <_puts_r+0x2e>
 8007ccc:	6923      	ldr	r3, [r4, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d135      	bne.n	8007d3e <_puts_r+0x9a>
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f000 f8c5 	bl	8007e64 <__swsetup_r>
 8007cda:	b380      	cbz	r0, 8007d3e <_puts_r+0x9a>
 8007cdc:	f04f 35ff 	mov.w	r5, #4294967295
 8007ce0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d405      	bmi.n	8007cf2 <_puts_r+0x4e>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d402      	bmi.n	8007cf2 <_puts_r+0x4e>
 8007cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cee:	f000 f989 	bl	8008004 <__retarget_lock_release_recursive>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da04      	bge.n	8007d04 <_puts_r+0x60>
 8007cfa:	69a2      	ldr	r2, [r4, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	dc17      	bgt.n	8007d30 <_puts_r+0x8c>
 8007d00:	290a      	cmp	r1, #10
 8007d02:	d015      	beq.n	8007d30 <_puts_r+0x8c>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	6022      	str	r2, [r4, #0]
 8007d0a:	7019      	strb	r1, [r3, #0]
 8007d0c:	68a3      	ldr	r3, [r4, #8]
 8007d0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d12:	3b01      	subs	r3, #1
 8007d14:	60a3      	str	r3, [r4, #8]
 8007d16:	2900      	cmp	r1, #0
 8007d18:	d1ed      	bne.n	8007cf6 <_puts_r+0x52>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da11      	bge.n	8007d42 <_puts_r+0x9e>
 8007d1e:	4622      	mov	r2, r4
 8007d20:	210a      	movs	r1, #10
 8007d22:	4628      	mov	r0, r5
 8007d24:	f000 f85f 	bl	8007de6 <__swbuf_r>
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d0d7      	beq.n	8007cdc <_puts_r+0x38>
 8007d2c:	250a      	movs	r5, #10
 8007d2e:	e7d7      	b.n	8007ce0 <_puts_r+0x3c>
 8007d30:	4622      	mov	r2, r4
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 f857 	bl	8007de6 <__swbuf_r>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d1e7      	bne.n	8007d0c <_puts_r+0x68>
 8007d3c:	e7ce      	b.n	8007cdc <_puts_r+0x38>
 8007d3e:	3e01      	subs	r6, #1
 8007d40:	e7e4      	b.n	8007d0c <_puts_r+0x68>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	6022      	str	r2, [r4, #0]
 8007d48:	220a      	movs	r2, #10
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e7ee      	b.n	8007d2c <_puts_r+0x88>
	...

08007d50 <puts>:
 8007d50:	4b02      	ldr	r3, [pc, #8]	@ (8007d5c <puts+0xc>)
 8007d52:	4601      	mov	r1, r0
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	f7ff bfa5 	b.w	8007ca4 <_puts_r>
 8007d5a:	bf00      	nop
 8007d5c:	2000001c 	.word	0x2000001c

08007d60 <__sread>:
 8007d60:	b510      	push	{r4, lr}
 8007d62:	460c      	mov	r4, r1
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	f000 f8fc 	bl	8007f64 <_read_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	bfab      	itete	ge
 8007d70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d72:	89a3      	ldrhlt	r3, [r4, #12]
 8007d74:	181b      	addge	r3, r3, r0
 8007d76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d7a:	bfac      	ite	ge
 8007d7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d7e:	81a3      	strhlt	r3, [r4, #12]
 8007d80:	bd10      	pop	{r4, pc}

08007d82 <__swrite>:
 8007d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d86:	461f      	mov	r7, r3
 8007d88:	898b      	ldrh	r3, [r1, #12]
 8007d8a:	05db      	lsls	r3, r3, #23
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	4616      	mov	r6, r2
 8007d92:	d505      	bpl.n	8007da0 <__swrite+0x1e>
 8007d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d98:	2302      	movs	r3, #2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f000 f8d0 	bl	8007f40 <_lseek_r>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	4632      	mov	r2, r6
 8007dae:	463b      	mov	r3, r7
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db6:	f000 b8e7 	b.w	8007f88 <_write_r>

08007dba <__sseek>:
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc2:	f000 f8bd 	bl	8007f40 <_lseek_r>
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	bf15      	itete	ne
 8007dcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dd6:	81a3      	strheq	r3, [r4, #12]
 8007dd8:	bf18      	it	ne
 8007dda:	81a3      	strhne	r3, [r4, #12]
 8007ddc:	bd10      	pop	{r4, pc}

08007dde <__sclose>:
 8007dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de2:	f000 b89d 	b.w	8007f20 <_close_r>

08007de6 <__swbuf_r>:
 8007de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de8:	460e      	mov	r6, r1
 8007dea:	4614      	mov	r4, r2
 8007dec:	4605      	mov	r5, r0
 8007dee:	b118      	cbz	r0, 8007df8 <__swbuf_r+0x12>
 8007df0:	6a03      	ldr	r3, [r0, #32]
 8007df2:	b90b      	cbnz	r3, 8007df8 <__swbuf_r+0x12>
 8007df4:	f7ff ff06 	bl	8007c04 <__sinit>
 8007df8:	69a3      	ldr	r3, [r4, #24]
 8007dfa:	60a3      	str	r3, [r4, #8]
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	071a      	lsls	r2, r3, #28
 8007e00:	d501      	bpl.n	8007e06 <__swbuf_r+0x20>
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	b943      	cbnz	r3, 8007e18 <__swbuf_r+0x32>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f000 f82b 	bl	8007e64 <__swsetup_r>
 8007e0e:	b118      	cbz	r0, 8007e18 <__swbuf_r+0x32>
 8007e10:	f04f 37ff 	mov.w	r7, #4294967295
 8007e14:	4638      	mov	r0, r7
 8007e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	6922      	ldr	r2, [r4, #16]
 8007e1c:	1a98      	subs	r0, r3, r2
 8007e1e:	6963      	ldr	r3, [r4, #20]
 8007e20:	b2f6      	uxtb	r6, r6
 8007e22:	4283      	cmp	r3, r0
 8007e24:	4637      	mov	r7, r6
 8007e26:	dc05      	bgt.n	8007e34 <__swbuf_r+0x4e>
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f000 fd46 	bl	80088bc <_fflush_r>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d1ed      	bne.n	8007e10 <__swbuf_r+0x2a>
 8007e34:	68a3      	ldr	r3, [r4, #8]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	6022      	str	r2, [r4, #0]
 8007e40:	701e      	strb	r6, [r3, #0]
 8007e42:	6962      	ldr	r2, [r4, #20]
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d004      	beq.n	8007e54 <__swbuf_r+0x6e>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	07db      	lsls	r3, r3, #31
 8007e4e:	d5e1      	bpl.n	8007e14 <__swbuf_r+0x2e>
 8007e50:	2e0a      	cmp	r6, #10
 8007e52:	d1df      	bne.n	8007e14 <__swbuf_r+0x2e>
 8007e54:	4621      	mov	r1, r4
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 fd30 	bl	80088bc <_fflush_r>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d0d9      	beq.n	8007e14 <__swbuf_r+0x2e>
 8007e60:	e7d6      	b.n	8007e10 <__swbuf_r+0x2a>
	...

08007e64 <__swsetup_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4b29      	ldr	r3, [pc, #164]	@ (8007f0c <__swsetup_r+0xa8>)
 8007e68:	4605      	mov	r5, r0
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	b118      	cbz	r0, 8007e78 <__swsetup_r+0x14>
 8007e70:	6a03      	ldr	r3, [r0, #32]
 8007e72:	b90b      	cbnz	r3, 8007e78 <__swsetup_r+0x14>
 8007e74:	f7ff fec6 	bl	8007c04 <__sinit>
 8007e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7c:	0719      	lsls	r1, r3, #28
 8007e7e:	d422      	bmi.n	8007ec6 <__swsetup_r+0x62>
 8007e80:	06da      	lsls	r2, r3, #27
 8007e82:	d407      	bmi.n	8007e94 <__swsetup_r+0x30>
 8007e84:	2209      	movs	r2, #9
 8007e86:	602a      	str	r2, [r5, #0]
 8007e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e92:	e033      	b.n	8007efc <__swsetup_r+0x98>
 8007e94:	0758      	lsls	r0, r3, #29
 8007e96:	d512      	bpl.n	8007ebe <__swsetup_r+0x5a>
 8007e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e9a:	b141      	cbz	r1, 8007eae <__swsetup_r+0x4a>
 8007e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	d002      	beq.n	8007eaa <__swsetup_r+0x46>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 f8bd 	bl	8008024 <_free_r>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6063      	str	r3, [r4, #4]
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f043 0308 	orr.w	r3, r3, #8
 8007ec4:	81a3      	strh	r3, [r4, #12]
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	b94b      	cbnz	r3, 8007ede <__swsetup_r+0x7a>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed4:	d003      	beq.n	8007ede <__swsetup_r+0x7a>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 fd3d 	bl	8008958 <__smakebuf_r>
 8007ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee2:	f013 0201 	ands.w	r2, r3, #1
 8007ee6:	d00a      	beq.n	8007efe <__swsetup_r+0x9a>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	60a2      	str	r2, [r4, #8]
 8007eec:	6962      	ldr	r2, [r4, #20]
 8007eee:	4252      	negs	r2, r2
 8007ef0:	61a2      	str	r2, [r4, #24]
 8007ef2:	6922      	ldr	r2, [r4, #16]
 8007ef4:	b942      	cbnz	r2, 8007f08 <__swsetup_r+0xa4>
 8007ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007efa:	d1c5      	bne.n	8007e88 <__swsetup_r+0x24>
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	0799      	lsls	r1, r3, #30
 8007f00:	bf58      	it	pl
 8007f02:	6962      	ldrpl	r2, [r4, #20]
 8007f04:	60a2      	str	r2, [r4, #8]
 8007f06:	e7f4      	b.n	8007ef2 <__swsetup_r+0x8e>
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e7f7      	b.n	8007efc <__swsetup_r+0x98>
 8007f0c:	2000001c 	.word	0x2000001c

08007f10 <memset>:
 8007f10:	4402      	add	r2, r0
 8007f12:	4603      	mov	r3, r0
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d100      	bne.n	8007f1a <memset+0xa>
 8007f18:	4770      	bx	lr
 8007f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1e:	e7f9      	b.n	8007f14 <memset+0x4>

08007f20 <_close_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	@ (8007f3c <_close_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7f9 fa03 	bl	8001336 <_close>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_close_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_close_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20009008 	.word	0x20009008

08007f40 <_lseek_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d07      	ldr	r5, [pc, #28]	@ (8007f60 <_lseek_r+0x20>)
 8007f44:	4604      	mov	r4, r0
 8007f46:	4608      	mov	r0, r1
 8007f48:	4611      	mov	r1, r2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7f9 fa18 	bl	8001384 <_lseek>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_lseek_r+0x1e>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_lseek_r+0x1e>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	20009008 	.word	0x20009008

08007f64 <_read_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d07      	ldr	r5, [pc, #28]	@ (8007f84 <_read_r+0x20>)
 8007f68:	4604      	mov	r4, r0
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	602a      	str	r2, [r5, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f7f9 f9a6 	bl	80012c4 <_read>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_read_r+0x1e>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_read_r+0x1e>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20009008 	.word	0x20009008

08007f88 <_write_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	@ (8007fa8 <_write_r+0x20>)
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f9 f9b1 	bl	80012fe <_write>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_write_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_write_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	20009008 	.word	0x20009008

08007fac <__errno>:
 8007fac:	4b01      	ldr	r3, [pc, #4]	@ (8007fb4 <__errno+0x8>)
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	2000001c 	.word	0x2000001c

08007fb8 <__libc_init_array>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4d0d      	ldr	r5, [pc, #52]	@ (8007ff0 <__libc_init_array+0x38>)
 8007fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8007ff4 <__libc_init_array+0x3c>)
 8007fbe:	1b64      	subs	r4, r4, r5
 8007fc0:	10a4      	asrs	r4, r4, #2
 8007fc2:	2600      	movs	r6, #0
 8007fc4:	42a6      	cmp	r6, r4
 8007fc6:	d109      	bne.n	8007fdc <__libc_init_array+0x24>
 8007fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff8 <__libc_init_array+0x40>)
 8007fca:	4c0c      	ldr	r4, [pc, #48]	@ (8007ffc <__libc_init_array+0x44>)
 8007fcc:	f000 fd66 	bl	8008a9c <_init>
 8007fd0:	1b64      	subs	r4, r4, r5
 8007fd2:	10a4      	asrs	r4, r4, #2
 8007fd4:	2600      	movs	r6, #0
 8007fd6:	42a6      	cmp	r6, r4
 8007fd8:	d105      	bne.n	8007fe6 <__libc_init_array+0x2e>
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe0:	4798      	blx	r3
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	e7ee      	b.n	8007fc4 <__libc_init_array+0xc>
 8007fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fea:	4798      	blx	r3
 8007fec:	3601      	adds	r6, #1
 8007fee:	e7f2      	b.n	8007fd6 <__libc_init_array+0x1e>
 8007ff0:	08008ca0 	.word	0x08008ca0
 8007ff4:	08008ca0 	.word	0x08008ca0
 8007ff8:	08008ca0 	.word	0x08008ca0
 8007ffc:	08008ca4 	.word	0x08008ca4

08008000 <__retarget_lock_init_recursive>:
 8008000:	4770      	bx	lr

08008002 <__retarget_lock_acquire_recursive>:
 8008002:	4770      	bx	lr

08008004 <__retarget_lock_release_recursive>:
 8008004:	4770      	bx	lr

08008006 <memcpy>:
 8008006:	440a      	add	r2, r1
 8008008:	4291      	cmp	r1, r2
 800800a:	f100 33ff 	add.w	r3, r0, #4294967295
 800800e:	d100      	bne.n	8008012 <memcpy+0xc>
 8008010:	4770      	bx	lr
 8008012:	b510      	push	{r4, lr}
 8008014:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801c:	4291      	cmp	r1, r2
 800801e:	d1f9      	bne.n	8008014 <memcpy+0xe>
 8008020:	bd10      	pop	{r4, pc}
	...

08008024 <_free_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4605      	mov	r5, r0
 8008028:	2900      	cmp	r1, #0
 800802a:	d041      	beq.n	80080b0 <_free_r+0x8c>
 800802c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008030:	1f0c      	subs	r4, r1, #4
 8008032:	2b00      	cmp	r3, #0
 8008034:	bfb8      	it	lt
 8008036:	18e4      	addlt	r4, r4, r3
 8008038:	f000 f8e0 	bl	80081fc <__malloc_lock>
 800803c:	4a1d      	ldr	r2, [pc, #116]	@ (80080b4 <_free_r+0x90>)
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	b933      	cbnz	r3, 8008050 <_free_r+0x2c>
 8008042:	6063      	str	r3, [r4, #4]
 8008044:	6014      	str	r4, [r2, #0]
 8008046:	4628      	mov	r0, r5
 8008048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800804c:	f000 b8dc 	b.w	8008208 <__malloc_unlock>
 8008050:	42a3      	cmp	r3, r4
 8008052:	d908      	bls.n	8008066 <_free_r+0x42>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	1821      	adds	r1, r4, r0
 8008058:	428b      	cmp	r3, r1
 800805a:	bf01      	itttt	eq
 800805c:	6819      	ldreq	r1, [r3, #0]
 800805e:	685b      	ldreq	r3, [r3, #4]
 8008060:	1809      	addeq	r1, r1, r0
 8008062:	6021      	streq	r1, [r4, #0]
 8008064:	e7ed      	b.n	8008042 <_free_r+0x1e>
 8008066:	461a      	mov	r2, r3
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	b10b      	cbz	r3, 8008070 <_free_r+0x4c>
 800806c:	42a3      	cmp	r3, r4
 800806e:	d9fa      	bls.n	8008066 <_free_r+0x42>
 8008070:	6811      	ldr	r1, [r2, #0]
 8008072:	1850      	adds	r0, r2, r1
 8008074:	42a0      	cmp	r0, r4
 8008076:	d10b      	bne.n	8008090 <_free_r+0x6c>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	4401      	add	r1, r0
 800807c:	1850      	adds	r0, r2, r1
 800807e:	4283      	cmp	r3, r0
 8008080:	6011      	str	r1, [r2, #0]
 8008082:	d1e0      	bne.n	8008046 <_free_r+0x22>
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	6053      	str	r3, [r2, #4]
 800808a:	4408      	add	r0, r1
 800808c:	6010      	str	r0, [r2, #0]
 800808e:	e7da      	b.n	8008046 <_free_r+0x22>
 8008090:	d902      	bls.n	8008098 <_free_r+0x74>
 8008092:	230c      	movs	r3, #12
 8008094:	602b      	str	r3, [r5, #0]
 8008096:	e7d6      	b.n	8008046 <_free_r+0x22>
 8008098:	6820      	ldr	r0, [r4, #0]
 800809a:	1821      	adds	r1, r4, r0
 800809c:	428b      	cmp	r3, r1
 800809e:	bf04      	itt	eq
 80080a0:	6819      	ldreq	r1, [r3, #0]
 80080a2:	685b      	ldreq	r3, [r3, #4]
 80080a4:	6063      	str	r3, [r4, #4]
 80080a6:	bf04      	itt	eq
 80080a8:	1809      	addeq	r1, r1, r0
 80080aa:	6021      	streq	r1, [r4, #0]
 80080ac:	6054      	str	r4, [r2, #4]
 80080ae:	e7ca      	b.n	8008046 <_free_r+0x22>
 80080b0:	bd38      	pop	{r3, r4, r5, pc}
 80080b2:	bf00      	nop
 80080b4:	20009014 	.word	0x20009014

080080b8 <sbrk_aligned>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	4e0f      	ldr	r6, [pc, #60]	@ (80080f8 <sbrk_aligned+0x40>)
 80080bc:	460c      	mov	r4, r1
 80080be:	6831      	ldr	r1, [r6, #0]
 80080c0:	4605      	mov	r5, r0
 80080c2:	b911      	cbnz	r1, 80080ca <sbrk_aligned+0x12>
 80080c4:	f000 fcda 	bl	8008a7c <_sbrk_r>
 80080c8:	6030      	str	r0, [r6, #0]
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 fcd5 	bl	8008a7c <_sbrk_r>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	d103      	bne.n	80080de <sbrk_aligned+0x26>
 80080d6:	f04f 34ff 	mov.w	r4, #4294967295
 80080da:	4620      	mov	r0, r4
 80080dc:	bd70      	pop	{r4, r5, r6, pc}
 80080de:	1cc4      	adds	r4, r0, #3
 80080e0:	f024 0403 	bic.w	r4, r4, #3
 80080e4:	42a0      	cmp	r0, r4
 80080e6:	d0f8      	beq.n	80080da <sbrk_aligned+0x22>
 80080e8:	1a21      	subs	r1, r4, r0
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 fcc6 	bl	8008a7c <_sbrk_r>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d1f2      	bne.n	80080da <sbrk_aligned+0x22>
 80080f4:	e7ef      	b.n	80080d6 <sbrk_aligned+0x1e>
 80080f6:	bf00      	nop
 80080f8:	20009010 	.word	0x20009010

080080fc <_malloc_r>:
 80080fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008100:	1ccd      	adds	r5, r1, #3
 8008102:	f025 0503 	bic.w	r5, r5, #3
 8008106:	3508      	adds	r5, #8
 8008108:	2d0c      	cmp	r5, #12
 800810a:	bf38      	it	cc
 800810c:	250c      	movcc	r5, #12
 800810e:	2d00      	cmp	r5, #0
 8008110:	4606      	mov	r6, r0
 8008112:	db01      	blt.n	8008118 <_malloc_r+0x1c>
 8008114:	42a9      	cmp	r1, r5
 8008116:	d904      	bls.n	8008122 <_malloc_r+0x26>
 8008118:	230c      	movs	r3, #12
 800811a:	6033      	str	r3, [r6, #0]
 800811c:	2000      	movs	r0, #0
 800811e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081f8 <_malloc_r+0xfc>
 8008126:	f000 f869 	bl	80081fc <__malloc_lock>
 800812a:	f8d8 3000 	ldr.w	r3, [r8]
 800812e:	461c      	mov	r4, r3
 8008130:	bb44      	cbnz	r4, 8008184 <_malloc_r+0x88>
 8008132:	4629      	mov	r1, r5
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ffbf 	bl	80080b8 <sbrk_aligned>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	4604      	mov	r4, r0
 800813e:	d158      	bne.n	80081f2 <_malloc_r+0xf6>
 8008140:	f8d8 4000 	ldr.w	r4, [r8]
 8008144:	4627      	mov	r7, r4
 8008146:	2f00      	cmp	r7, #0
 8008148:	d143      	bne.n	80081d2 <_malloc_r+0xd6>
 800814a:	2c00      	cmp	r4, #0
 800814c:	d04b      	beq.n	80081e6 <_malloc_r+0xea>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	4639      	mov	r1, r7
 8008152:	4630      	mov	r0, r6
 8008154:	eb04 0903 	add.w	r9, r4, r3
 8008158:	f000 fc90 	bl	8008a7c <_sbrk_r>
 800815c:	4581      	cmp	r9, r0
 800815e:	d142      	bne.n	80081e6 <_malloc_r+0xea>
 8008160:	6821      	ldr	r1, [r4, #0]
 8008162:	1a6d      	subs	r5, r5, r1
 8008164:	4629      	mov	r1, r5
 8008166:	4630      	mov	r0, r6
 8008168:	f7ff ffa6 	bl	80080b8 <sbrk_aligned>
 800816c:	3001      	adds	r0, #1
 800816e:	d03a      	beq.n	80081e6 <_malloc_r+0xea>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	442b      	add	r3, r5
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	f8d8 3000 	ldr.w	r3, [r8]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	bb62      	cbnz	r2, 80081d8 <_malloc_r+0xdc>
 800817e:	f8c8 7000 	str.w	r7, [r8]
 8008182:	e00f      	b.n	80081a4 <_malloc_r+0xa8>
 8008184:	6822      	ldr	r2, [r4, #0]
 8008186:	1b52      	subs	r2, r2, r5
 8008188:	d420      	bmi.n	80081cc <_malloc_r+0xd0>
 800818a:	2a0b      	cmp	r2, #11
 800818c:	d917      	bls.n	80081be <_malloc_r+0xc2>
 800818e:	1961      	adds	r1, r4, r5
 8008190:	42a3      	cmp	r3, r4
 8008192:	6025      	str	r5, [r4, #0]
 8008194:	bf18      	it	ne
 8008196:	6059      	strne	r1, [r3, #4]
 8008198:	6863      	ldr	r3, [r4, #4]
 800819a:	bf08      	it	eq
 800819c:	f8c8 1000 	streq.w	r1, [r8]
 80081a0:	5162      	str	r2, [r4, r5]
 80081a2:	604b      	str	r3, [r1, #4]
 80081a4:	4630      	mov	r0, r6
 80081a6:	f000 f82f 	bl	8008208 <__malloc_unlock>
 80081aa:	f104 000b 	add.w	r0, r4, #11
 80081ae:	1d23      	adds	r3, r4, #4
 80081b0:	f020 0007 	bic.w	r0, r0, #7
 80081b4:	1ac2      	subs	r2, r0, r3
 80081b6:	bf1c      	itt	ne
 80081b8:	1a1b      	subne	r3, r3, r0
 80081ba:	50a3      	strne	r3, [r4, r2]
 80081bc:	e7af      	b.n	800811e <_malloc_r+0x22>
 80081be:	6862      	ldr	r2, [r4, #4]
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	bf0c      	ite	eq
 80081c4:	f8c8 2000 	streq.w	r2, [r8]
 80081c8:	605a      	strne	r2, [r3, #4]
 80081ca:	e7eb      	b.n	80081a4 <_malloc_r+0xa8>
 80081cc:	4623      	mov	r3, r4
 80081ce:	6864      	ldr	r4, [r4, #4]
 80081d0:	e7ae      	b.n	8008130 <_malloc_r+0x34>
 80081d2:	463c      	mov	r4, r7
 80081d4:	687f      	ldr	r7, [r7, #4]
 80081d6:	e7b6      	b.n	8008146 <_malloc_r+0x4a>
 80081d8:	461a      	mov	r2, r3
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	42a3      	cmp	r3, r4
 80081de:	d1fb      	bne.n	80081d8 <_malloc_r+0xdc>
 80081e0:	2300      	movs	r3, #0
 80081e2:	6053      	str	r3, [r2, #4]
 80081e4:	e7de      	b.n	80081a4 <_malloc_r+0xa8>
 80081e6:	230c      	movs	r3, #12
 80081e8:	6033      	str	r3, [r6, #0]
 80081ea:	4630      	mov	r0, r6
 80081ec:	f000 f80c 	bl	8008208 <__malloc_unlock>
 80081f0:	e794      	b.n	800811c <_malloc_r+0x20>
 80081f2:	6005      	str	r5, [r0, #0]
 80081f4:	e7d6      	b.n	80081a4 <_malloc_r+0xa8>
 80081f6:	bf00      	nop
 80081f8:	20009014 	.word	0x20009014

080081fc <__malloc_lock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	@ (8008204 <__malloc_lock+0x8>)
 80081fe:	f7ff bf00 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	2000900c 	.word	0x2000900c

08008208 <__malloc_unlock>:
 8008208:	4801      	ldr	r0, [pc, #4]	@ (8008210 <__malloc_unlock+0x8>)
 800820a:	f7ff befb 	b.w	8008004 <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	2000900c 	.word	0x2000900c

08008214 <__sfputc_r>:
 8008214:	6893      	ldr	r3, [r2, #8]
 8008216:	3b01      	subs	r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	b410      	push	{r4}
 800821c:	6093      	str	r3, [r2, #8]
 800821e:	da08      	bge.n	8008232 <__sfputc_r+0x1e>
 8008220:	6994      	ldr	r4, [r2, #24]
 8008222:	42a3      	cmp	r3, r4
 8008224:	db01      	blt.n	800822a <__sfputc_r+0x16>
 8008226:	290a      	cmp	r1, #10
 8008228:	d103      	bne.n	8008232 <__sfputc_r+0x1e>
 800822a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800822e:	f7ff bdda 	b.w	8007de6 <__swbuf_r>
 8008232:	6813      	ldr	r3, [r2, #0]
 8008234:	1c58      	adds	r0, r3, #1
 8008236:	6010      	str	r0, [r2, #0]
 8008238:	7019      	strb	r1, [r3, #0]
 800823a:	4608      	mov	r0, r1
 800823c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008240:	4770      	bx	lr

08008242 <__sfputs_r>:
 8008242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008244:	4606      	mov	r6, r0
 8008246:	460f      	mov	r7, r1
 8008248:	4614      	mov	r4, r2
 800824a:	18d5      	adds	r5, r2, r3
 800824c:	42ac      	cmp	r4, r5
 800824e:	d101      	bne.n	8008254 <__sfputs_r+0x12>
 8008250:	2000      	movs	r0, #0
 8008252:	e007      	b.n	8008264 <__sfputs_r+0x22>
 8008254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008258:	463a      	mov	r2, r7
 800825a:	4630      	mov	r0, r6
 800825c:	f7ff ffda 	bl	8008214 <__sfputc_r>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d1f3      	bne.n	800824c <__sfputs_r+0xa>
 8008264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008268 <_vfiprintf_r>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	460d      	mov	r5, r1
 800826e:	b09d      	sub	sp, #116	@ 0x74
 8008270:	4614      	mov	r4, r2
 8008272:	4698      	mov	r8, r3
 8008274:	4606      	mov	r6, r0
 8008276:	b118      	cbz	r0, 8008280 <_vfiprintf_r+0x18>
 8008278:	6a03      	ldr	r3, [r0, #32]
 800827a:	b90b      	cbnz	r3, 8008280 <_vfiprintf_r+0x18>
 800827c:	f7ff fcc2 	bl	8007c04 <__sinit>
 8008280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008282:	07d9      	lsls	r1, r3, #31
 8008284:	d405      	bmi.n	8008292 <_vfiprintf_r+0x2a>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	059a      	lsls	r2, r3, #22
 800828a:	d402      	bmi.n	8008292 <_vfiprintf_r+0x2a>
 800828c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800828e:	f7ff feb8 	bl	8008002 <__retarget_lock_acquire_recursive>
 8008292:	89ab      	ldrh	r3, [r5, #12]
 8008294:	071b      	lsls	r3, r3, #28
 8008296:	d501      	bpl.n	800829c <_vfiprintf_r+0x34>
 8008298:	692b      	ldr	r3, [r5, #16]
 800829a:	b99b      	cbnz	r3, 80082c4 <_vfiprintf_r+0x5c>
 800829c:	4629      	mov	r1, r5
 800829e:	4630      	mov	r0, r6
 80082a0:	f7ff fde0 	bl	8007e64 <__swsetup_r>
 80082a4:	b170      	cbz	r0, 80082c4 <_vfiprintf_r+0x5c>
 80082a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082a8:	07dc      	lsls	r4, r3, #31
 80082aa:	d504      	bpl.n	80082b6 <_vfiprintf_r+0x4e>
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	b01d      	add	sp, #116	@ 0x74
 80082b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	0598      	lsls	r0, r3, #22
 80082ba:	d4f7      	bmi.n	80082ac <_vfiprintf_r+0x44>
 80082bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082be:	f7ff fea1 	bl	8008004 <__retarget_lock_release_recursive>
 80082c2:	e7f3      	b.n	80082ac <_vfiprintf_r+0x44>
 80082c4:	2300      	movs	r3, #0
 80082c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c8:	2320      	movs	r3, #32
 80082ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80082d2:	2330      	movs	r3, #48	@ 0x30
 80082d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008484 <_vfiprintf_r+0x21c>
 80082d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082dc:	f04f 0901 	mov.w	r9, #1
 80082e0:	4623      	mov	r3, r4
 80082e2:	469a      	mov	sl, r3
 80082e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e8:	b10a      	cbz	r2, 80082ee <_vfiprintf_r+0x86>
 80082ea:	2a25      	cmp	r2, #37	@ 0x25
 80082ec:	d1f9      	bne.n	80082e2 <_vfiprintf_r+0x7a>
 80082ee:	ebba 0b04 	subs.w	fp, sl, r4
 80082f2:	d00b      	beq.n	800830c <_vfiprintf_r+0xa4>
 80082f4:	465b      	mov	r3, fp
 80082f6:	4622      	mov	r2, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff ffa1 	bl	8008242 <__sfputs_r>
 8008300:	3001      	adds	r0, #1
 8008302:	f000 80a7 	beq.w	8008454 <_vfiprintf_r+0x1ec>
 8008306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008308:	445a      	add	r2, fp
 800830a:	9209      	str	r2, [sp, #36]	@ 0x24
 800830c:	f89a 3000 	ldrb.w	r3, [sl]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 809f 	beq.w	8008454 <_vfiprintf_r+0x1ec>
 8008316:	2300      	movs	r3, #0
 8008318:	f04f 32ff 	mov.w	r2, #4294967295
 800831c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008320:	f10a 0a01 	add.w	sl, sl, #1
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	9307      	str	r3, [sp, #28]
 8008328:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800832c:	931a      	str	r3, [sp, #104]	@ 0x68
 800832e:	4654      	mov	r4, sl
 8008330:	2205      	movs	r2, #5
 8008332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008336:	4853      	ldr	r0, [pc, #332]	@ (8008484 <_vfiprintf_r+0x21c>)
 8008338:	f7f7 ff82 	bl	8000240 <memchr>
 800833c:	9a04      	ldr	r2, [sp, #16]
 800833e:	b9d8      	cbnz	r0, 8008378 <_vfiprintf_r+0x110>
 8008340:	06d1      	lsls	r1, r2, #27
 8008342:	bf44      	itt	mi
 8008344:	2320      	movmi	r3, #32
 8008346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800834a:	0713      	lsls	r3, r2, #28
 800834c:	bf44      	itt	mi
 800834e:	232b      	movmi	r3, #43	@ 0x2b
 8008350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008354:	f89a 3000 	ldrb.w	r3, [sl]
 8008358:	2b2a      	cmp	r3, #42	@ 0x2a
 800835a:	d015      	beq.n	8008388 <_vfiprintf_r+0x120>
 800835c:	9a07      	ldr	r2, [sp, #28]
 800835e:	4654      	mov	r4, sl
 8008360:	2000      	movs	r0, #0
 8008362:	f04f 0c0a 	mov.w	ip, #10
 8008366:	4621      	mov	r1, r4
 8008368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800836c:	3b30      	subs	r3, #48	@ 0x30
 800836e:	2b09      	cmp	r3, #9
 8008370:	d94b      	bls.n	800840a <_vfiprintf_r+0x1a2>
 8008372:	b1b0      	cbz	r0, 80083a2 <_vfiprintf_r+0x13a>
 8008374:	9207      	str	r2, [sp, #28]
 8008376:	e014      	b.n	80083a2 <_vfiprintf_r+0x13a>
 8008378:	eba0 0308 	sub.w	r3, r0, r8
 800837c:	fa09 f303 	lsl.w	r3, r9, r3
 8008380:	4313      	orrs	r3, r2
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	46a2      	mov	sl, r4
 8008386:	e7d2      	b.n	800832e <_vfiprintf_r+0xc6>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	1d19      	adds	r1, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	9103      	str	r1, [sp, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	bfbb      	ittet	lt
 8008394:	425b      	neglt	r3, r3
 8008396:	f042 0202 	orrlt.w	r2, r2, #2
 800839a:	9307      	strge	r3, [sp, #28]
 800839c:	9307      	strlt	r3, [sp, #28]
 800839e:	bfb8      	it	lt
 80083a0:	9204      	strlt	r2, [sp, #16]
 80083a2:	7823      	ldrb	r3, [r4, #0]
 80083a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80083a6:	d10a      	bne.n	80083be <_vfiprintf_r+0x156>
 80083a8:	7863      	ldrb	r3, [r4, #1]
 80083aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ac:	d132      	bne.n	8008414 <_vfiprintf_r+0x1ac>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	1d1a      	adds	r2, r3, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	9203      	str	r2, [sp, #12]
 80083b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ba:	3402      	adds	r4, #2
 80083bc:	9305      	str	r3, [sp, #20]
 80083be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008494 <_vfiprintf_r+0x22c>
 80083c2:	7821      	ldrb	r1, [r4, #0]
 80083c4:	2203      	movs	r2, #3
 80083c6:	4650      	mov	r0, sl
 80083c8:	f7f7 ff3a 	bl	8000240 <memchr>
 80083cc:	b138      	cbz	r0, 80083de <_vfiprintf_r+0x176>
 80083ce:	9b04      	ldr	r3, [sp, #16]
 80083d0:	eba0 000a 	sub.w	r0, r0, sl
 80083d4:	2240      	movs	r2, #64	@ 0x40
 80083d6:	4082      	lsls	r2, r0
 80083d8:	4313      	orrs	r3, r2
 80083da:	3401      	adds	r4, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e2:	4829      	ldr	r0, [pc, #164]	@ (8008488 <_vfiprintf_r+0x220>)
 80083e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083e8:	2206      	movs	r2, #6
 80083ea:	f7f7 ff29 	bl	8000240 <memchr>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d03f      	beq.n	8008472 <_vfiprintf_r+0x20a>
 80083f2:	4b26      	ldr	r3, [pc, #152]	@ (800848c <_vfiprintf_r+0x224>)
 80083f4:	bb1b      	cbnz	r3, 800843e <_vfiprintf_r+0x1d6>
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	3307      	adds	r3, #7
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	3308      	adds	r3, #8
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008404:	443b      	add	r3, r7
 8008406:	9309      	str	r3, [sp, #36]	@ 0x24
 8008408:	e76a      	b.n	80082e0 <_vfiprintf_r+0x78>
 800840a:	fb0c 3202 	mla	r2, ip, r2, r3
 800840e:	460c      	mov	r4, r1
 8008410:	2001      	movs	r0, #1
 8008412:	e7a8      	b.n	8008366 <_vfiprintf_r+0xfe>
 8008414:	2300      	movs	r3, #0
 8008416:	3401      	adds	r4, #1
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	4619      	mov	r1, r3
 800841c:	f04f 0c0a 	mov.w	ip, #10
 8008420:	4620      	mov	r0, r4
 8008422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008426:	3a30      	subs	r2, #48	@ 0x30
 8008428:	2a09      	cmp	r2, #9
 800842a:	d903      	bls.n	8008434 <_vfiprintf_r+0x1cc>
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0c6      	beq.n	80083be <_vfiprintf_r+0x156>
 8008430:	9105      	str	r1, [sp, #20]
 8008432:	e7c4      	b.n	80083be <_vfiprintf_r+0x156>
 8008434:	fb0c 2101 	mla	r1, ip, r1, r2
 8008438:	4604      	mov	r4, r0
 800843a:	2301      	movs	r3, #1
 800843c:	e7f0      	b.n	8008420 <_vfiprintf_r+0x1b8>
 800843e:	ab03      	add	r3, sp, #12
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	462a      	mov	r2, r5
 8008444:	4b12      	ldr	r3, [pc, #72]	@ (8008490 <_vfiprintf_r+0x228>)
 8008446:	a904      	add	r1, sp, #16
 8008448:	4630      	mov	r0, r6
 800844a:	f3af 8000 	nop.w
 800844e:	4607      	mov	r7, r0
 8008450:	1c78      	adds	r0, r7, #1
 8008452:	d1d6      	bne.n	8008402 <_vfiprintf_r+0x19a>
 8008454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008456:	07d9      	lsls	r1, r3, #31
 8008458:	d405      	bmi.n	8008466 <_vfiprintf_r+0x1fe>
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	059a      	lsls	r2, r3, #22
 800845e:	d402      	bmi.n	8008466 <_vfiprintf_r+0x1fe>
 8008460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008462:	f7ff fdcf 	bl	8008004 <__retarget_lock_release_recursive>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	065b      	lsls	r3, r3, #25
 800846a:	f53f af1f 	bmi.w	80082ac <_vfiprintf_r+0x44>
 800846e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008470:	e71e      	b.n	80082b0 <_vfiprintf_r+0x48>
 8008472:	ab03      	add	r3, sp, #12
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	462a      	mov	r2, r5
 8008478:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <_vfiprintf_r+0x228>)
 800847a:	a904      	add	r1, sp, #16
 800847c:	4630      	mov	r0, r6
 800847e:	f000 f879 	bl	8008574 <_printf_i>
 8008482:	e7e4      	b.n	800844e <_vfiprintf_r+0x1e6>
 8008484:	08008c64 	.word	0x08008c64
 8008488:	08008c6e 	.word	0x08008c6e
 800848c:	00000000 	.word	0x00000000
 8008490:	08008243 	.word	0x08008243
 8008494:	08008c6a 	.word	0x08008c6a

08008498 <_printf_common>:
 8008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	4616      	mov	r6, r2
 800849e:	4698      	mov	r8, r3
 80084a0:	688a      	ldr	r2, [r1, #8]
 80084a2:	690b      	ldr	r3, [r1, #16]
 80084a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084a8:	4293      	cmp	r3, r2
 80084aa:	bfb8      	it	lt
 80084ac:	4613      	movlt	r3, r2
 80084ae:	6033      	str	r3, [r6, #0]
 80084b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084b4:	4607      	mov	r7, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	b10a      	cbz	r2, 80084be <_printf_common+0x26>
 80084ba:	3301      	adds	r3, #1
 80084bc:	6033      	str	r3, [r6, #0]
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	0699      	lsls	r1, r3, #26
 80084c2:	bf42      	ittt	mi
 80084c4:	6833      	ldrmi	r3, [r6, #0]
 80084c6:	3302      	addmi	r3, #2
 80084c8:	6033      	strmi	r3, [r6, #0]
 80084ca:	6825      	ldr	r5, [r4, #0]
 80084cc:	f015 0506 	ands.w	r5, r5, #6
 80084d0:	d106      	bne.n	80084e0 <_printf_common+0x48>
 80084d2:	f104 0a19 	add.w	sl, r4, #25
 80084d6:	68e3      	ldr	r3, [r4, #12]
 80084d8:	6832      	ldr	r2, [r6, #0]
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	42ab      	cmp	r3, r5
 80084de:	dc26      	bgt.n	800852e <_printf_common+0x96>
 80084e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084e4:	6822      	ldr	r2, [r4, #0]
 80084e6:	3b00      	subs	r3, #0
 80084e8:	bf18      	it	ne
 80084ea:	2301      	movne	r3, #1
 80084ec:	0692      	lsls	r2, r2, #26
 80084ee:	d42b      	bmi.n	8008548 <_printf_common+0xb0>
 80084f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084f4:	4641      	mov	r1, r8
 80084f6:	4638      	mov	r0, r7
 80084f8:	47c8      	blx	r9
 80084fa:	3001      	adds	r0, #1
 80084fc:	d01e      	beq.n	800853c <_printf_common+0xa4>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	6922      	ldr	r2, [r4, #16]
 8008502:	f003 0306 	and.w	r3, r3, #6
 8008506:	2b04      	cmp	r3, #4
 8008508:	bf02      	ittt	eq
 800850a:	68e5      	ldreq	r5, [r4, #12]
 800850c:	6833      	ldreq	r3, [r6, #0]
 800850e:	1aed      	subeq	r5, r5, r3
 8008510:	68a3      	ldr	r3, [r4, #8]
 8008512:	bf0c      	ite	eq
 8008514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008518:	2500      	movne	r5, #0
 800851a:	4293      	cmp	r3, r2
 800851c:	bfc4      	itt	gt
 800851e:	1a9b      	subgt	r3, r3, r2
 8008520:	18ed      	addgt	r5, r5, r3
 8008522:	2600      	movs	r6, #0
 8008524:	341a      	adds	r4, #26
 8008526:	42b5      	cmp	r5, r6
 8008528:	d11a      	bne.n	8008560 <_printf_common+0xc8>
 800852a:	2000      	movs	r0, #0
 800852c:	e008      	b.n	8008540 <_printf_common+0xa8>
 800852e:	2301      	movs	r3, #1
 8008530:	4652      	mov	r2, sl
 8008532:	4641      	mov	r1, r8
 8008534:	4638      	mov	r0, r7
 8008536:	47c8      	blx	r9
 8008538:	3001      	adds	r0, #1
 800853a:	d103      	bne.n	8008544 <_printf_common+0xac>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008544:	3501      	adds	r5, #1
 8008546:	e7c6      	b.n	80084d6 <_printf_common+0x3e>
 8008548:	18e1      	adds	r1, r4, r3
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	2030      	movs	r0, #48	@ 0x30
 800854e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008552:	4422      	add	r2, r4
 8008554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008558:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800855c:	3302      	adds	r3, #2
 800855e:	e7c7      	b.n	80084f0 <_printf_common+0x58>
 8008560:	2301      	movs	r3, #1
 8008562:	4622      	mov	r2, r4
 8008564:	4641      	mov	r1, r8
 8008566:	4638      	mov	r0, r7
 8008568:	47c8      	blx	r9
 800856a:	3001      	adds	r0, #1
 800856c:	d0e6      	beq.n	800853c <_printf_common+0xa4>
 800856e:	3601      	adds	r6, #1
 8008570:	e7d9      	b.n	8008526 <_printf_common+0x8e>
	...

08008574 <_printf_i>:
 8008574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	7e0f      	ldrb	r7, [r1, #24]
 800857a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800857c:	2f78      	cmp	r7, #120	@ 0x78
 800857e:	4691      	mov	r9, r2
 8008580:	4680      	mov	r8, r0
 8008582:	460c      	mov	r4, r1
 8008584:	469a      	mov	sl, r3
 8008586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800858a:	d807      	bhi.n	800859c <_printf_i+0x28>
 800858c:	2f62      	cmp	r7, #98	@ 0x62
 800858e:	d80a      	bhi.n	80085a6 <_printf_i+0x32>
 8008590:	2f00      	cmp	r7, #0
 8008592:	f000 80d2 	beq.w	800873a <_printf_i+0x1c6>
 8008596:	2f58      	cmp	r7, #88	@ 0x58
 8008598:	f000 80b9 	beq.w	800870e <_printf_i+0x19a>
 800859c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085a4:	e03a      	b.n	800861c <_printf_i+0xa8>
 80085a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085aa:	2b15      	cmp	r3, #21
 80085ac:	d8f6      	bhi.n	800859c <_printf_i+0x28>
 80085ae:	a101      	add	r1, pc, #4	@ (adr r1, 80085b4 <_printf_i+0x40>)
 80085b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085b4:	0800860d 	.word	0x0800860d
 80085b8:	08008621 	.word	0x08008621
 80085bc:	0800859d 	.word	0x0800859d
 80085c0:	0800859d 	.word	0x0800859d
 80085c4:	0800859d 	.word	0x0800859d
 80085c8:	0800859d 	.word	0x0800859d
 80085cc:	08008621 	.word	0x08008621
 80085d0:	0800859d 	.word	0x0800859d
 80085d4:	0800859d 	.word	0x0800859d
 80085d8:	0800859d 	.word	0x0800859d
 80085dc:	0800859d 	.word	0x0800859d
 80085e0:	08008721 	.word	0x08008721
 80085e4:	0800864b 	.word	0x0800864b
 80085e8:	080086db 	.word	0x080086db
 80085ec:	0800859d 	.word	0x0800859d
 80085f0:	0800859d 	.word	0x0800859d
 80085f4:	08008743 	.word	0x08008743
 80085f8:	0800859d 	.word	0x0800859d
 80085fc:	0800864b 	.word	0x0800864b
 8008600:	0800859d 	.word	0x0800859d
 8008604:	0800859d 	.word	0x0800859d
 8008608:	080086e3 	.word	0x080086e3
 800860c:	6833      	ldr	r3, [r6, #0]
 800860e:	1d1a      	adds	r2, r3, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6032      	str	r2, [r6, #0]
 8008614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800861c:	2301      	movs	r3, #1
 800861e:	e09d      	b.n	800875c <_printf_i+0x1e8>
 8008620:	6833      	ldr	r3, [r6, #0]
 8008622:	6820      	ldr	r0, [r4, #0]
 8008624:	1d19      	adds	r1, r3, #4
 8008626:	6031      	str	r1, [r6, #0]
 8008628:	0606      	lsls	r6, r0, #24
 800862a:	d501      	bpl.n	8008630 <_printf_i+0xbc>
 800862c:	681d      	ldr	r5, [r3, #0]
 800862e:	e003      	b.n	8008638 <_printf_i+0xc4>
 8008630:	0645      	lsls	r5, r0, #25
 8008632:	d5fb      	bpl.n	800862c <_printf_i+0xb8>
 8008634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008638:	2d00      	cmp	r5, #0
 800863a:	da03      	bge.n	8008644 <_printf_i+0xd0>
 800863c:	232d      	movs	r3, #45	@ 0x2d
 800863e:	426d      	negs	r5, r5
 8008640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008644:	4859      	ldr	r0, [pc, #356]	@ (80087ac <_printf_i+0x238>)
 8008646:	230a      	movs	r3, #10
 8008648:	e011      	b.n	800866e <_printf_i+0xfa>
 800864a:	6821      	ldr	r1, [r4, #0]
 800864c:	6833      	ldr	r3, [r6, #0]
 800864e:	0608      	lsls	r0, r1, #24
 8008650:	f853 5b04 	ldr.w	r5, [r3], #4
 8008654:	d402      	bmi.n	800865c <_printf_i+0xe8>
 8008656:	0649      	lsls	r1, r1, #25
 8008658:	bf48      	it	mi
 800865a:	b2ad      	uxthmi	r5, r5
 800865c:	2f6f      	cmp	r7, #111	@ 0x6f
 800865e:	4853      	ldr	r0, [pc, #332]	@ (80087ac <_printf_i+0x238>)
 8008660:	6033      	str	r3, [r6, #0]
 8008662:	bf14      	ite	ne
 8008664:	230a      	movne	r3, #10
 8008666:	2308      	moveq	r3, #8
 8008668:	2100      	movs	r1, #0
 800866a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800866e:	6866      	ldr	r6, [r4, #4]
 8008670:	60a6      	str	r6, [r4, #8]
 8008672:	2e00      	cmp	r6, #0
 8008674:	bfa2      	ittt	ge
 8008676:	6821      	ldrge	r1, [r4, #0]
 8008678:	f021 0104 	bicge.w	r1, r1, #4
 800867c:	6021      	strge	r1, [r4, #0]
 800867e:	b90d      	cbnz	r5, 8008684 <_printf_i+0x110>
 8008680:	2e00      	cmp	r6, #0
 8008682:	d04b      	beq.n	800871c <_printf_i+0x1a8>
 8008684:	4616      	mov	r6, r2
 8008686:	fbb5 f1f3 	udiv	r1, r5, r3
 800868a:	fb03 5711 	mls	r7, r3, r1, r5
 800868e:	5dc7      	ldrb	r7, [r0, r7]
 8008690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008694:	462f      	mov	r7, r5
 8008696:	42bb      	cmp	r3, r7
 8008698:	460d      	mov	r5, r1
 800869a:	d9f4      	bls.n	8008686 <_printf_i+0x112>
 800869c:	2b08      	cmp	r3, #8
 800869e:	d10b      	bne.n	80086b8 <_printf_i+0x144>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	07df      	lsls	r7, r3, #31
 80086a4:	d508      	bpl.n	80086b8 <_printf_i+0x144>
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	6861      	ldr	r1, [r4, #4]
 80086aa:	4299      	cmp	r1, r3
 80086ac:	bfde      	ittt	le
 80086ae:	2330      	movle	r3, #48	@ 0x30
 80086b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086b8:	1b92      	subs	r2, r2, r6
 80086ba:	6122      	str	r2, [r4, #16]
 80086bc:	f8cd a000 	str.w	sl, [sp]
 80086c0:	464b      	mov	r3, r9
 80086c2:	aa03      	add	r2, sp, #12
 80086c4:	4621      	mov	r1, r4
 80086c6:	4640      	mov	r0, r8
 80086c8:	f7ff fee6 	bl	8008498 <_printf_common>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d14a      	bne.n	8008766 <_printf_i+0x1f2>
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	b004      	add	sp, #16
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	f043 0320 	orr.w	r3, r3, #32
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	4833      	ldr	r0, [pc, #204]	@ (80087b0 <_printf_i+0x23c>)
 80086e4:	2778      	movs	r7, #120	@ 0x78
 80086e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	6831      	ldr	r1, [r6, #0]
 80086ee:	061f      	lsls	r7, r3, #24
 80086f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80086f4:	d402      	bmi.n	80086fc <_printf_i+0x188>
 80086f6:	065f      	lsls	r7, r3, #25
 80086f8:	bf48      	it	mi
 80086fa:	b2ad      	uxthmi	r5, r5
 80086fc:	6031      	str	r1, [r6, #0]
 80086fe:	07d9      	lsls	r1, r3, #31
 8008700:	bf44      	itt	mi
 8008702:	f043 0320 	orrmi.w	r3, r3, #32
 8008706:	6023      	strmi	r3, [r4, #0]
 8008708:	b11d      	cbz	r5, 8008712 <_printf_i+0x19e>
 800870a:	2310      	movs	r3, #16
 800870c:	e7ac      	b.n	8008668 <_printf_i+0xf4>
 800870e:	4827      	ldr	r0, [pc, #156]	@ (80087ac <_printf_i+0x238>)
 8008710:	e7e9      	b.n	80086e6 <_printf_i+0x172>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	f023 0320 	bic.w	r3, r3, #32
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	e7f6      	b.n	800870a <_printf_i+0x196>
 800871c:	4616      	mov	r6, r2
 800871e:	e7bd      	b.n	800869c <_printf_i+0x128>
 8008720:	6833      	ldr	r3, [r6, #0]
 8008722:	6825      	ldr	r5, [r4, #0]
 8008724:	6961      	ldr	r1, [r4, #20]
 8008726:	1d18      	adds	r0, r3, #4
 8008728:	6030      	str	r0, [r6, #0]
 800872a:	062e      	lsls	r6, r5, #24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	d501      	bpl.n	8008734 <_printf_i+0x1c0>
 8008730:	6019      	str	r1, [r3, #0]
 8008732:	e002      	b.n	800873a <_printf_i+0x1c6>
 8008734:	0668      	lsls	r0, r5, #25
 8008736:	d5fb      	bpl.n	8008730 <_printf_i+0x1bc>
 8008738:	8019      	strh	r1, [r3, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	4616      	mov	r6, r2
 8008740:	e7bc      	b.n	80086bc <_printf_i+0x148>
 8008742:	6833      	ldr	r3, [r6, #0]
 8008744:	1d1a      	adds	r2, r3, #4
 8008746:	6032      	str	r2, [r6, #0]
 8008748:	681e      	ldr	r6, [r3, #0]
 800874a:	6862      	ldr	r2, [r4, #4]
 800874c:	2100      	movs	r1, #0
 800874e:	4630      	mov	r0, r6
 8008750:	f7f7 fd76 	bl	8000240 <memchr>
 8008754:	b108      	cbz	r0, 800875a <_printf_i+0x1e6>
 8008756:	1b80      	subs	r0, r0, r6
 8008758:	6060      	str	r0, [r4, #4]
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	2300      	movs	r3, #0
 8008760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008764:	e7aa      	b.n	80086bc <_printf_i+0x148>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	4632      	mov	r2, r6
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d0ad      	beq.n	80086d0 <_printf_i+0x15c>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	079b      	lsls	r3, r3, #30
 8008778:	d413      	bmi.n	80087a2 <_printf_i+0x22e>
 800877a:	68e0      	ldr	r0, [r4, #12]
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	4298      	cmp	r0, r3
 8008780:	bfb8      	it	lt
 8008782:	4618      	movlt	r0, r3
 8008784:	e7a6      	b.n	80086d4 <_printf_i+0x160>
 8008786:	2301      	movs	r3, #1
 8008788:	4632      	mov	r2, r6
 800878a:	4649      	mov	r1, r9
 800878c:	4640      	mov	r0, r8
 800878e:	47d0      	blx	sl
 8008790:	3001      	adds	r0, #1
 8008792:	d09d      	beq.n	80086d0 <_printf_i+0x15c>
 8008794:	3501      	adds	r5, #1
 8008796:	68e3      	ldr	r3, [r4, #12]
 8008798:	9903      	ldr	r1, [sp, #12]
 800879a:	1a5b      	subs	r3, r3, r1
 800879c:	42ab      	cmp	r3, r5
 800879e:	dcf2      	bgt.n	8008786 <_printf_i+0x212>
 80087a0:	e7eb      	b.n	800877a <_printf_i+0x206>
 80087a2:	2500      	movs	r5, #0
 80087a4:	f104 0619 	add.w	r6, r4, #25
 80087a8:	e7f5      	b.n	8008796 <_printf_i+0x222>
 80087aa:	bf00      	nop
 80087ac:	08008c75 	.word	0x08008c75
 80087b0:	08008c86 	.word	0x08008c86

080087b4 <__sflush_r>:
 80087b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087bc:	0716      	lsls	r6, r2, #28
 80087be:	4605      	mov	r5, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	d454      	bmi.n	800886e <__sflush_r+0xba>
 80087c4:	684b      	ldr	r3, [r1, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dc02      	bgt.n	80087d0 <__sflush_r+0x1c>
 80087ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd48      	ble.n	8008862 <__sflush_r+0xae>
 80087d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d045      	beq.n	8008862 <__sflush_r+0xae>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087dc:	682f      	ldr	r7, [r5, #0]
 80087de:	6a21      	ldr	r1, [r4, #32]
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	d030      	beq.n	8008846 <__sflush_r+0x92>
 80087e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	0759      	lsls	r1, r3, #29
 80087ea:	d505      	bpl.n	80087f8 <__sflush_r+0x44>
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087f2:	b10b      	cbz	r3, 80087f8 <__sflush_r+0x44>
 80087f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	2300      	movs	r3, #0
 80087fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087fc:	6a21      	ldr	r1, [r4, #32]
 80087fe:	4628      	mov	r0, r5
 8008800:	47b0      	blx	r6
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	d106      	bne.n	8008816 <__sflush_r+0x62>
 8008808:	6829      	ldr	r1, [r5, #0]
 800880a:	291d      	cmp	r1, #29
 800880c:	d82b      	bhi.n	8008866 <__sflush_r+0xb2>
 800880e:	4a2a      	ldr	r2, [pc, #168]	@ (80088b8 <__sflush_r+0x104>)
 8008810:	410a      	asrs	r2, r1
 8008812:	07d6      	lsls	r6, r2, #31
 8008814:	d427      	bmi.n	8008866 <__sflush_r+0xb2>
 8008816:	2200      	movs	r2, #0
 8008818:	6062      	str	r2, [r4, #4]
 800881a:	04d9      	lsls	r1, r3, #19
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	d504      	bpl.n	800882c <__sflush_r+0x78>
 8008822:	1c42      	adds	r2, r0, #1
 8008824:	d101      	bne.n	800882a <__sflush_r+0x76>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b903      	cbnz	r3, 800882c <__sflush_r+0x78>
 800882a:	6560      	str	r0, [r4, #84]	@ 0x54
 800882c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800882e:	602f      	str	r7, [r5, #0]
 8008830:	b1b9      	cbz	r1, 8008862 <__sflush_r+0xae>
 8008832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008836:	4299      	cmp	r1, r3
 8008838:	d002      	beq.n	8008840 <__sflush_r+0x8c>
 800883a:	4628      	mov	r0, r5
 800883c:	f7ff fbf2 	bl	8008024 <_free_r>
 8008840:	2300      	movs	r3, #0
 8008842:	6363      	str	r3, [r4, #52]	@ 0x34
 8008844:	e00d      	b.n	8008862 <__sflush_r+0xae>
 8008846:	2301      	movs	r3, #1
 8008848:	4628      	mov	r0, r5
 800884a:	47b0      	blx	r6
 800884c:	4602      	mov	r2, r0
 800884e:	1c50      	adds	r0, r2, #1
 8008850:	d1c9      	bne.n	80087e6 <__sflush_r+0x32>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0c6      	beq.n	80087e6 <__sflush_r+0x32>
 8008858:	2b1d      	cmp	r3, #29
 800885a:	d001      	beq.n	8008860 <__sflush_r+0xac>
 800885c:	2b16      	cmp	r3, #22
 800885e:	d11e      	bne.n	800889e <__sflush_r+0xea>
 8008860:	602f      	str	r7, [r5, #0]
 8008862:	2000      	movs	r0, #0
 8008864:	e022      	b.n	80088ac <__sflush_r+0xf8>
 8008866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800886a:	b21b      	sxth	r3, r3
 800886c:	e01b      	b.n	80088a6 <__sflush_r+0xf2>
 800886e:	690f      	ldr	r7, [r1, #16]
 8008870:	2f00      	cmp	r7, #0
 8008872:	d0f6      	beq.n	8008862 <__sflush_r+0xae>
 8008874:	0793      	lsls	r3, r2, #30
 8008876:	680e      	ldr	r6, [r1, #0]
 8008878:	bf08      	it	eq
 800887a:	694b      	ldreq	r3, [r1, #20]
 800887c:	600f      	str	r7, [r1, #0]
 800887e:	bf18      	it	ne
 8008880:	2300      	movne	r3, #0
 8008882:	eba6 0807 	sub.w	r8, r6, r7
 8008886:	608b      	str	r3, [r1, #8]
 8008888:	f1b8 0f00 	cmp.w	r8, #0
 800888c:	dde9      	ble.n	8008862 <__sflush_r+0xae>
 800888e:	6a21      	ldr	r1, [r4, #32]
 8008890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008892:	4643      	mov	r3, r8
 8008894:	463a      	mov	r2, r7
 8008896:	4628      	mov	r0, r5
 8008898:	47b0      	blx	r6
 800889a:	2800      	cmp	r0, #0
 800889c:	dc08      	bgt.n	80088b0 <__sflush_r+0xfc>
 800889e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b0:	4407      	add	r7, r0
 80088b2:	eba8 0800 	sub.w	r8, r8, r0
 80088b6:	e7e7      	b.n	8008888 <__sflush_r+0xd4>
 80088b8:	dfbffffe 	.word	0xdfbffffe

080088bc <_fflush_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	690b      	ldr	r3, [r1, #16]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b913      	cbnz	r3, 80088cc <_fflush_r+0x10>
 80088c6:	2500      	movs	r5, #0
 80088c8:	4628      	mov	r0, r5
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	b118      	cbz	r0, 80088d6 <_fflush_r+0x1a>
 80088ce:	6a03      	ldr	r3, [r0, #32]
 80088d0:	b90b      	cbnz	r3, 80088d6 <_fflush_r+0x1a>
 80088d2:	f7ff f997 	bl	8007c04 <__sinit>
 80088d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f3      	beq.n	80088c6 <_fflush_r+0xa>
 80088de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088e0:	07d0      	lsls	r0, r2, #31
 80088e2:	d404      	bmi.n	80088ee <_fflush_r+0x32>
 80088e4:	0599      	lsls	r1, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_fflush_r+0x32>
 80088e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ea:	f7ff fb8a 	bl	8008002 <__retarget_lock_acquire_recursive>
 80088ee:	4628      	mov	r0, r5
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7ff ff5f 	bl	80087b4 <__sflush_r>
 80088f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088f8:	07da      	lsls	r2, r3, #31
 80088fa:	4605      	mov	r5, r0
 80088fc:	d4e4      	bmi.n	80088c8 <_fflush_r+0xc>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	059b      	lsls	r3, r3, #22
 8008902:	d4e1      	bmi.n	80088c8 <_fflush_r+0xc>
 8008904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008906:	f7ff fb7d 	bl	8008004 <__retarget_lock_release_recursive>
 800890a:	e7dd      	b.n	80088c8 <_fflush_r+0xc>

0800890c <__swhatbuf_r>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	460c      	mov	r4, r1
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	2900      	cmp	r1, #0
 8008916:	b096      	sub	sp, #88	@ 0x58
 8008918:	4615      	mov	r5, r2
 800891a:	461e      	mov	r6, r3
 800891c:	da0d      	bge.n	800893a <__swhatbuf_r+0x2e>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008924:	f04f 0100 	mov.w	r1, #0
 8008928:	bf14      	ite	ne
 800892a:	2340      	movne	r3, #64	@ 0x40
 800892c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008930:	2000      	movs	r0, #0
 8008932:	6031      	str	r1, [r6, #0]
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	b016      	add	sp, #88	@ 0x58
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	466a      	mov	r2, sp
 800893c:	f000 f87c 	bl	8008a38 <_fstat_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	dbec      	blt.n	800891e <__swhatbuf_r+0x12>
 8008944:	9901      	ldr	r1, [sp, #4]
 8008946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800894a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800894e:	4259      	negs	r1, r3
 8008950:	4159      	adcs	r1, r3
 8008952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008956:	e7eb      	b.n	8008930 <__swhatbuf_r+0x24>

08008958 <__smakebuf_r>:
 8008958:	898b      	ldrh	r3, [r1, #12]
 800895a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800895c:	079d      	lsls	r5, r3, #30
 800895e:	4606      	mov	r6, r0
 8008960:	460c      	mov	r4, r1
 8008962:	d507      	bpl.n	8008974 <__smakebuf_r+0x1c>
 8008964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	2301      	movs	r3, #1
 800896e:	6163      	str	r3, [r4, #20]
 8008970:	b003      	add	sp, #12
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008974:	ab01      	add	r3, sp, #4
 8008976:	466a      	mov	r2, sp
 8008978:	f7ff ffc8 	bl	800890c <__swhatbuf_r>
 800897c:	9f00      	ldr	r7, [sp, #0]
 800897e:	4605      	mov	r5, r0
 8008980:	4639      	mov	r1, r7
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff fbba 	bl	80080fc <_malloc_r>
 8008988:	b948      	cbnz	r0, 800899e <__smakebuf_r+0x46>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	059a      	lsls	r2, r3, #22
 8008990:	d4ee      	bmi.n	8008970 <__smakebuf_r+0x18>
 8008992:	f023 0303 	bic.w	r3, r3, #3
 8008996:	f043 0302 	orr.w	r3, r3, #2
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	e7e2      	b.n	8008964 <__smakebuf_r+0xc>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	6020      	str	r0, [r4, #0]
 80089a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	9b01      	ldr	r3, [sp, #4]
 80089aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089ae:	b15b      	cbz	r3, 80089c8 <__smakebuf_r+0x70>
 80089b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089b4:	4630      	mov	r0, r6
 80089b6:	f000 f851 	bl	8008a5c <_isatty_r>
 80089ba:	b128      	cbz	r0, 80089c8 <__smakebuf_r+0x70>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	431d      	orrs	r5, r3
 80089cc:	81a5      	strh	r5, [r4, #12]
 80089ce:	e7cf      	b.n	8008970 <__smakebuf_r+0x18>

080089d0 <_putc_r>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	460d      	mov	r5, r1
 80089d4:	4614      	mov	r4, r2
 80089d6:	4606      	mov	r6, r0
 80089d8:	b118      	cbz	r0, 80089e2 <_putc_r+0x12>
 80089da:	6a03      	ldr	r3, [r0, #32]
 80089dc:	b90b      	cbnz	r3, 80089e2 <_putc_r+0x12>
 80089de:	f7ff f911 	bl	8007c04 <__sinit>
 80089e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089e4:	07d8      	lsls	r0, r3, #31
 80089e6:	d405      	bmi.n	80089f4 <_putc_r+0x24>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	0599      	lsls	r1, r3, #22
 80089ec:	d402      	bmi.n	80089f4 <_putc_r+0x24>
 80089ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089f0:	f7ff fb07 	bl	8008002 <__retarget_lock_acquire_recursive>
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	da05      	bge.n	8008a0a <_putc_r+0x3a>
 80089fe:	69a2      	ldr	r2, [r4, #24]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	db12      	blt.n	8008a2a <_putc_r+0x5a>
 8008a04:	b2eb      	uxtb	r3, r5
 8008a06:	2b0a      	cmp	r3, #10
 8008a08:	d00f      	beq.n	8008a2a <_putc_r+0x5a>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	701d      	strb	r5, [r3, #0]
 8008a12:	b2ed      	uxtb	r5, r5
 8008a14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a16:	07da      	lsls	r2, r3, #31
 8008a18:	d405      	bmi.n	8008a26 <_putc_r+0x56>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_putc_r+0x56>
 8008a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a22:	f7ff faef 	bl	8008004 <__retarget_lock_release_recursive>
 8008a26:	4628      	mov	r0, r5
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7ff f9d9 	bl	8007de6 <__swbuf_r>
 8008a34:	4605      	mov	r5, r0
 8008a36:	e7ed      	b.n	8008a14 <_putc_r+0x44>

08008a38 <_fstat_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d07      	ldr	r5, [pc, #28]	@ (8008a58 <_fstat_r+0x20>)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	f7f8 fc82 	bl	800134e <_fstat>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	d102      	bne.n	8008a54 <_fstat_r+0x1c>
 8008a4e:	682b      	ldr	r3, [r5, #0]
 8008a50:	b103      	cbz	r3, 8008a54 <_fstat_r+0x1c>
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	bd38      	pop	{r3, r4, r5, pc}
 8008a56:	bf00      	nop
 8008a58:	20009008 	.word	0x20009008

08008a5c <_isatty_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d06      	ldr	r5, [pc, #24]	@ (8008a78 <_isatty_r+0x1c>)
 8008a60:	2300      	movs	r3, #0
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	602b      	str	r3, [r5, #0]
 8008a68:	f7f8 fc81 	bl	800136e <_isatty>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_isatty_r+0x1a>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_isatty_r+0x1a>
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20009008 	.word	0x20009008

08008a7c <_sbrk_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d06      	ldr	r5, [pc, #24]	@ (8008a98 <_sbrk_r+0x1c>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	f7f8 fc8a 	bl	80013a0 <_sbrk>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_sbrk_r+0x1a>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_sbrk_r+0x1a>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	20009008 	.word	0x20009008

08008a9c <_init>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_fini>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr
